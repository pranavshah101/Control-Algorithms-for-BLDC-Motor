
DTC_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  080094c8  080094c8  000194c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800999c  0800999c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800999c  0800999c  0001999c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099a4  080099a4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080099ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001e4  08009b90  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08009b90  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed2a  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ef  00000000  00000000  0002ef3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00031230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00031fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022976  00000000  00000000  00032c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecbd  00000000  00000000  0005560e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1bca  00000000  00000000  000642cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135e95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e2c  00000000  00000000  00135ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080094b0 	.word	0x080094b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	080094b0 	.word	0x080094b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;


 void MX_TIM2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <MX_TIM2_Init+0xc4>)
 8001050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001054:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <MX_TIM2_Init+0xc4>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <MX_TIM2_Init+0xc4>)
 800105e:	2220      	movs	r2, #32
 8001060:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2699;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_TIM2_Init+0xc4>)
 8001064:	f640 228b 	movw	r2, #2699	; 0xa8b
 8001068:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_TIM2_Init+0xc4>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_TIM2_Init+0xc4>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001076:	481e      	ldr	r0, [pc, #120]	; (80010f0 <MX_TIM2_Init+0xc4>)
 8001078:	f002 fa32 	bl	80034e0 <HAL_TIM_PWM_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001082:	f000 fdab 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	4619      	mov	r1, r3
 8001094:	4816      	ldr	r0, [pc, #88]	; (80010f0 <MX_TIM2_Init+0xc4>)
 8001096:	f003 fa31 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80010a0:	f000 fd9c 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	; 0x60
 80010a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_TIM2_Init+0xc4>)
 80010bc:	f002 fd64 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80010c6:	f000 fd89 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2204      	movs	r2, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <MX_TIM2_Init+0xc4>)
 80010d2:	f002 fd59 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010dc:	f000 fd7e 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <MX_TIM2_Init+0xc4>)
 80010e2:	f000 fe51 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	; 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200002b0 	.word	0x200002b0

080010f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM3_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2224      	movs	r2, #36	; 0x24
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fda6 	bl	8004c54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <MX_TIM3_Init+0xa0>)
 8001112:	4a21      	ldr	r2, [pc, #132]	; (8001198 <MX_TIM3_Init+0xa4>)
 8001114:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_TIM3_Init+0xa0>)
 8001118:	2201      	movs	r2, #1
 800111a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_TIM3_Init+0xa0>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_TIM3_Init+0xa0>)
 8001124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001128:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_TIM3_Init+0xa0>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_TIM3_Init+0xa0>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001136:	2303      	movs	r3, #3
 8001138:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800113e:	2301      	movs	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800114e:	2301      	movs	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_TIM3_Init+0xa0>)
 8001162:	f002 fad5 	bl	8003710 <HAL_TIM_Encoder_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800116c:	f000 fd36 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_TIM3_Init+0xa0>)
 800117e:	f003 f9bd 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001188:	f000 fd28 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3730      	adds	r7, #48	; 0x30
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000268 	.word	0x20000268
 8001198:	40000400 	.word	0x40000400

0800119c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM4_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a2:	f107 0320 	add.w	r3, r7, #32
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <MX_TIM4_Init+0xec>)
 80011c0:	4a32      	ldr	r2, [pc, #200]	; (800128c <MX_TIM4_Init+0xf0>)
 80011c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011c4:	4b30      	ldr	r3, [pc, #192]	; (8001288 <MX_TIM4_Init+0xec>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <MX_TIM4_Init+0xec>)
 80011cc:	2220      	movs	r2, #32
 80011ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2699;
 80011d0:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <MX_TIM4_Init+0xec>)
 80011d2:	f640 228b 	movw	r2, #2699	; 0xa8b
 80011d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <MX_TIM4_Init+0xec>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_TIM4_Init+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011e4:	4828      	ldr	r0, [pc, #160]	; (8001288 <MX_TIM4_Init+0xec>)
 80011e6:	f002 f97b 	bl	80034e0 <HAL_TIM_PWM_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80011f0:	f000 fcf4 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	4619      	mov	r1, r3
 8001202:	4821      	ldr	r0, [pc, #132]	; (8001288 <MX_TIM4_Init+0xec>)
 8001204:	f003 f97a 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800120e:	f000 fce5 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001212:	2360      	movs	r3, #96	; 0x60
 8001214:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	4817      	ldr	r0, [pc, #92]	; (8001288 <MX_TIM4_Init+0xec>)
 800122a:	f002 fcad 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001234:	f000 fcd2 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2204      	movs	r2, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <MX_TIM4_Init+0xec>)
 8001240:	f002 fca2 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800124a:	f000 fcc7 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2208      	movs	r2, #8
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_TIM4_Init+0xec>)
 8001256:	f002 fc97 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001260:	f000 fcbc 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	220c      	movs	r2, #12
 8001268:	4619      	mov	r1, r3
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM4_Init+0xec>)
 800126c:	f002 fc8c 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001276:	f000 fcb1 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM4_Init+0xec>)
 800127c:	f000 fd84 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000220 	.word	0x20000220
 800128c:	40000800 	.word	0x40000800

08001290 <encoders_init>:


void encoders_init()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 8001294:	2100      	movs	r1, #0
 8001296:	4804      	ldr	r0, [pc, #16]	; (80012a8 <encoders_init+0x18>)
 8001298:	f002 fae0 	bl	800385c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800129c:	2104      	movs	r1, #4
 800129e:	4802      	ldr	r0, [pc, #8]	; (80012a8 <encoders_init+0x18>)
 80012a0:	f002 fadc 	bl	800385c <HAL_TIM_Encoder_Start>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000268 	.word	0x20000268

080012ac <encoders_define_home>:

void encoders_define_home()
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
	TIM3->CNT=0;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <encoders_define_home+0x14>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40000400 	.word	0x40000400

080012c4 <encoder>:


float encoder(float *e_theta,float *r_theta,float *diff,float *omega)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]

	static float *previous_theta=0;
	float cur_enc_cnt=0;
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]

	//int demo;
	static int counter=0;
	static float pre_enc_cnt;
	static float omega1=0;
	const int a=8;
 80012d8:	2308      	movs	r3, #8
 80012da:	61bb      	str	r3, [r7, #24]
	const float theta_constant=0.003066;
 80012dc:	4b47      	ldr	r3, [pc, #284]	; (80013fc <encoder+0x138>)
 80012de:	617b      	str	r3, [r7, #20]
	cur_enc_cnt=((TIM3->CNT)*1);
 80012e0:	4b47      	ldr	r3, [pc, #284]	; (8001400 <encoder+0x13c>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ec:	edc7 7a07 	vstr	s15, [r7, #28]

	if(cur_enc_cnt>65000)
 80012f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001404 <encoder+0x140>
 80012f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	dd07      	ble.n	8001312 <encoder+0x4e>
	{
		TIM3->CNT=2048;
 8001302:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <encoder+0x13c>)
 8001304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
		cur_enc_cnt=2048;
 800130a:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	e00e      	b.n	8001330 <encoder+0x6c>
	}
	 else if(cur_enc_cnt>2048)
 8001312:	edd7 7a07 	vldr	s15, [r7, #28]
 8001316:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001408 <encoder+0x144>
 800131a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	dd05      	ble.n	8001330 <encoder+0x6c>
	 {
		 TIM3->CNT=0;
 8001324:	4b36      	ldr	r3, [pc, #216]	; (8001400 <encoder+0x13c>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
		 cur_enc_cnt=0;
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
	 }
	*r_theta=(cur_enc_cnt)*theta_constant;   //Theta is converted to rad
 8001330:	ed97 7a07 	vldr	s14, [r7, #28]
 8001334:	edd7 7a05 	vldr	s15, [r7, #20]
 8001338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	edc3 7a00 	vstr	s15, [r3]
	 *e_theta=a*(*r_theta);
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	edc3 7a00 	vstr	s15, [r3]

 if(counter==8)
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <encoder+0x148>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b08      	cmp	r3, #8
 8001362:	d125      	bne.n	80013b0 <encoder+0xec>
	 {
	 counter=0;
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <encoder+0x148>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
		 if(cur_enc_cnt<=2048)
 800136a:	edd7 7a07 	vldr	s15, [r7, #28]
 800136e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001408 <encoder+0x144>
 8001372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	d81d      	bhi.n	80013b8 <encoder+0xf4>
		 {


	 omega1=(cur_enc_cnt-pre_enc_cnt)*(float)7.665;
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <encoder+0x14c>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ed97 7a07 	vldr	s14, [r7, #28]
 8001386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001414 <encoder+0x150>
 800138e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <encoder+0x154>)
 8001394:	edc3 7a00 	vstr	s15, [r3]
		*diff = omega1;
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <encoder+0x154>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	601a      	str	r2, [r3, #0]
		//omega1=(*diff)*7.665;
		*omega=omega1;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <encoder+0x154>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	601a      	str	r2, [r3, #0]
			pre_enc_cnt=cur_enc_cnt;
 80013a8:	4a19      	ldr	r2, [pc, #100]	; (8001410 <encoder+0x14c>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00e      	b.n	80013ce <encoder+0x10a>
		 }

	 }
	 else
	 {
		 *omega=omega1;
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <encoder+0x154>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	601a      	str	r2, [r3, #0]





	while(*e_theta >(float)6.28)
 80013b8:	e009      	b.n	80013ce <encoder+0x10a>
	 {
		 *e_theta=*e_theta-(float)6.28;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800141c <encoder+0x158>
 80013c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	edc3 7a00 	vstr	s15, [r3]
	while(*e_theta >(float)6.28)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800141c <encoder+0x158>
 80013d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	dceb      	bgt.n	80013ba <encoder+0xf6>
	 }

	 counter++;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <encoder+0x148>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <encoder+0x148>)
 80013ea:	6013      	str	r3, [r2, #0]

 }
 80013ec:	bf00      	nop
 80013ee:	eeb0 0a67 	vmov.f32	s0, s15
 80013f2:	3724      	adds	r7, #36	; 0x24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	3b48eef2 	.word	0x3b48eef2
 8001400:	40000400 	.word	0x40000400
 8001404:	477de800 	.word	0x477de800
 8001408:	45000000 	.word	0x45000000
 800140c:	20000200 	.word	0x20000200
 8001410:	20000204 	.word	0x20000204
 8001414:	40f547ae 	.word	0x40f547ae
 8001418:	20000208 	.word	0x20000208
 800141c:	40c8f5c3 	.word	0x40c8f5c3

08001420 <PWM_Init>:




void PWM_Init()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);//Q1 -a
 8001424:	2100      	movs	r1, #0
 8001426:	480c      	ldr	r0, [pc, #48]	; (8001458 <PWM_Init+0x38>)
 8001428:	f002 f8aa 	bl	8003580 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);//Q2-a_c
 800142c:	2104      	movs	r1, #4
 800142e:	480a      	ldr	r0, [pc, #40]	; (8001458 <PWM_Init+0x38>)
 8001430:	f002 f8a6 	bl	8003580 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);//Q3-b
 8001434:	2100      	movs	r1, #0
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <PWM_Init+0x3c>)
 8001438:	f002 f8a2 	bl	8003580 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);//Q4-b_c
 800143c:	2104      	movs	r1, #4
 800143e:	4807      	ldr	r0, [pc, #28]	; (800145c <PWM_Init+0x3c>)
 8001440:	f002 f89e 	bl	8003580 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);//Q5-c
 8001444:	2108      	movs	r1, #8
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <PWM_Init+0x3c>)
 8001448:	f002 f89a 	bl	8003580 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);//Q6-c_c
 800144c:	210c      	movs	r1, #12
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <PWM_Init+0x3c>)
 8001450:	f002 f896 	bl	8003580 <HAL_TIM_PWM_Start>

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200002b0 	.word	0x200002b0
 800145c:	20000220 	.word	0x20000220

08001460 <voltage_vector>:


void voltage_vector(float theta ,float omega,int *vv)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	ed87 0a03 	vstr	s0, [r7, #12]
 800146a:	edc7 0a02 	vstr	s1, [r7, #8]
 800146e:	6078      	str	r0, [r7, #4]



	if(theta>=0 && theta<(float)0.5235)
 8001470:	edd7 7a03 	vldr	s15, [r7, #12]
 8001474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	db0c      	blt.n	8001498 <voltage_vector+0x38>
 800147e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001482:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80015b0 <voltage_vector+0x150>
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d503      	bpl.n	8001498 <voltage_vector+0x38>
	{
		*vv=6;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2206      	movs	r2, #6
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e085      	b.n	80015a4 <voltage_vector+0x144>
	}

	else if(theta>=(float)0.5235 && theta<(float)1.5707)
 8001498:	edd7 7a03 	vldr	s15, [r7, #12]
 800149c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80015b0 <voltage_vector+0x150>
 80014a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	db0c      	blt.n	80014c4 <voltage_vector+0x64>
 80014aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ae:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80015b4 <voltage_vector+0x154>
 80014b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	d503      	bpl.n	80014c4 <voltage_vector+0x64>
	{
		*vv=1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e06f      	b.n	80015a4 <voltage_vector+0x144>
	}

	else if(theta>=(float)1.5707 && theta<(float)2.61799)
 80014c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80015b4 <voltage_vector+0x154>
 80014cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	db0c      	blt.n	80014f0 <voltage_vector+0x90>
 80014d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014da:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80015b8 <voltage_vector+0x158>
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	d503      	bpl.n	80014f0 <voltage_vector+0x90>
	{
		*vv=2;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e059      	b.n	80015a4 <voltage_vector+0x144>
	}

	else if(theta>=(float)2.61799 && theta<(float)3.665)
 80014f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80015b8 <voltage_vector+0x158>
 80014f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	db0c      	blt.n	800151c <voltage_vector+0xbc>
 8001502:	edd7 7a03 	vldr	s15, [r7, #12]
 8001506:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80015bc <voltage_vector+0x15c>
 800150a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	d503      	bpl.n	800151c <voltage_vector+0xbc>
	{
		*vv=3;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2203      	movs	r2, #3
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e043      	b.n	80015a4 <voltage_vector+0x144>
	}

	else if(theta>=(float)3.6651 && theta<(float)4.712)
 800151c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001520:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80015c0 <voltage_vector+0x160>
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	db0c      	blt.n	8001548 <voltage_vector+0xe8>
 800152e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001532:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80015c4 <voltage_vector+0x164>
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	d503      	bpl.n	8001548 <voltage_vector+0xe8>
	{
		*vv=4;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2204      	movs	r2, #4
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e02d      	b.n	80015a4 <voltage_vector+0x144>
	}
	else if(theta>=(float)4.712  && theta<(float)5.7595)
 8001548:	edd7 7a03 	vldr	s15, [r7, #12]
 800154c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80015c4 <voltage_vector+0x164>
 8001550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001558:	db0c      	blt.n	8001574 <voltage_vector+0x114>
 800155a:	edd7 7a03 	vldr	s15, [r7, #12]
 800155e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80015c8 <voltage_vector+0x168>
 8001562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	d503      	bpl.n	8001574 <voltage_vector+0x114>
	{
		*vv=5;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2205      	movs	r2, #5
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e017      	b.n	80015a4 <voltage_vector+0x144>
	}
	else if(theta>=(float)5.7595 && theta<(float)6.28)
 8001574:	edd7 7a03 	vldr	s15, [r7, #12]
 8001578:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80015c8 <voltage_vector+0x168>
 800157c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	da00      	bge.n	8001588 <voltage_vector+0x128>
	{
		*vv=6;
	}

}
 8001586:	e00d      	b.n	80015a4 <voltage_vector+0x144>
	else if(theta>=(float)5.7595 && theta<(float)6.28)
 8001588:	edd7 7a03 	vldr	s15, [r7, #12]
 800158c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015cc <voltage_vector+0x16c>
 8001590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	d400      	bmi.n	800159c <voltage_vector+0x13c>
}
 800159a:	e003      	b.n	80015a4 <voltage_vector+0x144>
		*vv=6;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2206      	movs	r2, #6
 80015a0:	601a      	str	r2, [r3, #0]
}
 80015a2:	e7ff      	b.n	80015a4 <voltage_vector+0x144>
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	3f060419 	.word	0x3f060419
 80015b4:	3fc90cb3 	.word	0x3fc90cb3
 80015b8:	40278d26 	.word	0x40278d26
 80015bc:	406a8f5c 	.word	0x406a8f5c
 80015c0:	406a9100 	.word	0x406a9100
 80015c4:	4096c8b4 	.word	0x4096c8b4
 80015c8:	40b84dd3 	.word	0x40b84dd3
 80015cc:	40c8f5c3 	.word	0x40c8f5c3

080015d0 <PWM_Generation>:


void PWM_Generation(int vv,int duty_cycle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]

	duty_cycle=26.99*duty_cycle;
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f7fe ffc2 	bl	8000564 <__aeabi_i2d>
 80015e0:	a35e      	add	r3, pc, #376	; (adr r3, 800175c <PWM_Generation+0x18c>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7ff f827 	bl	8000638 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fad1 	bl	8000b98 <__aeabi_d2iz>
 80015f6:	4603      	mov	r3, r0
 80015f8:	603b      	str	r3, [r7, #0]

	if(vv==1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d115      	bne.n	800162c <PWM_Generation+0x5c>
	{
	TIM2->CCR1=duty_cycle;    //Q1
 8001600:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2=0;
 8001608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800160c:	2200      	movs	r2, #0
 800160e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1=0;
 8001610:	4b51      	ldr	r3, [pc, #324]	; (8001758 <PWM_Generation+0x188>)
 8001612:	2200      	movs	r2, #0
 8001614:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2=2699 ; //Q4
 8001616:	4b50      	ldr	r3, [pc, #320]	; (8001758 <PWM_Generation+0x188>)
 8001618:	f640 228b 	movw	r2, #2699	; 0xa8b
 800161c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3=0;
 800161e:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <PWM_Generation+0x188>)
 8001620:	2200      	movs	r2, #0
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4=0;
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <PWM_Generation+0x188>)
 8001626:	2200      	movs	r2, #0
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CCR1=0;
	TIM4->CCR2=0;
	TIM4->CCR3=0;
	TIM4->CCR4=0;
	}
}
 800162a:	e090      	b.n	800174e <PWM_Generation+0x17e>
	else if(vv==2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d115      	bne.n	800165e <PWM_Generation+0x8e>
		TIM2->CCR1=duty_cycle;   //Q1
 8001632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2=0;
 800163a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163e:	2200      	movs	r2, #0
 8001640:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR1=0;
 8001642:	4b45      	ldr	r3, [pc, #276]	; (8001758 <PWM_Generation+0x188>)
 8001644:	2200      	movs	r2, #0
 8001646:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2=0;
 8001648:	4b43      	ldr	r3, [pc, #268]	; (8001758 <PWM_Generation+0x188>)
 800164a:	2200      	movs	r2, #0
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3=0;
 800164e:	4b42      	ldr	r3, [pc, #264]	; (8001758 <PWM_Generation+0x188>)
 8001650:	2200      	movs	r2, #0
 8001652:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4=2699; //Q6
 8001654:	4b40      	ldr	r3, [pc, #256]	; (8001758 <PWM_Generation+0x188>)
 8001656:	f640 228b 	movw	r2, #2699	; 0xa8b
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800165c:	e077      	b.n	800174e <PWM_Generation+0x17e>
	else if(vv==3)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d115      	bne.n	8001690 <PWM_Generation+0xc0>
		TIM2->CCR1=0;
 8001664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001668:	2200      	movs	r2, #0
 800166a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2=0;
 800166c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001670:	2200      	movs	r2, #0
 8001672:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR1=duty_cycle;   //Q3
 8001674:	4a38      	ldr	r2, [pc, #224]	; (8001758 <PWM_Generation+0x188>)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	6353      	str	r3, [r2, #52]	; 0x34
		TIM4->CCR2=0;
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <PWM_Generation+0x188>)
 800167c:	2200      	movs	r2, #0
 800167e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3=0;
 8001680:	4b35      	ldr	r3, [pc, #212]	; (8001758 <PWM_Generation+0x188>)
 8001682:	2200      	movs	r2, #0
 8001684:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4=2699 ;//Q6
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <PWM_Generation+0x188>)
 8001688:	f640 228b 	movw	r2, #2699	; 0xa8b
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800168e:	e05e      	b.n	800174e <PWM_Generation+0x17e>
	else if(vv==4)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b04      	cmp	r3, #4
 8001694:	d115      	bne.n	80016c2 <PWM_Generation+0xf2>
		TIM2->CCR1=0;
 8001696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169a:	2200      	movs	r2, #0
 800169c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2=2699;  //Q2
 800169e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a2:	f640 228b 	movw	r2, #2699	; 0xa8b
 80016a6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR1=duty_cycle;   //Q3
 80016a8:	4a2b      	ldr	r2, [pc, #172]	; (8001758 <PWM_Generation+0x188>)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6353      	str	r3, [r2, #52]	; 0x34
		TIM4->CCR2=0;
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <PWM_Generation+0x188>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3=0;
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <PWM_Generation+0x188>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4=0;
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <PWM_Generation+0x188>)
 80016bc:	2200      	movs	r2, #0
 80016be:	641a      	str	r2, [r3, #64]	; 0x40
}
 80016c0:	e045      	b.n	800174e <PWM_Generation+0x17e>
	else if(vv==5)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b05      	cmp	r3, #5
 80016c6:	d115      	bne.n	80016f4 <PWM_Generation+0x124>
		TIM2->CCR1=0;
 80016c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016cc:	2200      	movs	r2, #0
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2=2699  ;       //Q2
 80016d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d4:	f640 228b 	movw	r2, #2699	; 0xa8b
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR1=0;
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <PWM_Generation+0x188>)
 80016dc:	2200      	movs	r2, #0
 80016de:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2=0;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <PWM_Generation+0x188>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3=duty_cycle;          //Q5
 80016e6:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <PWM_Generation+0x188>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM4->CCR4=0;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <PWM_Generation+0x188>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80016f2:	e02c      	b.n	800174e <PWM_Generation+0x17e>
	else if(vv==6)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d115      	bne.n	8001726 <PWM_Generation+0x156>
		TIM2->CCR1=0;
 80016fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016fe:	2200      	movs	r2, #0
 8001700:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2=0;
 8001702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001706:	2200      	movs	r2, #0
 8001708:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR1=0;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <PWM_Generation+0x188>)
 800170c:	2200      	movs	r2, #0
 800170e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2=2699;      //Q4
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <PWM_Generation+0x188>)
 8001712:	f640 228b 	movw	r2, #2699	; 0xa8b
 8001716:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3=duty_cycle;           //Q5
 8001718:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <PWM_Generation+0x188>)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM4->CCR4=0;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <PWM_Generation+0x188>)
 8001720:	2200      	movs	r2, #0
 8001722:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001724:	e013      	b.n	800174e <PWM_Generation+0x17e>
	TIM2->CCR1=0;
 8001726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800172a:	2200      	movs	r2, #0
 800172c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2=0;
 800172e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001732:	2200      	movs	r2, #0
 8001734:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1=0;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <PWM_Generation+0x188>)
 8001738:	2200      	movs	r2, #0
 800173a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2=0;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <PWM_Generation+0x188>)
 800173e:	2200      	movs	r2, #0
 8001740:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3=0;
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <PWM_Generation+0x188>)
 8001744:	2200      	movs	r2, #0
 8001746:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4=0;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <PWM_Generation+0x188>)
 800174a:	2200      	movs	r2, #0
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40000800 	.word	0x40000800
 800175c:	a3d70a3d 	.word	0xa3d70a3d
 8001760:	403afd70 	.word	0x403afd70

08001764 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART3_UART_Init(void);

/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == TIM5)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a38      	ldr	r2, [pc, #224]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d16a      	bne.n	800184c <HAL_TIM_PeriodElapsedCallback+0xe8>
		{
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,1);
 8001776:	2201      	movs	r2, #1
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	4837      	ldr	r0, [pc, #220]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800177c:	f001 f840 	bl	8002800 <HAL_GPIO_WritePin>

			EncoderPulseCount=TIM3->CNT;
 8001780:	4b36      	ldr	r3, [pc, #216]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	4a36      	ldr	r2, [pc, #216]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001786:	6013      	str	r3, [r2, #0]


			encoder(&e_angle,&r_angle,&diff,&omega);
 8001788:	4b36      	ldr	r3, [pc, #216]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800178a:	4a37      	ldr	r2, [pc, #220]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800178c:	4937      	ldr	r1, [pc, #220]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800178e:	4838      	ldr	r0, [pc, #224]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001790:	f7ff fd98 	bl	80012c4 <encoder>
			//error=omega-w_sp;

			voltage_vector(e_angle ,diff, &vv);
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800179c:	ed93 7a00 	vldr	s14, [r3]
 80017a0:	4834      	ldr	r0, [pc, #208]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80017a2:	eef0 0a47 	vmov.f32	s1, s14
 80017a6:	eeb0 0a67 	vmov.f32	s0, s15
 80017aa:	f7ff fe59 	bl	8001460 <voltage_vector>
			error=w_sp+omega;
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80017c6:	edc3 7a00 	vstr	s15, [r3]
			PWM=(float)30000*error+(float)5000*(error-prev_error);
 80017ca:	4b2c      	ldr	r3, [pc, #176]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001880 <HAL_TIM_PeriodElapsedCallback+0x11c>
 80017d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80017da:	edd3 6a00 	vldr	s13, [r3]
 80017de:	4b29      	ldr	r3, [pc, #164]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017e8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001888 <HAL_TIM_PeriodElapsedCallback+0x124>
 80017ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80017f6:	edc3 7a00 	vstr	s15, [r3]
			prev_error=error;
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a21      	ldr	r2, [pc, #132]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001800:	6013      	str	r3, [r2, #0]
			if(PWM>42)
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001890 <HAL_TIM_PeriodElapsedCallback+0x12c>
 800180c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	dd03      	ble.n	800181e <HAL_TIM_PeriodElapsedCallback+0xba>
			{
					PWM=42;
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001818:	4a1e      	ldr	r2, [pc, #120]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e00b      	b.n	8001836 <HAL_TIM_PeriodElapsedCallback+0xd2>
			}
			else if(PWM<0)
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	d503      	bpl.n	8001836 <HAL_TIM_PeriodElapsedCallback+0xd2>
			{
				PWM=0;
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
			}
			PWM_Generation(vv,100);
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2164      	movs	r1, #100	; 0x64
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fec7 	bl	80015d0 <PWM_Generation>

			//theta_inital=r_angle;
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,0);
 8001842:	2200      	movs	r2, #0
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	4804      	ldr	r0, [pc, #16]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001848:	f000 ffda 	bl	8002800 <HAL_GPIO_WritePin>


		}


 }
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40000c00 	.word	0x40000c00
 8001858:	40020400 	.word	0x40020400
 800185c:	40000400 	.word	0x40000400
 8001860:	200003a4 	.word	0x200003a4
 8001864:	200003b0 	.word	0x200003b0
 8001868:	200003ac 	.word	0x200003ac
 800186c:	200002f8 	.word	0x200002f8
 8001870:	200002fc 	.word	0x200002fc
 8001874:	20000394 	.word	0x20000394
 8001878:	20000000 	.word	0x20000000
 800187c:	2000020c 	.word	0x2000020c
 8001880:	46ea6000 	.word	0x46ea6000
 8001884:	20000210 	.word	0x20000210
 8001888:	459c4000 	.word	0x459c4000
 800188c:	200003a8 	.word	0x200003a8
 8001890:	42280000 	.word	0x42280000
 8001894:	42280000 	.word	0x42280000

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189c:	f000 fc98 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a0:	f000 f834 	bl	800190c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a4:	f000 f91a 	bl	8001adc <MX_GPIO_Init>
  MX_TIM2_Init();
 80018a8:	f7ff fbc0 	bl	800102c <MX_TIM2_Init>
  MX_TIM3_Init();
 80018ac:	f7ff fc22 	bl	80010f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018b0:	f7ff fc74 	bl	800119c <MX_TIM4_Init>
  MX_TIM5_Init();
 80018b4:	f000 f89c 	bl	80019f0 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80018b8:	f000 f8e6 	bl	8001a88 <MX_USART3_UART_Init>
HAL_TIM_Base_Start_IT(&htim5);
 80018bc:	480e      	ldr	r0, [pc, #56]	; (80018f8 <main+0x60>)
 80018be:	f001 fd9f 	bl	8003400 <HAL_TIM_Base_Start_IT>
encoders_init();
 80018c2:	f7ff fce5 	bl	8001290 <encoders_init>
encoders_define_home();
 80018c6:	f7ff fcf1 	bl	80012ac <encoders_define_home>
PWM_Init();
 80018ca:	f7ff fda9 	bl	8001420 <PWM_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	  	  sprintf(buffer_w1,"%0.8f",omega);
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <main+0x64>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe58 	bl	8000588 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4908      	ldr	r1, [pc, #32]	; (8001900 <main+0x68>)
 80018de:	4809      	ldr	r0, [pc, #36]	; (8001904 <main+0x6c>)
 80018e0:	f004 f840 	bl	8005964 <siprintf>
	  			 buffer_w1[9]=0x20;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <main+0x6c>)
 80018e6:	2220      	movs	r2, #32
 80018e8:	725a      	strb	r2, [r3, #9]
	  	 HAL_UART_Transmit(&huart3, (uint8_t*)buffer_w1, 10, 100);
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	220a      	movs	r2, #10
 80018ee:	4905      	ldr	r1, [pc, #20]	; (8001904 <main+0x6c>)
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <main+0x70>)
 80018f2:	f002 fee0 	bl	80046b6 <HAL_UART_Transmit>
  {
 80018f6:	e7ea      	b.n	80018ce <main+0x36>
 80018f8:	2000034c 	.word	0x2000034c
 80018fc:	200003b0 	.word	0x200003b0
 8001900:	080094c8 	.word	0x080094c8
 8001904:	20000398 	.word	0x20000398
 8001908:	20000304 	.word	0x20000304

0800190c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b094      	sub	sp, #80	; 0x50
 8001910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	2234      	movs	r2, #52	; 0x34
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f99a 	bl	8004c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <SystemClock_Config+0xdc>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a2b      	ldr	r2, [pc, #172]	; (80019e8 <SystemClock_Config+0xdc>)
 800193a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
 8001940:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <SystemClock_Config+0xdc>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800194c:	2300      	movs	r3, #0
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	4b26      	ldr	r3, [pc, #152]	; (80019ec <SystemClock_Config+0xe0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <SystemClock_Config+0xe0>)
 8001956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <SystemClock_Config+0xe0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001968:	2302      	movs	r3, #2
 800196a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800196c:	2301      	movs	r3, #1
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001970:	2310      	movs	r3, #16
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001974:	2302      	movs	r3, #2
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001978:	2300      	movs	r3, #0
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800197c:	2308      	movs	r3, #8
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001980:	23b4      	movs	r3, #180	; 0xb4
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001984:	2302      	movs	r3, #2
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001988:	2302      	movs	r3, #2
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800198c:	2302      	movs	r3, #2
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4618      	mov	r0, r3
 8001996:	f001 fa45 	bl	8002e24 <HAL_RCC_OscConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019a0:	f000 f91c 	bl	8001bdc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019a4:	f000 ff78 	bl	8002898 <HAL_PWREx_EnableOverDrive>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019ae:	f000 f915 	bl	8001bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b2:	230f      	movs	r3, #15
 80019b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b6:	2302      	movs	r3, #2
 80019b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	2105      	movs	r1, #5
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 ffb1 	bl	8002938 <HAL_RCC_ClockConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019dc:	f000 f8fe 	bl	8001bdc <Error_Handler>
  }
}
 80019e0:	bf00      	nop
 80019e2:	3750      	adds	r7, #80	; 0x50
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_TIM5_Init+0x90>)
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <MX_TIM5_Init+0x94>)
 8001a10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 179;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_TIM5_Init+0x90>)
 8001a14:	22b3      	movs	r2, #179	; 0xb3
 8001a16:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MX_TIM5_Init+0x90>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_TIM5_Init+0x90>)
 8001a20:	2218      	movs	r2, #24
 8001a22:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_TIM5_Init+0x90>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <MX_TIM5_Init+0x90>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a30:	4813      	ldr	r0, [pc, #76]	; (8001a80 <MX_TIM5_Init+0x90>)
 8001a32:	f001 fc95 	bl	8003360 <HAL_TIM_Base_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8001a3c:	f000 f8ce 	bl	8001bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_TIM5_Init+0x90>)
 8001a4e:	f002 f959 	bl	8003d04 <HAL_TIM_ConfigClockSource>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8001a58:	f000 f8c0 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a64:	463b      	mov	r3, r7
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_TIM5_Init+0x90>)
 8001a6a:	f002 fd47 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8001a74:	f000 f8b2 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000034c 	.word	0x2000034c
 8001a84:	40000c00 	.word	0x40000c00

08001a88 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <MX_USART3_UART_Init+0x50>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001ac0:	f002 fdac 	bl	800461c <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001aca:	f000 f887 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000304 	.word	0x20000304
 8001ad8:	40004800 	.word	0x40004800

08001adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <MX_GPIO_Init+0xc4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <MX_GPIO_Init+0xc4>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <MX_GPIO_Init+0xc4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <MX_GPIO_Init+0xc4>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <MX_GPIO_Init+0xc4>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <MX_GPIO_Init+0xc4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <MX_GPIO_Init+0xc4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <MX_GPIO_Init+0xc4>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_GPIO_Init+0xc4>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001b4c:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <MX_GPIO_Init+0xc8>)
 8001b4e:	f000 fe57 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b52:	2308      	movs	r3, #8
 8001b54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_GPIO_Init+0xcc>)
 8001b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	4619      	mov	r1, r3
 8001b64:	4811      	ldr	r0, [pc, #68]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b66:	f000 fcb7 	bl	80024d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8001b6a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	4619      	mov	r1, r3
 8001b82:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <MX_GPIO_Init+0xc8>)
 8001b84:	f000 fca8 	bl	80024d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2009      	movs	r0, #9
 8001b8e:	f000 fc6c 	bl	800246a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b92:	2009      	movs	r0, #9
 8001b94:	f000 fc85 	bl	80024a2 <HAL_NVIC_EnableIRQ>

}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	10110000 	.word	0x10110000
 8001bac:	40020000 	.word	0x40020000

08001bb0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_PIN);
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8001bba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x24>)
 8001bc0:	f000 fe37 	bl	8002832 <HAL_GPIO_TogglePin>
	TIM3->CNT=220;
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x28>)
 8001bc6:	22dc      	movs	r2, #220	; 0xdc
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40000400 	.word	0x40000400

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_MspInit+0x4c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_MspInit+0x4c>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_MspInit+0x4c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4c:	d10e      	bne.n	8001c6c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x64>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x64>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x64>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c6a:	e012      	b.n	8001c92 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <HAL_TIM_PWM_MspInit+0x68>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d10d      	bne.n	8001c92 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x64>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x64>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x64>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40000800 	.word	0x40000800

08001ca8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_TIM_Encoder_MspInit+0x84>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d12b      	bne.n	8001d22 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_TIM_Encoder_MspInit+0x88>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d02:	23c0      	movs	r3, #192	; 0xc0
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d12:	2302      	movs	r3, #2
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d1e:	f000 fbdb 	bl	80024d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d22:	bf00      	nop
 8001d24:	3728      	adds	r7, #40	; 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40000400 	.word	0x40000400
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020000 	.word	0x40020000

08001d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_TIM_Base_MspInit+0x48>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d115      	bne.n	8001d76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_TIM_Base_MspInit+0x4c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_TIM_Base_MspInit+0x4c>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_TIM_Base_MspInit+0x4c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2032      	movs	r0, #50	; 0x32
 8001d6c:	f000 fb7d 	bl	800246a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d70:	2032      	movs	r0, #50	; 0x32
 8001d72:	f000 fb96 	bl	80024a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40000c00 	.word	0x40000c00
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	; 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da8:	d13c      	bne.n	8001e24 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a3f      	ldr	r2, [pc, #252]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a38      	ldr	r2, [pc, #224]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001de2:	2320      	movs	r3, #32
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001df2:	2301      	movs	r3, #1
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	482d      	ldr	r0, [pc, #180]	; (8001eb4 <HAL_TIM_MspPostInit+0x12c>)
 8001dfe:	f000 fb6b 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e02:	2308      	movs	r3, #8
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e12:	2301      	movs	r3, #1
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	f107 031c 	add.w	r3, r7, #28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4826      	ldr	r0, [pc, #152]	; (8001eb8 <HAL_TIM_MspPostInit+0x130>)
 8001e1e:	f000 fb5b 	bl	80024d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e22:	e041      	b.n	8001ea8 <HAL_TIM_MspPostInit+0x120>
  else if(htim->Instance==TIM4)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <HAL_TIM_MspPostInit+0x134>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d13c      	bne.n	8001ea8 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <HAL_TIM_MspPostInit+0x128>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e66:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	480f      	ldr	r0, [pc, #60]	; (8001ec0 <HAL_TIM_MspPostInit+0x138>)
 8001e84:	f000 fb28 	bl	80024d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e88:	2340      	movs	r3, #64	; 0x40
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <HAL_TIM_MspPostInit+0x130>)
 8001ea4:	f000 fb18 	bl	80024d8 <HAL_GPIO_Init>
}
 8001ea8:	bf00      	nop
 8001eaa:	3730      	adds	r7, #48	; 0x30
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40000800 	.word	0x40000800
 8001ec0:	40020c00 	.word	0x40020c00

08001ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_UART_MspInit+0x84>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d12c      	bne.n	8001f40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_UART_MspInit+0x88>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f30:	2307      	movs	r3, #7
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <HAL_UART_MspInit+0x8c>)
 8001f3c:	f000 facc 	bl	80024d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40004800 	.word	0x40004800
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020c00 	.word	0x40020c00

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <NMI_Handler+0x4>

08001f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <MemManage_Handler+0x4>

08001f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <BusFault_Handler+0x4>

08001f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <UsageFault_Handler+0x4>

08001f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa0:	f000 f968 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001fac:	2008      	movs	r0, #8
 8001fae:	f000 fc5b 	bl	8002868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <TIM5_IRQHandler+0x10>)
 8001fbe:	f001 fcdb 	bl	8003978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000034c 	.word	0x2000034c

08001fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
	return 1;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_kill>:

int _kill(int pid, int sig)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fe6:	f002 fe0b 	bl	8004c00 <__errno>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2216      	movs	r2, #22
 8001fee:	601a      	str	r2, [r3, #0]
	return -1;
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_exit>:

void _exit (int status)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ffe7 	bl	8001fdc <_kill>
	while (1) {}		/* Make sure we hang here */
 800200e:	e7fe      	b.n	800200e <_exit+0x12>

08002010 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e00a      	b.n	8002038 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002022:	f3af 8000 	nop.w
 8002026:	4601      	mov	r1, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60ba      	str	r2, [r7, #8]
 800202e:	b2ca      	uxtb	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	dbf0      	blt.n	8002022 <_read+0x12>
	}

return len;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e009      	b.n	8002070 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf1      	blt.n	800205c <_write+0x12>
	}
	return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_close>:

int _close(int file)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	605a      	str	r2, [r3, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_isatty>:

int _isatty(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	return 1;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f002 fd70 	bl	8004c00 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20020000 	.word	0x20020000
 800214c:	00000400 	.word	0x00000400
 8002150:	20000214 	.word	0x20000214
 8002154:	200003d0 	.word	0x200003d0

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002182:	490e      	ldr	r1, [pc, #56]	; (80021bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002184:	4a0e      	ldr	r2, [pc, #56]	; (80021c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002198:	4c0b      	ldr	r4, [pc, #44]	; (80021c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021a6:	f7ff ffd7 	bl	8002158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021aa:	f002 fd2f 	bl	8004c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7ff fb73 	bl	8001898 <main>
  bx  lr    
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80021c0:	080099ac 	.word	0x080099ac
  ldr r2, =_sbss
 80021c4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80021c8:	200003cc 	.word	0x200003cc

080021cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC_IRQHandler>
	...

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <HAL_Init+0x40>)
 80021da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <HAL_Init+0x40>)
 80021e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <HAL_Init+0x40>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 f92b 	bl	8002454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fe:	2000      	movs	r0, #0
 8002200:	f000 f808 	bl	8002214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002204:	f7ff fcf2 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00

08002214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_InitTick+0x54>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_InitTick+0x58>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f943 	bl	80024be <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00e      	b.n	8002260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d80a      	bhi.n	800225e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f000 f90b 	bl	800246a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <HAL_InitTick+0x5c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000004 	.word	0x20000004
 800226c:	2000000c 	.word	0x2000000c
 8002270:	20000008 	.word	0x20000008

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_IncTick+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_IncTick+0x24>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	2000000c 	.word	0x2000000c
 8002298:	200003b8 	.word	0x200003b8

0800229c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200003b8 	.word	0x200003b8

080022b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__NVIC_GetPriorityGrouping+0x18>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	2b00      	cmp	r3, #0
 8002328:	db0b      	blt.n	8002342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4907      	ldr	r1, [pc, #28]	; (8002350 <__NVIC_EnableIRQ+0x38>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2001      	movs	r0, #1
 800233a:	fa00 f202 	lsl.w	r2, r0, r2
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000e100 	.word	0xe000e100

08002354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	2b00      	cmp	r3, #0
 8002366:	db0a      	blt.n	800237e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	490c      	ldr	r1, [pc, #48]	; (80023a0 <__NVIC_SetPriority+0x4c>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	440b      	add	r3, r1
 8002378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800237c:	e00a      	b.n	8002394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <__NVIC_SetPriority+0x50>)
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	3b04      	subs	r3, #4
 800238c:	0112      	lsls	r2, r2, #4
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	440b      	add	r3, r1
 8002392:	761a      	strb	r2, [r3, #24]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000e100 	.word	0xe000e100
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f1c3 0307 	rsb	r3, r3, #7
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	bf28      	it	cs
 80023c6:	2304      	movcs	r3, #4
 80023c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d902      	bls.n	80023d8 <NVIC_EncodePriority+0x30>
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3b03      	subs	r3, #3
 80023d6:	e000      	b.n	80023da <NVIC_EncodePriority+0x32>
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	f04f 32ff 	mov.w	r2, #4294967295
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43da      	mvns	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	401a      	ands	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f0:	f04f 31ff 	mov.w	r1, #4294967295
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	43d9      	mvns	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	4313      	orrs	r3, r2
         );
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002420:	d301      	bcc.n	8002426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002422:	2301      	movs	r3, #1
 8002424:	e00f      	b.n	8002446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <SysTick_Config+0x40>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242e:	210f      	movs	r1, #15
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	f7ff ff8e 	bl	8002354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <SysTick_Config+0x40>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <SysTick_Config+0x40>)
 8002440:	2207      	movs	r2, #7
 8002442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	e000e010 	.word	0xe000e010

08002454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ff29 	bl	80022b4 <__NVIC_SetPriorityGrouping>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800247c:	f7ff ff3e 	bl	80022fc <__NVIC_GetPriorityGrouping>
 8002480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	6978      	ldr	r0, [r7, #20]
 8002488:	f7ff ff8e 	bl	80023a8 <NVIC_EncodePriority>
 800248c:	4602      	mov	r2, r0
 800248e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff5d 	bl	8002354 <__NVIC_SetPriority>
}
 800249a:	bf00      	nop
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff31 	bl	8002318 <__NVIC_EnableIRQ>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ffa2 	bl	8002410 <SysTick_Config>
 80024cc:	4603      	mov	r3, r0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	e165      	b.n	80027c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f4:	2201      	movs	r2, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	429a      	cmp	r2, r3
 800250e:	f040 8154 	bne.w	80027ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d005      	beq.n	800252a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002526:	2b02      	cmp	r3, #2
 8002528:	d130      	bne.n	800258c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 0201 	and.w	r2, r3, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b03      	cmp	r3, #3
 8002596:	d017      	beq.n	80025c8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d123      	bne.n	800261c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	08da      	lsrs	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3208      	adds	r2, #8
 80025dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220f      	movs	r2, #15
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	08da      	lsrs	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3208      	adds	r2, #8
 8002616:	69b9      	ldr	r1, [r7, #24]
 8002618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0203 	and.w	r2, r3, #3
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80ae 	beq.w	80027ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <HAL_GPIO_Init+0x300>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	4a5c      	ldr	r2, [pc, #368]	; (80027d8 <HAL_GPIO_Init+0x300>)
 8002668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266c:	6453      	str	r3, [r2, #68]	; 0x44
 800266e:	4b5a      	ldr	r3, [pc, #360]	; (80027d8 <HAL_GPIO_Init+0x300>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800267a:	4a58      	ldr	r2, [pc, #352]	; (80027dc <HAL_GPIO_Init+0x304>)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	3302      	adds	r3, #2
 8002682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	220f      	movs	r2, #15
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4f      	ldr	r2, [pc, #316]	; (80027e0 <HAL_GPIO_Init+0x308>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d025      	beq.n	80026f2 <HAL_GPIO_Init+0x21a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4e      	ldr	r2, [pc, #312]	; (80027e4 <HAL_GPIO_Init+0x30c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01f      	beq.n	80026ee <HAL_GPIO_Init+0x216>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4d      	ldr	r2, [pc, #308]	; (80027e8 <HAL_GPIO_Init+0x310>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d019      	beq.n	80026ea <HAL_GPIO_Init+0x212>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4c      	ldr	r2, [pc, #304]	; (80027ec <HAL_GPIO_Init+0x314>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_GPIO_Init+0x20e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4b      	ldr	r2, [pc, #300]	; (80027f0 <HAL_GPIO_Init+0x318>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00d      	beq.n	80026e2 <HAL_GPIO_Init+0x20a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4a      	ldr	r2, [pc, #296]	; (80027f4 <HAL_GPIO_Init+0x31c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_Init+0x206>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a49      	ldr	r2, [pc, #292]	; (80027f8 <HAL_GPIO_Init+0x320>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_GPIO_Init+0x202>
 80026d6:	2306      	movs	r3, #6
 80026d8:	e00c      	b.n	80026f4 <HAL_GPIO_Init+0x21c>
 80026da:	2307      	movs	r3, #7
 80026dc:	e00a      	b.n	80026f4 <HAL_GPIO_Init+0x21c>
 80026de:	2305      	movs	r3, #5
 80026e0:	e008      	b.n	80026f4 <HAL_GPIO_Init+0x21c>
 80026e2:	2304      	movs	r3, #4
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x21c>
 80026e6:	2303      	movs	r3, #3
 80026e8:	e004      	b.n	80026f4 <HAL_GPIO_Init+0x21c>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e002      	b.n	80026f4 <HAL_GPIO_Init+0x21c>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x21c>
 80026f2:	2300      	movs	r3, #0
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	f002 0203 	and.w	r2, r2, #3
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4093      	lsls	r3, r2
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002704:	4935      	ldr	r1, [pc, #212]	; (80027dc <HAL_GPIO_Init+0x304>)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002712:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <HAL_GPIO_Init+0x324>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002736:	4a31      	ldr	r2, [pc, #196]	; (80027fc <HAL_GPIO_Init+0x324>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800273c:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <HAL_GPIO_Init+0x324>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002760:	4a26      	ldr	r2, [pc, #152]	; (80027fc <HAL_GPIO_Init+0x324>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002766:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_GPIO_Init+0x324>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278a:	4a1c      	ldr	r2, [pc, #112]	; (80027fc <HAL_GPIO_Init+0x324>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002790:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <HAL_GPIO_Init+0x324>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b4:	4a11      	ldr	r2, [pc, #68]	; (80027fc <HAL_GPIO_Init+0x324>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b0f      	cmp	r3, #15
 80027c4:	f67f ae96 	bls.w	80024f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40020800 	.word	0x40020800
 80027ec:	40020c00 	.word	0x40020c00
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40021400 	.word	0x40021400
 80027f8:	40021800 	.word	0x40021800
 80027fc:	40013c00 	.word	0x40013c00

08002800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800281c:	e003      	b.n	8002826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	619a      	str	r2, [r3, #24]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002832:	b480      	push	{r7}
 8002834:	b085      	sub	sp, #20
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002844:	887a      	ldrh	r2, [r7, #2]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	041a      	lsls	r2, r3, #16
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	43d9      	mvns	r1, r3
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	400b      	ands	r3, r1
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f992 	bl	8001bb0 <HAL_GPIO_EXTI_Callback>
  }
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40013c00 	.word	0x40013c00

08002898 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_PWREx_EnableOverDrive+0x90>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <HAL_PWREx_EnableOverDrive+0x90>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_PWREx_EnableOverDrive+0x90>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_PWREx_EnableOverDrive+0x94>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c4:	f7ff fcea 	bl	800229c <HAL_GetTick>
 80028c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028ca:	e009      	b.n	80028e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028cc:	f7ff fce6 	bl	800229c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028da:	d901      	bls.n	80028e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e01f      	b.n	8002920 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_PWREx_EnableOverDrive+0x98>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ec:	d1ee      	bne.n	80028cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f4:	f7ff fcd2 	bl	800229c <HAL_GetTick>
 80028f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028fa:	e009      	b.n	8002910 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028fc:	f7ff fcce 	bl	800229c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800290a:	d901      	bls.n	8002910 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e007      	b.n	8002920 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002910:	4b07      	ldr	r3, [pc, #28]	; (8002930 <HAL_PWREx_EnableOverDrive+0x98>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800291c:	d1ee      	bne.n	80028fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	420e0040 	.word	0x420e0040
 8002930:	40007000 	.word	0x40007000
 8002934:	420e0044 	.word	0x420e0044

08002938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0cc      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d90c      	bls.n	8002974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b65      	ldr	r3, [pc, #404]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b63      	ldr	r3, [pc, #396]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b8      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800298c:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a4:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a52      	ldr	r2, [pc, #328]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	494d      	ldr	r1, [pc, #308]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d044      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d119      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	4b3f      	ldr	r3, [pc, #252]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e067      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4934      	ldr	r1, [pc, #208]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a28:	f7ff fc38 	bl	800229c <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7ff fc34 	bl	800229c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e04f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d20c      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e032      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4916      	ldr	r1, [pc, #88]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	490e      	ldr	r1, [pc, #56]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002abe:	f000 f855 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	490a      	ldr	r1, [pc, #40]	; (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	5ccb      	ldrb	r3, [r1, r3]
 8002ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad6:	4a09      	ldr	r2, [pc, #36]	; (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fb98 	bl	8002214 <HAL_InitTick>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00
 8002af4:	40023800 	.word	0x40023800
 8002af8:	080094d0 	.word	0x080094d0
 8002afc:	20000004 	.word	0x20000004
 8002b00:	20000008 	.word	0x20000008

08002b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000004 	.word	0x20000004

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b20:	f7ff fff0 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	0a9b      	lsrs	r3, r3, #10
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4903      	ldr	r1, [pc, #12]	; (8002b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	080094e0 	.word	0x080094e0

08002b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b48:	f7ff ffdc 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	0b5b      	lsrs	r3, r3, #13
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	4903      	ldr	r1, [pc, #12]	; (8002b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40023800 	.word	0x40023800
 8002b68:	080094e0 	.word	0x080094e0

08002b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b70:	b087      	sub	sp, #28
 8002b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b74:	2600      	movs	r6, #0
 8002b76:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002b78:	2600      	movs	r6, #0
 8002b7a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002b7c:	2600      	movs	r6, #0
 8002b7e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002b80:	2600      	movs	r6, #0
 8002b82:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b84:	2600      	movs	r6, #0
 8002b86:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b88:	4ea3      	ldr	r6, [pc, #652]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002b8a:	68b6      	ldr	r6, [r6, #8]
 8002b8c:	f006 060c 	and.w	r6, r6, #12
 8002b90:	2e0c      	cmp	r6, #12
 8002b92:	f200 8137 	bhi.w	8002e04 <HAL_RCC_GetSysClockFreq+0x298>
 8002b96:	f20f 0c08 	addw	ip, pc, #8
 8002b9a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002b9e:	bf00      	nop
 8002ba0:	08002bd5 	.word	0x08002bd5
 8002ba4:	08002e05 	.word	0x08002e05
 8002ba8:	08002e05 	.word	0x08002e05
 8002bac:	08002e05 	.word	0x08002e05
 8002bb0:	08002bdb 	.word	0x08002bdb
 8002bb4:	08002e05 	.word	0x08002e05
 8002bb8:	08002e05 	.word	0x08002e05
 8002bbc:	08002e05 	.word	0x08002e05
 8002bc0:	08002be1 	.word	0x08002be1
 8002bc4:	08002e05 	.word	0x08002e05
 8002bc8:	08002e05 	.word	0x08002e05
 8002bcc:	08002e05 	.word	0x08002e05
 8002bd0:	08002cf7 	.word	0x08002cf7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b91      	ldr	r3, [pc, #580]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002bd6:	613b      	str	r3, [r7, #16]
       break;
 8002bd8:	e117      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bda:	4b91      	ldr	r3, [pc, #580]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002bdc:	613b      	str	r3, [r7, #16]
      break;
 8002bde:	e114      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be0:	4b8d      	ldr	r3, [pc, #564]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bea:	4b8b      	ldr	r3, [pc, #556]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d024      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf6:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002c06:	f04f 0500 	mov.w	r5, #0
 8002c0a:	ea02 0004 	and.w	r0, r2, r4
 8002c0e:	ea03 0105 	and.w	r1, r3, r5
 8002c12:	4b83      	ldr	r3, [pc, #524]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002c14:	fb03 f201 	mul.w	r2, r3, r1
 8002c18:	2300      	movs	r3, #0
 8002c1a:	fb03 f300 	mul.w	r3, r3, r0
 8002c1e:	4413      	add	r3, r2
 8002c20:	4a7f      	ldr	r2, [pc, #508]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002c22:	fba0 0102 	umull	r0, r1, r0, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	4619      	mov	r1, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	f7fe f849 	bl	8000cc8 <__aeabi_uldivmod>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e04c      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c40:	4b75      	ldr	r3, [pc, #468]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	461a      	mov	r2, r3
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	ea02 0800 	and.w	r8, r2, r0
 8002c58:	ea03 0901 	and.w	r9, r3, r1
 8002c5c:	4640      	mov	r0, r8
 8002c5e:	4649      	mov	r1, r9
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	014b      	lsls	r3, r1, #5
 8002c6a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c6e:	0142      	lsls	r2, r0, #5
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	ebb0 0008 	subs.w	r0, r0, r8
 8002c78:	eb61 0109 	sbc.w	r1, r1, r9
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	018b      	lsls	r3, r1, #6
 8002c86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c8a:	0182      	lsls	r2, r0, #6
 8002c8c:	1a12      	subs	r2, r2, r0
 8002c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c92:	f04f 0000 	mov.w	r0, #0
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	00d9      	lsls	r1, r3, #3
 8002c9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ca0:	00d0      	lsls	r0, r2, #3
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	eb12 0208 	adds.w	r2, r2, r8
 8002caa:	eb43 0309 	adc.w	r3, r3, r9
 8002cae:	f04f 0000 	mov.w	r0, #0
 8002cb2:	f04f 0100 	mov.w	r1, #0
 8002cb6:	0299      	lsls	r1, r3, #10
 8002cb8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cbc:	0290      	lsls	r0, r2, #10
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	f7fd fffb 	bl	8000cc8 <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cda:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	613b      	str	r3, [r7, #16]
      break;
 8002cf4:	e089      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf6:	4948      	ldr	r1, [pc, #288]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002cf8:	6849      	ldr	r1, [r1, #4]
 8002cfa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002cfe:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d00:	4945      	ldr	r1, [pc, #276]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002d02:	6849      	ldr	r1, [r1, #4]
 8002d04:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002d08:	2900      	cmp	r1, #0
 8002d0a:	d024      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0c:	4942      	ldr	r1, [pc, #264]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002d0e:	6849      	ldr	r1, [r1, #4]
 8002d10:	0989      	lsrs	r1, r1, #6
 8002d12:	4608      	mov	r0, r1
 8002d14:	f04f 0100 	mov.w	r1, #0
 8002d18:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002d1c:	f04f 0500 	mov.w	r5, #0
 8002d20:	ea00 0204 	and.w	r2, r0, r4
 8002d24:	ea01 0305 	and.w	r3, r1, r5
 8002d28:	493d      	ldr	r1, [pc, #244]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002d2a:	fb01 f003 	mul.w	r0, r1, r3
 8002d2e:	2100      	movs	r1, #0
 8002d30:	fb01 f102 	mul.w	r1, r1, r2
 8002d34:	1844      	adds	r4, r0, r1
 8002d36:	493a      	ldr	r1, [pc, #232]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002d38:	fba2 0101 	umull	r0, r1, r2, r1
 8002d3c:	1863      	adds	r3, r4, r1
 8002d3e:	4619      	mov	r1, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f7fd ffbe 	bl	8000cc8 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e04a      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d66:	f04f 0100 	mov.w	r1, #0
 8002d6a:	ea02 0400 	and.w	r4, r2, r0
 8002d6e:	ea03 0501 	and.w	r5, r3, r1
 8002d72:	4620      	mov	r0, r4
 8002d74:	4629      	mov	r1, r5
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	014b      	lsls	r3, r1, #5
 8002d80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d84:	0142      	lsls	r2, r0, #5
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	1b00      	subs	r0, r0, r4
 8002d8c:	eb61 0105 	sbc.w	r1, r1, r5
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	018b      	lsls	r3, r1, #6
 8002d9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d9e:	0182      	lsls	r2, r0, #6
 8002da0:	1a12      	subs	r2, r2, r0
 8002da2:	eb63 0301 	sbc.w	r3, r3, r1
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	00d9      	lsls	r1, r3, #3
 8002db0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002db4:	00d0      	lsls	r0, r2, #3
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	1912      	adds	r2, r2, r4
 8002dbc:	eb45 0303 	adc.w	r3, r5, r3
 8002dc0:	f04f 0000 	mov.w	r0, #0
 8002dc4:	f04f 0100 	mov.w	r1, #0
 8002dc8:	0299      	lsls	r1, r3, #10
 8002dca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002dce:	0290      	lsls	r0, r2, #10
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	f7fd ff72 	bl	8000cc8 <__aeabi_uldivmod>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4613      	mov	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	0f1b      	lsrs	r3, r3, #28
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	613b      	str	r3, [r7, #16]
      break;
 8002e02:	e002      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002e06:	613b      	str	r3, [r7, #16]
      break;
 8002e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0a:	693b      	ldr	r3, [r7, #16]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	017d7840 	.word	0x017d7840

08002e24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e28d      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8083 	beq.w	8002f4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e44:	4b94      	ldr	r3, [pc, #592]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d019      	beq.n	8002e84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e50:	4b91      	ldr	r3, [pc, #580]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e5c:	4b8e      	ldr	r3, [pc, #568]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e68:	d00c      	beq.n	8002e84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6a:	4b8b      	ldr	r3, [pc, #556]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d112      	bne.n	8002e9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e76:	4b88      	ldr	r3, [pc, #544]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e82:	d10b      	bne.n	8002e9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	4b84      	ldr	r3, [pc, #528]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d05b      	beq.n	8002f48 <HAL_RCC_OscConfig+0x124>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d157      	bne.n	8002f48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e25a      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d106      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x90>
 8002ea6:	4b7c      	ldr	r3, [pc, #496]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7b      	ldr	r2, [pc, #492]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e01d      	b.n	8002ef0 <HAL_RCC_OscConfig+0xcc>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xb4>
 8002ebe:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a72      	ldr	r2, [pc, #456]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCC_OscConfig+0xcc>
 8002ed8:	4b6f      	ldr	r3, [pc, #444]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a6e      	ldr	r2, [pc, #440]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b6c      	ldr	r3, [pc, #432]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d013      	beq.n	8002f20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7ff f9d0 	bl	800229c <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f00:	f7ff f9cc 	bl	800229c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e21f      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b61      	ldr	r3, [pc, #388]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0xdc>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7ff f9bc 	bl	800229c <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f28:	f7ff f9b8 	bl	800229c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e20b      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	4b57      	ldr	r3, [pc, #348]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x104>
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d06f      	beq.n	8003036 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f56:	4b50      	ldr	r3, [pc, #320]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d017      	beq.n	8002f92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f62:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	d11c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f86:	4b44      	ldr	r3, [pc, #272]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x186>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e1d3      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4937      	ldr	r1, [pc, #220]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	e03a      	b.n	8003036 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc8:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7ff f965 	bl	800229c <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7ff f961 	bl	800229c <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e1b4      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4925      	ldr	r1, [pc, #148]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]
 8003008:	e015      	b.n	8003036 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300a:	4b24      	ldr	r3, [pc, #144]	; (800309c <HAL_RCC_OscConfig+0x278>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7ff f944 	bl	800229c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003018:	f7ff f940 	bl	800229c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e193      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d036      	beq.n	80030b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_RCC_OscConfig+0x27c>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7ff f924 	bl	800229c <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003058:	f7ff f920 	bl	800229c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e173      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x274>)
 800306c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x234>
 8003076:	e01b      	b.n	80030b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_OscConfig+0x27c>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307e:	f7ff f90d 	bl	800229c <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003084:	e00e      	b.n	80030a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003086:	f7ff f909 	bl	800229c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d907      	bls.n	80030a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e15c      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
 8003098:	40023800 	.word	0x40023800
 800309c:	42470000 	.word	0x42470000
 80030a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a4:	4b8a      	ldr	r3, [pc, #552]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 80030a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ea      	bne.n	8003086 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8097 	beq.w	80031ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030be:	2300      	movs	r3, #0
 80030c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c2:	4b83      	ldr	r3, [pc, #524]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	4a7e      	ldr	r2, [pc, #504]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
 80030de:	4b7c      	ldr	r3, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	4b79      	ldr	r3, [pc, #484]	; (80032d4 <HAL_RCC_OscConfig+0x4b0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fa:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCC_OscConfig+0x4b0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a75      	ldr	r2, [pc, #468]	; (80032d4 <HAL_RCC_OscConfig+0x4b0>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003106:	f7ff f8c9 	bl	800229c <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310e:	f7ff f8c5 	bl	800229c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e118      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	4b6c      	ldr	r3, [pc, #432]	; (80032d4 <HAL_RCC_OscConfig+0x4b0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x31e>
 8003134:	4b66      	ldr	r3, [pc, #408]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a65      	ldr	r2, [pc, #404]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	e01c      	b.n	800317c <HAL_RCC_OscConfig+0x358>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b05      	cmp	r3, #5
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x340>
 800314a:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a60      	ldr	r2, [pc, #384]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
 8003156:	4b5e      	ldr	r3, [pc, #376]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a5d      	ldr	r2, [pc, #372]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0x358>
 8003164:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a59      	ldr	r2, [pc, #356]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a56      	ldr	r2, [pc, #344]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 8003176:	f023 0304 	bic.w	r3, r3, #4
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d015      	beq.n	80031b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7ff f88a 	bl	800229c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7ff f886 	bl	800229c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e0d7      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	4b4b      	ldr	r3, [pc, #300]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RCC_OscConfig+0x368>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7ff f874 	bl	800229c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7ff f870 	bl	800229c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0c1      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	4b40      	ldr	r3, [pc, #256]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ee      	bne.n	80031b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e0:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	4a3a      	ldr	r2, [pc, #232]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 80031e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80ad 	beq.w	8003350 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f6:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d060      	beq.n	80032c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d145      	bne.n	8003296 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <HAL_RCC_OscConfig+0x4b4>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7ff f844 	bl	800229c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003218:	f7ff f840 	bl	800229c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e093      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	019b      	lsls	r3, r3, #6
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	3b01      	subs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	071b      	lsls	r3, r3, #28
 8003262:	491b      	ldr	r1, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x4b4>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326e:	f7ff f815 	bl	800229c <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003276:	f7ff f811 	bl	800229c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e064      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x452>
 8003294:	e05c      	b.n	8003350 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_RCC_OscConfig+0x4b4>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fffe 	bl	800229c <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe fffa 	bl	800229c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e04d      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_OscConfig+0x4ac>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x480>
 80032c2:	e045      	b.n	8003350 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d107      	bne.n	80032dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e040      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40007000 	.word	0x40007000
 80032d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032dc:	4b1f      	ldr	r3, [pc, #124]	; (800335c <HAL_RCC_OscConfig+0x538>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d030      	beq.n	800334c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d129      	bne.n	800334c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003302:	429a      	cmp	r2, r3
 8003304:	d122      	bne.n	800334c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800330c:	4013      	ands	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003314:	4293      	cmp	r3, r2
 8003316:	d119      	bne.n	800334c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	085b      	lsrs	r3, r3, #1
 8003324:	3b01      	subs	r3, #1
 8003326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d10f      	bne.n	800334c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e041      	b.n	80033f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fe fcd6 	bl	8001d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3304      	adds	r3, #4
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f000 fd9c 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	d001      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e04e      	b.n	80034b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d022      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003442:	d01d      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d018      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <HAL_TIM_Base_Start_IT+0xcc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00e      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d009      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x80>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_TIM_Base_Start_IT+0xdc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d111      	bne.n	80034a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b06      	cmp	r3, #6
 8003490:	d010      	beq.n	80034b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a2:	e007      	b.n	80034b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40010400 	.word	0x40010400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40001800 	.word	0x40001800

080034e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e041      	b.n	8003576 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fe fb98 	bl	8001c3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f000 fcdc 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_TIM_PWM_Start+0x24>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	bf14      	ite	ne
 800359c:	2301      	movne	r3, #1
 800359e:	2300      	moveq	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e022      	b.n	80035ea <HAL_TIM_PWM_Start+0x6a>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d109      	bne.n	80035be <HAL_TIM_PWM_Start+0x3e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e015      	b.n	80035ea <HAL_TIM_PWM_Start+0x6a>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d109      	bne.n	80035d8 <HAL_TIM_PWM_Start+0x58>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e008      	b.n	80035ea <HAL_TIM_PWM_Start+0x6a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e07c      	b.n	80036ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_PWM_Start+0x82>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003600:	e013      	b.n	800362a <HAL_TIM_PWM_Start+0xaa>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b04      	cmp	r3, #4
 8003606:	d104      	bne.n	8003612 <HAL_TIM_PWM_Start+0x92>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003610:	e00b      	b.n	800362a <HAL_TIM_PWM_Start+0xaa>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d104      	bne.n	8003622 <HAL_TIM_PWM_Start+0xa2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003620:	e003      	b.n	800362a <HAL_TIM_PWM_Start+0xaa>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2202      	movs	r2, #2
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2201      	movs	r2, #1
 8003630:	6839      	ldr	r1, [r7, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 ff3c 	bl	80044b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2d      	ldr	r2, [pc, #180]	; (80036f4 <HAL_TIM_PWM_Start+0x174>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_TIM_PWM_Start+0xcc>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2c      	ldr	r2, [pc, #176]	; (80036f8 <HAL_TIM_PWM_Start+0x178>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_TIM_PWM_Start+0xd0>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_TIM_PWM_Start+0xd2>
 8003650:	2300      	movs	r3, #0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <HAL_TIM_PWM_Start+0x174>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d022      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x136>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d01d      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x136>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_TIM_PWM_Start+0x17c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d018      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x136>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <HAL_TIM_PWM_Start+0x180>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x136>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_TIM_PWM_Start+0x184>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x136>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a16      	ldr	r2, [pc, #88]	; (80036f8 <HAL_TIM_PWM_Start+0x178>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x136>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a18      	ldr	r2, [pc, #96]	; (8003708 <HAL_TIM_PWM_Start+0x188>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x136>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a16      	ldr	r2, [pc, #88]	; (800370c <HAL_TIM_PWM_Start+0x18c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d111      	bne.n	80036da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b06      	cmp	r3, #6
 80036c6:	d010      	beq.n	80036ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	e007      	b.n	80036ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40010400 	.word	0x40010400
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	40000c00 	.word	0x40000c00
 8003708:	40014000 	.word	0x40014000
 800370c:	40001800 	.word	0x40001800

08003710 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e097      	b.n	8003854 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d106      	bne.n	800373e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fe fab5 	bl	8001ca8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2202      	movs	r2, #2
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003754:	f023 0307 	bic.w	r3, r3, #7
 8003758:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f000 fbb9 	bl	8003edc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	4313      	orrs	r3, r2
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037b0:	f023 030c 	bic.w	r3, r3, #12
 80037b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	4313      	orrs	r3, r2
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	011a      	lsls	r2, r3, #4
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	031b      	lsls	r3, r3, #12
 80037e0:	4313      	orrs	r3, r2
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	4313      	orrs	r3, r2
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800386c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003874:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800387c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003884:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d110      	bne.n	80038ae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d102      	bne.n	8003898 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003892:	7b7b      	ldrb	r3, [r7, #13]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d001      	beq.n	800389c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e069      	b.n	8003970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ac:	e031      	b.n	8003912 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d110      	bne.n	80038d6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038b4:	7bbb      	ldrb	r3, [r7, #14]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d102      	bne.n	80038c0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038ba:	7b3b      	ldrb	r3, [r7, #12]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d001      	beq.n	80038c4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e055      	b.n	8003970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d4:	e01d      	b.n	8003912 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d108      	bne.n	80038ee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038dc:	7bbb      	ldrb	r3, [r7, #14]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d105      	bne.n	80038ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038e2:	7b7b      	ldrb	r3, [r7, #13]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d102      	bne.n	80038ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038e8:	7b3b      	ldrb	r3, [r7, #12]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d001      	beq.n	80038f2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e03e      	b.n	8003970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_TIM_Encoder_Start+0xc4>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d008      	beq.n	8003930 <HAL_TIM_Encoder_Start+0xd4>
 800391e:	e00f      	b.n	8003940 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2201      	movs	r2, #1
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fdc1 	bl	80044b0 <TIM_CCxChannelCmd>
      break;
 800392e:	e016      	b.n	800395e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2201      	movs	r2, #1
 8003936:	2104      	movs	r1, #4
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fdb9 	bl	80044b0 <TIM_CCxChannelCmd>
      break;
 800393e:	e00e      	b.n	800395e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2201      	movs	r2, #1
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fdb1 	bl	80044b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2201      	movs	r2, #1
 8003954:	2104      	movs	r1, #4
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fdaa 	bl	80044b0 <TIM_CCxChannelCmd>
      break;
 800395c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	d122      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d11b      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0202 	mvn.w	r2, #2
 80039a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa70 	bl	8003ea0 <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fa62 	bl	8003e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fa73 	bl	8003eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d122      	bne.n	8003a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d11b      	bne.n	8003a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0204 	mvn.w	r2, #4
 80039f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fa46 	bl	8003ea0 <HAL_TIM_IC_CaptureCallback>
 8003a14:	e005      	b.n	8003a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fa38 	bl	8003e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fa49 	bl	8003eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d122      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d11b      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0208 	mvn.w	r2, #8
 8003a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2204      	movs	r2, #4
 8003a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fa1c 	bl	8003ea0 <HAL_TIM_IC_CaptureCallback>
 8003a68:	e005      	b.n	8003a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fa0e 	bl	8003e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fa1f 	bl	8003eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d122      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d11b      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0210 	mvn.w	r2, #16
 8003aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f9f2 	bl	8003ea0 <HAL_TIM_IC_CaptureCallback>
 8003abc:	e005      	b.n	8003aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f9e4 	bl	8003e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f9f5 	bl	8003eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d10e      	bne.n	8003afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d107      	bne.n	8003afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0201 	mvn.w	r2, #1
 8003af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd fe34 	bl	8001764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	d10e      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	d107      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fd70 	bl	8004608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d10e      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d107      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f9ba 	bl	8003ec8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d10e      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d107      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0220 	mvn.w	r2, #32
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fd3a 	bl	80045f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e0ac      	b.n	8003cfc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	f200 809f 	bhi.w	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003bb2:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003cf1 	.word	0x08003cf1
 8003bc0:	08003cf1 	.word	0x08003cf1
 8003bc4:	08003cf1 	.word	0x08003cf1
 8003bc8:	08003c2d 	.word	0x08003c2d
 8003bcc:	08003cf1 	.word	0x08003cf1
 8003bd0:	08003cf1 	.word	0x08003cf1
 8003bd4:	08003cf1 	.word	0x08003cf1
 8003bd8:	08003c6f 	.word	0x08003c6f
 8003bdc:	08003cf1 	.word	0x08003cf1
 8003be0:	08003cf1 	.word	0x08003cf1
 8003be4:	08003cf1 	.word	0x08003cf1
 8003be8:	08003caf 	.word	0x08003caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fa12 	bl	800401c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0208 	orr.w	r2, r2, #8
 8003c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0204 	bic.w	r2, r2, #4
 8003c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6999      	ldr	r1, [r3, #24]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	619a      	str	r2, [r3, #24]
      break;
 8003c2a:	e062      	b.n	8003cf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fa62 	bl	80040fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6999      	ldr	r1, [r3, #24]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	021a      	lsls	r2, r3, #8
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	619a      	str	r2, [r3, #24]
      break;
 8003c6c:	e041      	b.n	8003cf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fab7 	bl	80041e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0208 	orr.w	r2, r2, #8
 8003c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69da      	ldr	r2, [r3, #28]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0204 	bic.w	r2, r2, #4
 8003c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69d9      	ldr	r1, [r3, #28]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	61da      	str	r2, [r3, #28]
      break;
 8003cac:	e021      	b.n	8003cf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fb0b 	bl	80042d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69d9      	ldr	r1, [r3, #28]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	021a      	lsls	r2, r3, #8
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	61da      	str	r2, [r3, #28]
      break;
 8003cee:	e000      	b.n	8003cf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIM_ConfigClockSource+0x18>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e0b3      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x180>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d54:	d03e      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0xd0>
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5a:	f200 8087 	bhi.w	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d62:	f000 8085 	beq.w	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6a:	d87f      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d6c:	2b70      	cmp	r3, #112	; 0x70
 8003d6e:	d01a      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0xa2>
 8003d70:	2b70      	cmp	r3, #112	; 0x70
 8003d72:	d87b      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d74:	2b60      	cmp	r3, #96	; 0x60
 8003d76:	d050      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x116>
 8003d78:	2b60      	cmp	r3, #96	; 0x60
 8003d7a:	d877      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d7c:	2b50      	cmp	r3, #80	; 0x50
 8003d7e:	d03c      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0xf6>
 8003d80:	2b50      	cmp	r3, #80	; 0x50
 8003d82:	d873      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d058      	beq.n	8003e3a <HAL_TIM_ConfigClockSource+0x136>
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d86f      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d064      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x156>
 8003d90:	2b30      	cmp	r3, #48	; 0x30
 8003d92:	d86b      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d060      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x156>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d867      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d05c      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x156>
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d05a      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003da4:	e062      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6899      	ldr	r1, [r3, #8]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f000 fb5b 	bl	8004470 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	609a      	str	r2, [r3, #8]
      break;
 8003dd2:	e04e      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6899      	ldr	r1, [r3, #8]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f000 fb44 	bl	8004470 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df6:	609a      	str	r2, [r3, #8]
      break;
 8003df8:	e03b      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f000 fab8 	bl	800437c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2150      	movs	r1, #80	; 0x50
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fb11 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8003e18:	e02b      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6859      	ldr	r1, [r3, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	461a      	mov	r2, r3
 8003e28:	f000 fad7 	bl	80043da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2160      	movs	r1, #96	; 0x60
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fb01 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8003e38:	e01b      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f000 fa98 	bl	800437c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2140      	movs	r1, #64	; 0x40
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 faf1 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8003e58:	e00b      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f000 fae8 	bl	800443a <TIM_ITRx_SetConfig>
        break;
 8003e6a:	e002      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e6c:	bf00      	nop
 8003e6e:	e000      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a40      	ldr	r2, [pc, #256]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d00f      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3d      	ldr	r2, [pc, #244]	; (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a3c      	ldr	r2, [pc, #240]	; (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3a      	ldr	r2, [pc, #232]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d108      	bne.n	8003f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2f      	ldr	r2, [pc, #188]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d02b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d027      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d023      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	; (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a29      	ldr	r2, [pc, #164]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d017      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a28      	ldr	r2, [pc, #160]	; (8004004 <TIM_Base_SetConfig+0x128>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a27      	ldr	r2, [pc, #156]	; (8004008 <TIM_Base_SetConfig+0x12c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a26      	ldr	r2, [pc, #152]	; (800400c <TIM_Base_SetConfig+0x130>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a25      	ldr	r2, [pc, #148]	; (8004010 <TIM_Base_SetConfig+0x134>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a24      	ldr	r2, [pc, #144]	; (8004014 <TIM_Base_SetConfig+0x138>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a23      	ldr	r2, [pc, #140]	; (8004018 <TIM_Base_SetConfig+0x13c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0xf8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0c      	ldr	r2, [pc, #48]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d103      	bne.n	8003fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	615a      	str	r2, [r3, #20]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40010400 	.word	0x40010400
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800
 8004010:	40001800 	.word	0x40001800
 8004014:	40001c00 	.word	0x40001c00
 8004018:	40002000 	.word	0x40002000

0800401c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 0201 	bic.w	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 0302 	bic.w	r3, r3, #2
 8004064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a20      	ldr	r2, [pc, #128]	; (80040f4 <TIM_OC1_SetConfig+0xd8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_OC1_SetConfig+0x64>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <TIM_OC1_SetConfig+0xdc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10c      	bne.n	800409a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0308 	bic.w	r3, r3, #8
 8004086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <TIM_OC1_SetConfig+0xd8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d003      	beq.n	80040aa <TIM_OC1_SetConfig+0x8e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <TIM_OC1_SetConfig+0xdc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d111      	bne.n	80040ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	621a      	str	r2, [r3, #32]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	40010000 	.word	0x40010000
 80040f8:	40010400 	.word	0x40010400

080040fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f023 0210 	bic.w	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f023 0320 	bic.w	r3, r3, #32
 8004146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a22      	ldr	r2, [pc, #136]	; (80041e0 <TIM_OC2_SetConfig+0xe4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_OC2_SetConfig+0x68>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <TIM_OC2_SetConfig+0xe8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10d      	bne.n	8004180 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800416a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800417e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <TIM_OC2_SetConfig+0xe4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC2_SetConfig+0x94>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a16      	ldr	r2, [pc, #88]	; (80041e4 <TIM_OC2_SetConfig+0xe8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d113      	bne.n	80041b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800419e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40010000 	.word	0x40010000
 80041e4:	40010400 	.word	0x40010400

080041e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0303 	bic.w	r3, r3, #3
 800421e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <TIM_OC3_SetConfig+0xe0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_OC3_SetConfig+0x66>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a20      	ldr	r2, [pc, #128]	; (80042cc <TIM_OC3_SetConfig+0xe4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10d      	bne.n	800426a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <TIM_OC3_SetConfig+0xe0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_OC3_SetConfig+0x92>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a15      	ldr	r2, [pc, #84]	; (80042cc <TIM_OC3_SetConfig+0xe4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d113      	bne.n	80042a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	621a      	str	r2, [r3, #32]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40010400 	.word	0x40010400

080042d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800431a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	031b      	lsls	r3, r3, #12
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <TIM_OC4_SetConfig+0xa4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d003      	beq.n	8004338 <TIM_OC4_SetConfig+0x68>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a11      	ldr	r2, [pc, #68]	; (8004378 <TIM_OC4_SetConfig+0xa8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d109      	bne.n	800434c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800433e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	019b      	lsls	r3, r3, #6
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	621a      	str	r2, [r3, #32]
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40010000 	.word	0x40010000
 8004378:	40010400 	.word	0x40010400

0800437c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f023 0201 	bic.w	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f023 030a 	bic.w	r3, r3, #10
 80043b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043da:	b480      	push	{r7}
 80043dc:	b087      	sub	sp, #28
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f023 0210 	bic.w	r2, r3, #16
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	031b      	lsls	r3, r3, #12
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	f043 0307 	orr.w	r3, r3, #7
 800445c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800448a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	021a      	lsls	r2, r3, #8
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	431a      	orrs	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	609a      	str	r2, [r3, #8]
}
 80044a4:	bf00      	nop
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	2201      	movs	r2, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	401a      	ands	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a1a      	ldr	r2, [r3, #32]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	fa01 f303 	lsl.w	r3, r1, r3
 80044e8:	431a      	orrs	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004510:	2302      	movs	r3, #2
 8004512:	e05a      	b.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a21      	ldr	r2, [pc, #132]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d022      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004560:	d01d      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1d      	ldr	r2, [pc, #116]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d018      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1b      	ldr	r2, [pc, #108]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00e      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d009      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a17      	ldr	r2, [pc, #92]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d004      	beq.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d10c      	bne.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40010000 	.word	0x40010000
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800
 80045e4:	40000c00 	.word	0x40000c00
 80045e8:	40010400 	.word	0x40010400
 80045ec:	40014000 	.word	0x40014000
 80045f0:	40001800 	.word	0x40001800

080045f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e03f      	b.n	80046ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fd fc3e 	bl	8001ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2224      	movs	r2, #36	; 0x24
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800465e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f905 	bl	8004870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08a      	sub	sp, #40	; 0x28
 80046ba:	af02      	add	r7, sp, #8
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d17c      	bne.n	80047d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_UART_Transmit+0x2c>
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e075      	b.n	80047d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_UART_Transmit+0x3e>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e06e      	b.n	80047d2 <HAL_UART_Transmit+0x11c>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2221      	movs	r2, #33	; 0x21
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470a:	f7fd fdc7 	bl	800229c <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	88fa      	ldrh	r2, [r7, #6]
 8004714:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	88fa      	ldrh	r2, [r7, #6]
 800471a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d108      	bne.n	8004738 <HAL_UART_Transmit+0x82>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	e003      	b.n	8004740 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004748:	e02a      	b.n	80047a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f840 	bl	80047da <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e036      	b.n	80047d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004778:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	3302      	adds	r3, #2
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	e007      	b.n	8004792 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	781a      	ldrb	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	3301      	adds	r3, #1
 8004790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1cf      	bne.n	800474a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2140      	movs	r1, #64	; 0x40
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f810 	bl	80047da <UART_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e006      	b.n	80047d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	603b      	str	r3, [r7, #0]
 80047e6:	4613      	mov	r3, r2
 80047e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ea:	e02c      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d028      	beq.n	8004846 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0x30>
 80047fa:	f7fd fd4f 	bl	800229c <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	429a      	cmp	r2, r3
 8004808:	d21d      	bcs.n	8004846 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004818:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695a      	ldr	r2, [r3, #20]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0201 	bic.w	r2, r2, #1
 8004828:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e00f      	b.n	8004866 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4013      	ands	r3, r2
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	429a      	cmp	r2, r3
 8004854:	bf0c      	ite	eq
 8004856:	2301      	moveq	r3, #1
 8004858:	2300      	movne	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	429a      	cmp	r2, r3
 8004862:	d0c3      	beq.n	80047ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004874:	b09f      	sub	sp, #124	; 0x7c
 8004876:	af00      	add	r7, sp, #0
 8004878:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800487a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004886:	68d9      	ldr	r1, [r3, #12]
 8004888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	ea40 0301 	orr.w	r3, r0, r1
 8004890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	431a      	orrs	r2, r3
 800489c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80048aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048b4:	f021 010c 	bic.w	r1, r1, #12
 80048b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048be:	430b      	orrs	r3, r1
 80048c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ce:	6999      	ldr	r1, [r3, #24]
 80048d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	ea40 0301 	orr.w	r3, r0, r1
 80048d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4bc5      	ldr	r3, [pc, #788]	; (8004bf4 <UART_SetConfig+0x384>)
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d004      	beq.n	80048ee <UART_SetConfig+0x7e>
 80048e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4bc3      	ldr	r3, [pc, #780]	; (8004bf8 <UART_SetConfig+0x388>)
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d103      	bne.n	80048f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048ee:	f7fe f929 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 80048f2:	6778      	str	r0, [r7, #116]	; 0x74
 80048f4:	e002      	b.n	80048fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048f6:	f7fe f911 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 80048fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004904:	f040 80b6 	bne.w	8004a74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490a:	461c      	mov	r4, r3
 800490c:	f04f 0500 	mov.w	r5, #0
 8004910:	4622      	mov	r2, r4
 8004912:	462b      	mov	r3, r5
 8004914:	1891      	adds	r1, r2, r2
 8004916:	6439      	str	r1, [r7, #64]	; 0x40
 8004918:	415b      	adcs	r3, r3
 800491a:	647b      	str	r3, [r7, #68]	; 0x44
 800491c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004920:	1912      	adds	r2, r2, r4
 8004922:	eb45 0303 	adc.w	r3, r5, r3
 8004926:	f04f 0000 	mov.w	r0, #0
 800492a:	f04f 0100 	mov.w	r1, #0
 800492e:	00d9      	lsls	r1, r3, #3
 8004930:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004934:	00d0      	lsls	r0, r2, #3
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	1911      	adds	r1, r2, r4
 800493c:	6639      	str	r1, [r7, #96]	; 0x60
 800493e:	416b      	adcs	r3, r5
 8004940:	667b      	str	r3, [r7, #100]	; 0x64
 8004942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	461a      	mov	r2, r3
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	1891      	adds	r1, r2, r2
 800494e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004950:	415b      	adcs	r3, r3
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004958:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800495c:	f7fc f9b4 	bl	8000cc8 <__aeabi_uldivmod>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4ba5      	ldr	r3, [pc, #660]	; (8004bfc <UART_SetConfig+0x38c>)
 8004966:	fba3 2302 	umull	r2, r3, r3, r2
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	011e      	lsls	r6, r3, #4
 800496e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004970:	461c      	mov	r4, r3
 8004972:	f04f 0500 	mov.w	r5, #0
 8004976:	4622      	mov	r2, r4
 8004978:	462b      	mov	r3, r5
 800497a:	1891      	adds	r1, r2, r2
 800497c:	6339      	str	r1, [r7, #48]	; 0x30
 800497e:	415b      	adcs	r3, r3
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
 8004982:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004986:	1912      	adds	r2, r2, r4
 8004988:	eb45 0303 	adc.w	r3, r5, r3
 800498c:	f04f 0000 	mov.w	r0, #0
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	00d9      	lsls	r1, r3, #3
 8004996:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800499a:	00d0      	lsls	r0, r2, #3
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	1911      	adds	r1, r2, r4
 80049a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80049a4:	416b      	adcs	r3, r5
 80049a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	1891      	adds	r1, r2, r2
 80049b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80049b6:	415b      	adcs	r3, r3
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80049c2:	f7fc f981 	bl	8000cc8 <__aeabi_uldivmod>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4b8c      	ldr	r3, [pc, #560]	; (8004bfc <UART_SetConfig+0x38c>)
 80049cc:	fba3 1302 	umull	r1, r3, r3, r2
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	2164      	movs	r1, #100	; 0x64
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	3332      	adds	r3, #50	; 0x32
 80049de:	4a87      	ldr	r2, [pc, #540]	; (8004bfc <UART_SetConfig+0x38c>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049ec:	441e      	add	r6, r3
 80049ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f0:	4618      	mov	r0, r3
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	1894      	adds	r4, r2, r2
 80049fc:	623c      	str	r4, [r7, #32]
 80049fe:	415b      	adcs	r3, r3
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
 8004a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a06:	1812      	adds	r2, r2, r0
 8004a08:	eb41 0303 	adc.w	r3, r1, r3
 8004a0c:	f04f 0400 	mov.w	r4, #0
 8004a10:	f04f 0500 	mov.w	r5, #0
 8004a14:	00dd      	lsls	r5, r3, #3
 8004a16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a1a:	00d4      	lsls	r4, r2, #3
 8004a1c:	4622      	mov	r2, r4
 8004a1e:	462b      	mov	r3, r5
 8004a20:	1814      	adds	r4, r2, r0
 8004a22:	653c      	str	r4, [r7, #80]	; 0x50
 8004a24:	414b      	adcs	r3, r1
 8004a26:	657b      	str	r3, [r7, #84]	; 0x54
 8004a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	61b9      	str	r1, [r7, #24]
 8004a36:	415b      	adcs	r3, r3
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a42:	f7fc f941 	bl	8000cc8 <__aeabi_uldivmod>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4b6c      	ldr	r3, [pc, #432]	; (8004bfc <UART_SetConfig+0x38c>)
 8004a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	2164      	movs	r1, #100	; 0x64
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	3332      	adds	r3, #50	; 0x32
 8004a5e:	4a67      	ldr	r2, [pc, #412]	; (8004bfc <UART_SetConfig+0x38c>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	f003 0207 	and.w	r2, r3, #7
 8004a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4432      	add	r2, r6
 8004a70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a72:	e0b9      	b.n	8004be8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a76:	461c      	mov	r4, r3
 8004a78:	f04f 0500 	mov.w	r5, #0
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	462b      	mov	r3, r5
 8004a80:	1891      	adds	r1, r2, r2
 8004a82:	6139      	str	r1, [r7, #16]
 8004a84:	415b      	adcs	r3, r3
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a8c:	1912      	adds	r2, r2, r4
 8004a8e:	eb45 0303 	adc.w	r3, r5, r3
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	00d9      	lsls	r1, r3, #3
 8004a9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aa0:	00d0      	lsls	r0, r2, #3
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	eb12 0804 	adds.w	r8, r2, r4
 8004aaa:	eb43 0905 	adc.w	r9, r3, r5
 8004aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f04f 0100 	mov.w	r1, #0
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	008b      	lsls	r3, r1, #2
 8004ac2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ac6:	0082      	lsls	r2, r0, #2
 8004ac8:	4640      	mov	r0, r8
 8004aca:	4649      	mov	r1, r9
 8004acc:	f7fc f8fc 	bl	8000cc8 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4b49      	ldr	r3, [pc, #292]	; (8004bfc <UART_SetConfig+0x38c>)
 8004ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	011e      	lsls	r6, r3, #4
 8004ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	1894      	adds	r4, r2, r2
 8004aec:	60bc      	str	r4, [r7, #8]
 8004aee:	415b      	adcs	r3, r3
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004af6:	1812      	adds	r2, r2, r0
 8004af8:	eb41 0303 	adc.w	r3, r1, r3
 8004afc:	f04f 0400 	mov.w	r4, #0
 8004b00:	f04f 0500 	mov.w	r5, #0
 8004b04:	00dd      	lsls	r5, r3, #3
 8004b06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b0a:	00d4      	lsls	r4, r2, #3
 8004b0c:	4622      	mov	r2, r4
 8004b0e:	462b      	mov	r3, r5
 8004b10:	1814      	adds	r4, r2, r0
 8004b12:	64bc      	str	r4, [r7, #72]	; 0x48
 8004b14:	414b      	adcs	r3, r1
 8004b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	008b      	lsls	r3, r1, #2
 8004b2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b30:	0082      	lsls	r2, r0, #2
 8004b32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b36:	f7fc f8c7 	bl	8000cc8 <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4b2f      	ldr	r3, [pc, #188]	; (8004bfc <UART_SetConfig+0x38c>)
 8004b40:	fba3 1302 	umull	r1, r3, r3, r2
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	2164      	movs	r1, #100	; 0x64
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	3332      	adds	r3, #50	; 0x32
 8004b52:	4a2a      	ldr	r2, [pc, #168]	; (8004bfc <UART_SetConfig+0x38c>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b5e:	441e      	add	r6, r3
 8004b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b62:	4618      	mov	r0, r3
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	1894      	adds	r4, r2, r2
 8004b6e:	603c      	str	r4, [r7, #0]
 8004b70:	415b      	adcs	r3, r3
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b78:	1812      	adds	r2, r2, r0
 8004b7a:	eb41 0303 	adc.w	r3, r1, r3
 8004b7e:	f04f 0400 	mov.w	r4, #0
 8004b82:	f04f 0500 	mov.w	r5, #0
 8004b86:	00dd      	lsls	r5, r3, #3
 8004b88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b8c:	00d4      	lsls	r4, r2, #3
 8004b8e:	4622      	mov	r2, r4
 8004b90:	462b      	mov	r3, r5
 8004b92:	eb12 0a00 	adds.w	sl, r2, r0
 8004b96:	eb43 0b01 	adc.w	fp, r3, r1
 8004b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f04f 0100 	mov.w	r1, #0
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	008b      	lsls	r3, r1, #2
 8004bae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bb2:	0082      	lsls	r2, r0, #2
 8004bb4:	4650      	mov	r0, sl
 8004bb6:	4659      	mov	r1, fp
 8004bb8:	f7fc f886 	bl	8000cc8 <__aeabi_uldivmod>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4b0e      	ldr	r3, [pc, #56]	; (8004bfc <UART_SetConfig+0x38c>)
 8004bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	2164      	movs	r1, #100	; 0x64
 8004bca:	fb01 f303 	mul.w	r3, r1, r3
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	3332      	adds	r3, #50	; 0x32
 8004bd4:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <UART_SetConfig+0x38c>)
 8004bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	f003 020f 	and.w	r2, r3, #15
 8004be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4432      	add	r2, r6
 8004be6:	609a      	str	r2, [r3, #8]
}
 8004be8:	bf00      	nop
 8004bea:	377c      	adds	r7, #124	; 0x7c
 8004bec:	46bd      	mov	sp, r7
 8004bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40011000 	.word	0x40011000
 8004bf8:	40011400 	.word	0x40011400
 8004bfc:	51eb851f 	.word	0x51eb851f

08004c00 <__errno>:
 8004c00:	4b01      	ldr	r3, [pc, #4]	; (8004c08 <__errno+0x8>)
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20000010 	.word	0x20000010

08004c0c <__libc_init_array>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	4d0d      	ldr	r5, [pc, #52]	; (8004c44 <__libc_init_array+0x38>)
 8004c10:	4c0d      	ldr	r4, [pc, #52]	; (8004c48 <__libc_init_array+0x3c>)
 8004c12:	1b64      	subs	r4, r4, r5
 8004c14:	10a4      	asrs	r4, r4, #2
 8004c16:	2600      	movs	r6, #0
 8004c18:	42a6      	cmp	r6, r4
 8004c1a:	d109      	bne.n	8004c30 <__libc_init_array+0x24>
 8004c1c:	4d0b      	ldr	r5, [pc, #44]	; (8004c4c <__libc_init_array+0x40>)
 8004c1e:	4c0c      	ldr	r4, [pc, #48]	; (8004c50 <__libc_init_array+0x44>)
 8004c20:	f004 fc46 	bl	80094b0 <_init>
 8004c24:	1b64      	subs	r4, r4, r5
 8004c26:	10a4      	asrs	r4, r4, #2
 8004c28:	2600      	movs	r6, #0
 8004c2a:	42a6      	cmp	r6, r4
 8004c2c:	d105      	bne.n	8004c3a <__libc_init_array+0x2e>
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}
 8004c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c34:	4798      	blx	r3
 8004c36:	3601      	adds	r6, #1
 8004c38:	e7ee      	b.n	8004c18 <__libc_init_array+0xc>
 8004c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3e:	4798      	blx	r3
 8004c40:	3601      	adds	r6, #1
 8004c42:	e7f2      	b.n	8004c2a <__libc_init_array+0x1e>
 8004c44:	080099a4 	.word	0x080099a4
 8004c48:	080099a4 	.word	0x080099a4
 8004c4c:	080099a4 	.word	0x080099a4
 8004c50:	080099a8 	.word	0x080099a8

08004c54 <memset>:
 8004c54:	4402      	add	r2, r0
 8004c56:	4603      	mov	r3, r0
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d100      	bne.n	8004c5e <memset+0xa>
 8004c5c:	4770      	bx	lr
 8004c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c62:	e7f9      	b.n	8004c58 <memset+0x4>

08004c64 <__cvt>:
 8004c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c68:	ec55 4b10 	vmov	r4, r5, d0
 8004c6c:	2d00      	cmp	r5, #0
 8004c6e:	460e      	mov	r6, r1
 8004c70:	4619      	mov	r1, r3
 8004c72:	462b      	mov	r3, r5
 8004c74:	bfbb      	ittet	lt
 8004c76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c7a:	461d      	movlt	r5, r3
 8004c7c:	2300      	movge	r3, #0
 8004c7e:	232d      	movlt	r3, #45	; 0x2d
 8004c80:	700b      	strb	r3, [r1, #0]
 8004c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c88:	4691      	mov	r9, r2
 8004c8a:	f023 0820 	bic.w	r8, r3, #32
 8004c8e:	bfbc      	itt	lt
 8004c90:	4622      	movlt	r2, r4
 8004c92:	4614      	movlt	r4, r2
 8004c94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c98:	d005      	beq.n	8004ca6 <__cvt+0x42>
 8004c9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c9e:	d100      	bne.n	8004ca2 <__cvt+0x3e>
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	2102      	movs	r1, #2
 8004ca4:	e000      	b.n	8004ca8 <__cvt+0x44>
 8004ca6:	2103      	movs	r1, #3
 8004ca8:	ab03      	add	r3, sp, #12
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	ab02      	add	r3, sp, #8
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	ec45 4b10 	vmov	d0, r4, r5
 8004cb4:	4653      	mov	r3, sl
 8004cb6:	4632      	mov	r2, r6
 8004cb8:	f001 fdb6 	bl	8006828 <_dtoa_r>
 8004cbc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	d102      	bne.n	8004cca <__cvt+0x66>
 8004cc4:	f019 0f01 	tst.w	r9, #1
 8004cc8:	d022      	beq.n	8004d10 <__cvt+0xac>
 8004cca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cce:	eb07 0906 	add.w	r9, r7, r6
 8004cd2:	d110      	bne.n	8004cf6 <__cvt+0x92>
 8004cd4:	783b      	ldrb	r3, [r7, #0]
 8004cd6:	2b30      	cmp	r3, #48	; 0x30
 8004cd8:	d10a      	bne.n	8004cf0 <__cvt+0x8c>
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4620      	mov	r0, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7fb ff11 	bl	8000b08 <__aeabi_dcmpeq>
 8004ce6:	b918      	cbnz	r0, 8004cf0 <__cvt+0x8c>
 8004ce8:	f1c6 0601 	rsb	r6, r6, #1
 8004cec:	f8ca 6000 	str.w	r6, [sl]
 8004cf0:	f8da 3000 	ldr.w	r3, [sl]
 8004cf4:	4499      	add	r9, r3
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	f7fb ff03 	bl	8000b08 <__aeabi_dcmpeq>
 8004d02:	b108      	cbz	r0, 8004d08 <__cvt+0xa4>
 8004d04:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d08:	2230      	movs	r2, #48	; 0x30
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	454b      	cmp	r3, r9
 8004d0e:	d307      	bcc.n	8004d20 <__cvt+0xbc>
 8004d10:	9b03      	ldr	r3, [sp, #12]
 8004d12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d14:	1bdb      	subs	r3, r3, r7
 8004d16:	4638      	mov	r0, r7
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	b004      	add	sp, #16
 8004d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d20:	1c59      	adds	r1, r3, #1
 8004d22:	9103      	str	r1, [sp, #12]
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	e7f0      	b.n	8004d0a <__cvt+0xa6>

08004d28 <__exponent>:
 8004d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	bfb8      	it	lt
 8004d30:	4249      	neglt	r1, r1
 8004d32:	f803 2b02 	strb.w	r2, [r3], #2
 8004d36:	bfb4      	ite	lt
 8004d38:	222d      	movlt	r2, #45	; 0x2d
 8004d3a:	222b      	movge	r2, #43	; 0x2b
 8004d3c:	2909      	cmp	r1, #9
 8004d3e:	7042      	strb	r2, [r0, #1]
 8004d40:	dd2a      	ble.n	8004d98 <__exponent+0x70>
 8004d42:	f10d 0407 	add.w	r4, sp, #7
 8004d46:	46a4      	mov	ip, r4
 8004d48:	270a      	movs	r7, #10
 8004d4a:	46a6      	mov	lr, r4
 8004d4c:	460a      	mov	r2, r1
 8004d4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d52:	fb07 1516 	mls	r5, r7, r6, r1
 8004d56:	3530      	adds	r5, #48	; 0x30
 8004d58:	2a63      	cmp	r2, #99	; 0x63
 8004d5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d62:	4631      	mov	r1, r6
 8004d64:	dcf1      	bgt.n	8004d4a <__exponent+0x22>
 8004d66:	3130      	adds	r1, #48	; 0x30
 8004d68:	f1ae 0502 	sub.w	r5, lr, #2
 8004d6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d70:	1c44      	adds	r4, r0, #1
 8004d72:	4629      	mov	r1, r5
 8004d74:	4561      	cmp	r1, ip
 8004d76:	d30a      	bcc.n	8004d8e <__exponent+0x66>
 8004d78:	f10d 0209 	add.w	r2, sp, #9
 8004d7c:	eba2 020e 	sub.w	r2, r2, lr
 8004d80:	4565      	cmp	r5, ip
 8004d82:	bf88      	it	hi
 8004d84:	2200      	movhi	r2, #0
 8004d86:	4413      	add	r3, r2
 8004d88:	1a18      	subs	r0, r3, r0
 8004d8a:	b003      	add	sp, #12
 8004d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d96:	e7ed      	b.n	8004d74 <__exponent+0x4c>
 8004d98:	2330      	movs	r3, #48	; 0x30
 8004d9a:	3130      	adds	r1, #48	; 0x30
 8004d9c:	7083      	strb	r3, [r0, #2]
 8004d9e:	70c1      	strb	r1, [r0, #3]
 8004da0:	1d03      	adds	r3, r0, #4
 8004da2:	e7f1      	b.n	8004d88 <__exponent+0x60>

08004da4 <_printf_float>:
 8004da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da8:	ed2d 8b02 	vpush	{d8}
 8004dac:	b08d      	sub	sp, #52	; 0x34
 8004dae:	460c      	mov	r4, r1
 8004db0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004db4:	4616      	mov	r6, r2
 8004db6:	461f      	mov	r7, r3
 8004db8:	4605      	mov	r5, r0
 8004dba:	f002 fe91 	bl	8007ae0 <_localeconv_r>
 8004dbe:	f8d0 a000 	ldr.w	sl, [r0]
 8004dc2:	4650      	mov	r0, sl
 8004dc4:	f7fb fa24 	bl	8000210 <strlen>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	930a      	str	r3, [sp, #40]	; 0x28
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	9305      	str	r3, [sp, #20]
 8004dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004dd8:	3307      	adds	r3, #7
 8004dda:	f023 0307 	bic.w	r3, r3, #7
 8004dde:	f103 0208 	add.w	r2, r3, #8
 8004de2:	f8c8 2000 	str.w	r2, [r8]
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004dee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004df2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004df6:	9307      	str	r3, [sp, #28]
 8004df8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004dfc:	ee08 0a10 	vmov	s16, r0
 8004e00:	4b9f      	ldr	r3, [pc, #636]	; (8005080 <_printf_float+0x2dc>)
 8004e02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	f7fb feaf 	bl	8000b6c <__aeabi_dcmpun>
 8004e0e:	bb88      	cbnz	r0, 8004e74 <_printf_float+0xd0>
 8004e10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e14:	4b9a      	ldr	r3, [pc, #616]	; (8005080 <_printf_float+0x2dc>)
 8004e16:	f04f 32ff 	mov.w	r2, #4294967295
 8004e1a:	f7fb fe89 	bl	8000b30 <__aeabi_dcmple>
 8004e1e:	bb48      	cbnz	r0, 8004e74 <_printf_float+0xd0>
 8004e20:	2200      	movs	r2, #0
 8004e22:	2300      	movs	r3, #0
 8004e24:	4640      	mov	r0, r8
 8004e26:	4649      	mov	r1, r9
 8004e28:	f7fb fe78 	bl	8000b1c <__aeabi_dcmplt>
 8004e2c:	b110      	cbz	r0, 8004e34 <_printf_float+0x90>
 8004e2e:	232d      	movs	r3, #45	; 0x2d
 8004e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e34:	4b93      	ldr	r3, [pc, #588]	; (8005084 <_printf_float+0x2e0>)
 8004e36:	4894      	ldr	r0, [pc, #592]	; (8005088 <_printf_float+0x2e4>)
 8004e38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e3c:	bf94      	ite	ls
 8004e3e:	4698      	movls	r8, r3
 8004e40:	4680      	movhi	r8, r0
 8004e42:	2303      	movs	r3, #3
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	9b05      	ldr	r3, [sp, #20]
 8004e48:	f023 0204 	bic.w	r2, r3, #4
 8004e4c:	6022      	str	r2, [r4, #0]
 8004e4e:	f04f 0900 	mov.w	r9, #0
 8004e52:	9700      	str	r7, [sp, #0]
 8004e54:	4633      	mov	r3, r6
 8004e56:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f000 f9d8 	bl	8005210 <_printf_common>
 8004e60:	3001      	adds	r0, #1
 8004e62:	f040 8090 	bne.w	8004f86 <_printf_float+0x1e2>
 8004e66:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6a:	b00d      	add	sp, #52	; 0x34
 8004e6c:	ecbd 8b02 	vpop	{d8}
 8004e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e74:	4642      	mov	r2, r8
 8004e76:	464b      	mov	r3, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	f7fb fe76 	bl	8000b6c <__aeabi_dcmpun>
 8004e80:	b140      	cbz	r0, 8004e94 <_printf_float+0xf0>
 8004e82:	464b      	mov	r3, r9
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bfbc      	itt	lt
 8004e88:	232d      	movlt	r3, #45	; 0x2d
 8004e8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e8e:	487f      	ldr	r0, [pc, #508]	; (800508c <_printf_float+0x2e8>)
 8004e90:	4b7f      	ldr	r3, [pc, #508]	; (8005090 <_printf_float+0x2ec>)
 8004e92:	e7d1      	b.n	8004e38 <_printf_float+0x94>
 8004e94:	6863      	ldr	r3, [r4, #4]
 8004e96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e9a:	9206      	str	r2, [sp, #24]
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	d13f      	bne.n	8004f20 <_printf_float+0x17c>
 8004ea0:	2306      	movs	r3, #6
 8004ea2:	6063      	str	r3, [r4, #4]
 8004ea4:	9b05      	ldr	r3, [sp, #20]
 8004ea6:	6861      	ldr	r1, [r4, #4]
 8004ea8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004eac:	2300      	movs	r3, #0
 8004eae:	9303      	str	r3, [sp, #12]
 8004eb0:	ab0a      	add	r3, sp, #40	; 0x28
 8004eb2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004eb6:	ab09      	add	r3, sp, #36	; 0x24
 8004eb8:	ec49 8b10 	vmov	d0, r8, r9
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	6022      	str	r2, [r4, #0]
 8004ec0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f7ff fecd 	bl	8004c64 <__cvt>
 8004eca:	9b06      	ldr	r3, [sp, #24]
 8004ecc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ece:	2b47      	cmp	r3, #71	; 0x47
 8004ed0:	4680      	mov	r8, r0
 8004ed2:	d108      	bne.n	8004ee6 <_printf_float+0x142>
 8004ed4:	1cc8      	adds	r0, r1, #3
 8004ed6:	db02      	blt.n	8004ede <_printf_float+0x13a>
 8004ed8:	6863      	ldr	r3, [r4, #4]
 8004eda:	4299      	cmp	r1, r3
 8004edc:	dd41      	ble.n	8004f62 <_printf_float+0x1be>
 8004ede:	f1ab 0b02 	sub.w	fp, fp, #2
 8004ee2:	fa5f fb8b 	uxtb.w	fp, fp
 8004ee6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004eea:	d820      	bhi.n	8004f2e <_printf_float+0x18a>
 8004eec:	3901      	subs	r1, #1
 8004eee:	465a      	mov	r2, fp
 8004ef0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ef4:	9109      	str	r1, [sp, #36]	; 0x24
 8004ef6:	f7ff ff17 	bl	8004d28 <__exponent>
 8004efa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004efc:	1813      	adds	r3, r2, r0
 8004efe:	2a01      	cmp	r2, #1
 8004f00:	4681      	mov	r9, r0
 8004f02:	6123      	str	r3, [r4, #16]
 8004f04:	dc02      	bgt.n	8004f0c <_printf_float+0x168>
 8004f06:	6822      	ldr	r2, [r4, #0]
 8004f08:	07d2      	lsls	r2, r2, #31
 8004f0a:	d501      	bpl.n	8004f10 <_printf_float+0x16c>
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	6123      	str	r3, [r4, #16]
 8004f10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d09c      	beq.n	8004e52 <_printf_float+0xae>
 8004f18:	232d      	movs	r3, #45	; 0x2d
 8004f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f1e:	e798      	b.n	8004e52 <_printf_float+0xae>
 8004f20:	9a06      	ldr	r2, [sp, #24]
 8004f22:	2a47      	cmp	r2, #71	; 0x47
 8004f24:	d1be      	bne.n	8004ea4 <_printf_float+0x100>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1bc      	bne.n	8004ea4 <_printf_float+0x100>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e7b9      	b.n	8004ea2 <_printf_float+0xfe>
 8004f2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f32:	d118      	bne.n	8004f66 <_printf_float+0x1c2>
 8004f34:	2900      	cmp	r1, #0
 8004f36:	6863      	ldr	r3, [r4, #4]
 8004f38:	dd0b      	ble.n	8004f52 <_printf_float+0x1ae>
 8004f3a:	6121      	str	r1, [r4, #16]
 8004f3c:	b913      	cbnz	r3, 8004f44 <_printf_float+0x1a0>
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	07d0      	lsls	r0, r2, #31
 8004f42:	d502      	bpl.n	8004f4a <_printf_float+0x1a6>
 8004f44:	3301      	adds	r3, #1
 8004f46:	440b      	add	r3, r1
 8004f48:	6123      	str	r3, [r4, #16]
 8004f4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f4c:	f04f 0900 	mov.w	r9, #0
 8004f50:	e7de      	b.n	8004f10 <_printf_float+0x16c>
 8004f52:	b913      	cbnz	r3, 8004f5a <_printf_float+0x1b6>
 8004f54:	6822      	ldr	r2, [r4, #0]
 8004f56:	07d2      	lsls	r2, r2, #31
 8004f58:	d501      	bpl.n	8004f5e <_printf_float+0x1ba>
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	e7f4      	b.n	8004f48 <_printf_float+0x1a4>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e7f2      	b.n	8004f48 <_printf_float+0x1a4>
 8004f62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f68:	4299      	cmp	r1, r3
 8004f6a:	db05      	blt.n	8004f78 <_printf_float+0x1d4>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	6121      	str	r1, [r4, #16]
 8004f70:	07d8      	lsls	r0, r3, #31
 8004f72:	d5ea      	bpl.n	8004f4a <_printf_float+0x1a6>
 8004f74:	1c4b      	adds	r3, r1, #1
 8004f76:	e7e7      	b.n	8004f48 <_printf_float+0x1a4>
 8004f78:	2900      	cmp	r1, #0
 8004f7a:	bfd4      	ite	le
 8004f7c:	f1c1 0202 	rsble	r2, r1, #2
 8004f80:	2201      	movgt	r2, #1
 8004f82:	4413      	add	r3, r2
 8004f84:	e7e0      	b.n	8004f48 <_printf_float+0x1a4>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	055a      	lsls	r2, r3, #21
 8004f8a:	d407      	bmi.n	8004f9c <_printf_float+0x1f8>
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	4642      	mov	r2, r8
 8004f90:	4631      	mov	r1, r6
 8004f92:	4628      	mov	r0, r5
 8004f94:	47b8      	blx	r7
 8004f96:	3001      	adds	r0, #1
 8004f98:	d12c      	bne.n	8004ff4 <_printf_float+0x250>
 8004f9a:	e764      	b.n	8004e66 <_printf_float+0xc2>
 8004f9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fa0:	f240 80e0 	bls.w	8005164 <_printf_float+0x3c0>
 8004fa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2300      	movs	r3, #0
 8004fac:	f7fb fdac 	bl	8000b08 <__aeabi_dcmpeq>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d034      	beq.n	800501e <_printf_float+0x27a>
 8004fb4:	4a37      	ldr	r2, [pc, #220]	; (8005094 <_printf_float+0x2f0>)
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b8      	blx	r7
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f43f af51 	beq.w	8004e66 <_printf_float+0xc2>
 8004fc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	db02      	blt.n	8004fd2 <_printf_float+0x22e>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	07d8      	lsls	r0, r3, #31
 8004fd0:	d510      	bpl.n	8004ff4 <_printf_float+0x250>
 8004fd2:	ee18 3a10 	vmov	r3, s16
 8004fd6:	4652      	mov	r2, sl
 8004fd8:	4631      	mov	r1, r6
 8004fda:	4628      	mov	r0, r5
 8004fdc:	47b8      	blx	r7
 8004fde:	3001      	adds	r0, #1
 8004fe0:	f43f af41 	beq.w	8004e66 <_printf_float+0xc2>
 8004fe4:	f04f 0800 	mov.w	r8, #0
 8004fe8:	f104 091a 	add.w	r9, r4, #26
 8004fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	4543      	cmp	r3, r8
 8004ff2:	dc09      	bgt.n	8005008 <_printf_float+0x264>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	079b      	lsls	r3, r3, #30
 8004ff8:	f100 8105 	bmi.w	8005206 <_printf_float+0x462>
 8004ffc:	68e0      	ldr	r0, [r4, #12]
 8004ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005000:	4298      	cmp	r0, r3
 8005002:	bfb8      	it	lt
 8005004:	4618      	movlt	r0, r3
 8005006:	e730      	b.n	8004e6a <_printf_float+0xc6>
 8005008:	2301      	movs	r3, #1
 800500a:	464a      	mov	r2, r9
 800500c:	4631      	mov	r1, r6
 800500e:	4628      	mov	r0, r5
 8005010:	47b8      	blx	r7
 8005012:	3001      	adds	r0, #1
 8005014:	f43f af27 	beq.w	8004e66 <_printf_float+0xc2>
 8005018:	f108 0801 	add.w	r8, r8, #1
 800501c:	e7e6      	b.n	8004fec <_printf_float+0x248>
 800501e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005020:	2b00      	cmp	r3, #0
 8005022:	dc39      	bgt.n	8005098 <_printf_float+0x2f4>
 8005024:	4a1b      	ldr	r2, [pc, #108]	; (8005094 <_printf_float+0x2f0>)
 8005026:	2301      	movs	r3, #1
 8005028:	4631      	mov	r1, r6
 800502a:	4628      	mov	r0, r5
 800502c:	47b8      	blx	r7
 800502e:	3001      	adds	r0, #1
 8005030:	f43f af19 	beq.w	8004e66 <_printf_float+0xc2>
 8005034:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005038:	4313      	orrs	r3, r2
 800503a:	d102      	bne.n	8005042 <_printf_float+0x29e>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	07d9      	lsls	r1, r3, #31
 8005040:	d5d8      	bpl.n	8004ff4 <_printf_float+0x250>
 8005042:	ee18 3a10 	vmov	r3, s16
 8005046:	4652      	mov	r2, sl
 8005048:	4631      	mov	r1, r6
 800504a:	4628      	mov	r0, r5
 800504c:	47b8      	blx	r7
 800504e:	3001      	adds	r0, #1
 8005050:	f43f af09 	beq.w	8004e66 <_printf_float+0xc2>
 8005054:	f04f 0900 	mov.w	r9, #0
 8005058:	f104 0a1a 	add.w	sl, r4, #26
 800505c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800505e:	425b      	negs	r3, r3
 8005060:	454b      	cmp	r3, r9
 8005062:	dc01      	bgt.n	8005068 <_printf_float+0x2c4>
 8005064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005066:	e792      	b.n	8004f8e <_printf_float+0x1ea>
 8005068:	2301      	movs	r3, #1
 800506a:	4652      	mov	r2, sl
 800506c:	4631      	mov	r1, r6
 800506e:	4628      	mov	r0, r5
 8005070:	47b8      	blx	r7
 8005072:	3001      	adds	r0, #1
 8005074:	f43f aef7 	beq.w	8004e66 <_printf_float+0xc2>
 8005078:	f109 0901 	add.w	r9, r9, #1
 800507c:	e7ee      	b.n	800505c <_printf_float+0x2b8>
 800507e:	bf00      	nop
 8005080:	7fefffff 	.word	0x7fefffff
 8005084:	080094ec 	.word	0x080094ec
 8005088:	080094f0 	.word	0x080094f0
 800508c:	080094f8 	.word	0x080094f8
 8005090:	080094f4 	.word	0x080094f4
 8005094:	080094fc 	.word	0x080094fc
 8005098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800509a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800509c:	429a      	cmp	r2, r3
 800509e:	bfa8      	it	ge
 80050a0:	461a      	movge	r2, r3
 80050a2:	2a00      	cmp	r2, #0
 80050a4:	4691      	mov	r9, r2
 80050a6:	dc37      	bgt.n	8005118 <_printf_float+0x374>
 80050a8:	f04f 0b00 	mov.w	fp, #0
 80050ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050b0:	f104 021a 	add.w	r2, r4, #26
 80050b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050b6:	9305      	str	r3, [sp, #20]
 80050b8:	eba3 0309 	sub.w	r3, r3, r9
 80050bc:	455b      	cmp	r3, fp
 80050be:	dc33      	bgt.n	8005128 <_printf_float+0x384>
 80050c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050c4:	429a      	cmp	r2, r3
 80050c6:	db3b      	blt.n	8005140 <_printf_float+0x39c>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	07da      	lsls	r2, r3, #31
 80050cc:	d438      	bmi.n	8005140 <_printf_float+0x39c>
 80050ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050d0:	9b05      	ldr	r3, [sp, #20]
 80050d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	eba2 0901 	sub.w	r9, r2, r1
 80050da:	4599      	cmp	r9, r3
 80050dc:	bfa8      	it	ge
 80050de:	4699      	movge	r9, r3
 80050e0:	f1b9 0f00 	cmp.w	r9, #0
 80050e4:	dc35      	bgt.n	8005152 <_printf_float+0x3ae>
 80050e6:	f04f 0800 	mov.w	r8, #0
 80050ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050ee:	f104 0a1a 	add.w	sl, r4, #26
 80050f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	eba3 0309 	sub.w	r3, r3, r9
 80050fc:	4543      	cmp	r3, r8
 80050fe:	f77f af79 	ble.w	8004ff4 <_printf_float+0x250>
 8005102:	2301      	movs	r3, #1
 8005104:	4652      	mov	r2, sl
 8005106:	4631      	mov	r1, r6
 8005108:	4628      	mov	r0, r5
 800510a:	47b8      	blx	r7
 800510c:	3001      	adds	r0, #1
 800510e:	f43f aeaa 	beq.w	8004e66 <_printf_float+0xc2>
 8005112:	f108 0801 	add.w	r8, r8, #1
 8005116:	e7ec      	b.n	80050f2 <_printf_float+0x34e>
 8005118:	4613      	mov	r3, r2
 800511a:	4631      	mov	r1, r6
 800511c:	4642      	mov	r2, r8
 800511e:	4628      	mov	r0, r5
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	d1c0      	bne.n	80050a8 <_printf_float+0x304>
 8005126:	e69e      	b.n	8004e66 <_printf_float+0xc2>
 8005128:	2301      	movs	r3, #1
 800512a:	4631      	mov	r1, r6
 800512c:	4628      	mov	r0, r5
 800512e:	9205      	str	r2, [sp, #20]
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	f43f ae97 	beq.w	8004e66 <_printf_float+0xc2>
 8005138:	9a05      	ldr	r2, [sp, #20]
 800513a:	f10b 0b01 	add.w	fp, fp, #1
 800513e:	e7b9      	b.n	80050b4 <_printf_float+0x310>
 8005140:	ee18 3a10 	vmov	r3, s16
 8005144:	4652      	mov	r2, sl
 8005146:	4631      	mov	r1, r6
 8005148:	4628      	mov	r0, r5
 800514a:	47b8      	blx	r7
 800514c:	3001      	adds	r0, #1
 800514e:	d1be      	bne.n	80050ce <_printf_float+0x32a>
 8005150:	e689      	b.n	8004e66 <_printf_float+0xc2>
 8005152:	9a05      	ldr	r2, [sp, #20]
 8005154:	464b      	mov	r3, r9
 8005156:	4442      	add	r2, r8
 8005158:	4631      	mov	r1, r6
 800515a:	4628      	mov	r0, r5
 800515c:	47b8      	blx	r7
 800515e:	3001      	adds	r0, #1
 8005160:	d1c1      	bne.n	80050e6 <_printf_float+0x342>
 8005162:	e680      	b.n	8004e66 <_printf_float+0xc2>
 8005164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005166:	2a01      	cmp	r2, #1
 8005168:	dc01      	bgt.n	800516e <_printf_float+0x3ca>
 800516a:	07db      	lsls	r3, r3, #31
 800516c:	d538      	bpl.n	80051e0 <_printf_float+0x43c>
 800516e:	2301      	movs	r3, #1
 8005170:	4642      	mov	r2, r8
 8005172:	4631      	mov	r1, r6
 8005174:	4628      	mov	r0, r5
 8005176:	47b8      	blx	r7
 8005178:	3001      	adds	r0, #1
 800517a:	f43f ae74 	beq.w	8004e66 <_printf_float+0xc2>
 800517e:	ee18 3a10 	vmov	r3, s16
 8005182:	4652      	mov	r2, sl
 8005184:	4631      	mov	r1, r6
 8005186:	4628      	mov	r0, r5
 8005188:	47b8      	blx	r7
 800518a:	3001      	adds	r0, #1
 800518c:	f43f ae6b 	beq.w	8004e66 <_printf_float+0xc2>
 8005190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005194:	2200      	movs	r2, #0
 8005196:	2300      	movs	r3, #0
 8005198:	f7fb fcb6 	bl	8000b08 <__aeabi_dcmpeq>
 800519c:	b9d8      	cbnz	r0, 80051d6 <_printf_float+0x432>
 800519e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a0:	f108 0201 	add.w	r2, r8, #1
 80051a4:	3b01      	subs	r3, #1
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	d10e      	bne.n	80051ce <_printf_float+0x42a>
 80051b0:	e659      	b.n	8004e66 <_printf_float+0xc2>
 80051b2:	2301      	movs	r3, #1
 80051b4:	4652      	mov	r2, sl
 80051b6:	4631      	mov	r1, r6
 80051b8:	4628      	mov	r0, r5
 80051ba:	47b8      	blx	r7
 80051bc:	3001      	adds	r0, #1
 80051be:	f43f ae52 	beq.w	8004e66 <_printf_float+0xc2>
 80051c2:	f108 0801 	add.w	r8, r8, #1
 80051c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c8:	3b01      	subs	r3, #1
 80051ca:	4543      	cmp	r3, r8
 80051cc:	dcf1      	bgt.n	80051b2 <_printf_float+0x40e>
 80051ce:	464b      	mov	r3, r9
 80051d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051d4:	e6dc      	b.n	8004f90 <_printf_float+0x1ec>
 80051d6:	f04f 0800 	mov.w	r8, #0
 80051da:	f104 0a1a 	add.w	sl, r4, #26
 80051de:	e7f2      	b.n	80051c6 <_printf_float+0x422>
 80051e0:	2301      	movs	r3, #1
 80051e2:	4642      	mov	r2, r8
 80051e4:	e7df      	b.n	80051a6 <_printf_float+0x402>
 80051e6:	2301      	movs	r3, #1
 80051e8:	464a      	mov	r2, r9
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	f43f ae38 	beq.w	8004e66 <_printf_float+0xc2>
 80051f6:	f108 0801 	add.w	r8, r8, #1
 80051fa:	68e3      	ldr	r3, [r4, #12]
 80051fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051fe:	1a5b      	subs	r3, r3, r1
 8005200:	4543      	cmp	r3, r8
 8005202:	dcf0      	bgt.n	80051e6 <_printf_float+0x442>
 8005204:	e6fa      	b.n	8004ffc <_printf_float+0x258>
 8005206:	f04f 0800 	mov.w	r8, #0
 800520a:	f104 0919 	add.w	r9, r4, #25
 800520e:	e7f4      	b.n	80051fa <_printf_float+0x456>

08005210 <_printf_common>:
 8005210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005214:	4616      	mov	r6, r2
 8005216:	4699      	mov	r9, r3
 8005218:	688a      	ldr	r2, [r1, #8]
 800521a:	690b      	ldr	r3, [r1, #16]
 800521c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005220:	4293      	cmp	r3, r2
 8005222:	bfb8      	it	lt
 8005224:	4613      	movlt	r3, r2
 8005226:	6033      	str	r3, [r6, #0]
 8005228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800522c:	4607      	mov	r7, r0
 800522e:	460c      	mov	r4, r1
 8005230:	b10a      	cbz	r2, 8005236 <_printf_common+0x26>
 8005232:	3301      	adds	r3, #1
 8005234:	6033      	str	r3, [r6, #0]
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	0699      	lsls	r1, r3, #26
 800523a:	bf42      	ittt	mi
 800523c:	6833      	ldrmi	r3, [r6, #0]
 800523e:	3302      	addmi	r3, #2
 8005240:	6033      	strmi	r3, [r6, #0]
 8005242:	6825      	ldr	r5, [r4, #0]
 8005244:	f015 0506 	ands.w	r5, r5, #6
 8005248:	d106      	bne.n	8005258 <_printf_common+0x48>
 800524a:	f104 0a19 	add.w	sl, r4, #25
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	6832      	ldr	r2, [r6, #0]
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	42ab      	cmp	r3, r5
 8005256:	dc26      	bgt.n	80052a6 <_printf_common+0x96>
 8005258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800525c:	1e13      	subs	r3, r2, #0
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	bf18      	it	ne
 8005262:	2301      	movne	r3, #1
 8005264:	0692      	lsls	r2, r2, #26
 8005266:	d42b      	bmi.n	80052c0 <_printf_common+0xb0>
 8005268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800526c:	4649      	mov	r1, r9
 800526e:	4638      	mov	r0, r7
 8005270:	47c0      	blx	r8
 8005272:	3001      	adds	r0, #1
 8005274:	d01e      	beq.n	80052b4 <_printf_common+0xa4>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	68e5      	ldr	r5, [r4, #12]
 800527a:	6832      	ldr	r2, [r6, #0]
 800527c:	f003 0306 	and.w	r3, r3, #6
 8005280:	2b04      	cmp	r3, #4
 8005282:	bf08      	it	eq
 8005284:	1aad      	subeq	r5, r5, r2
 8005286:	68a3      	ldr	r3, [r4, #8]
 8005288:	6922      	ldr	r2, [r4, #16]
 800528a:	bf0c      	ite	eq
 800528c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005290:	2500      	movne	r5, #0
 8005292:	4293      	cmp	r3, r2
 8005294:	bfc4      	itt	gt
 8005296:	1a9b      	subgt	r3, r3, r2
 8005298:	18ed      	addgt	r5, r5, r3
 800529a:	2600      	movs	r6, #0
 800529c:	341a      	adds	r4, #26
 800529e:	42b5      	cmp	r5, r6
 80052a0:	d11a      	bne.n	80052d8 <_printf_common+0xc8>
 80052a2:	2000      	movs	r0, #0
 80052a4:	e008      	b.n	80052b8 <_printf_common+0xa8>
 80052a6:	2301      	movs	r3, #1
 80052a8:	4652      	mov	r2, sl
 80052aa:	4649      	mov	r1, r9
 80052ac:	4638      	mov	r0, r7
 80052ae:	47c0      	blx	r8
 80052b0:	3001      	adds	r0, #1
 80052b2:	d103      	bne.n	80052bc <_printf_common+0xac>
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052bc:	3501      	adds	r5, #1
 80052be:	e7c6      	b.n	800524e <_printf_common+0x3e>
 80052c0:	18e1      	adds	r1, r4, r3
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	2030      	movs	r0, #48	; 0x30
 80052c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052ca:	4422      	add	r2, r4
 80052cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052d4:	3302      	adds	r3, #2
 80052d6:	e7c7      	b.n	8005268 <_printf_common+0x58>
 80052d8:	2301      	movs	r3, #1
 80052da:	4622      	mov	r2, r4
 80052dc:	4649      	mov	r1, r9
 80052de:	4638      	mov	r0, r7
 80052e0:	47c0      	blx	r8
 80052e2:	3001      	adds	r0, #1
 80052e4:	d0e6      	beq.n	80052b4 <_printf_common+0xa4>
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7d9      	b.n	800529e <_printf_common+0x8e>
	...

080052ec <_printf_i>:
 80052ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052f0:	460c      	mov	r4, r1
 80052f2:	4691      	mov	r9, r2
 80052f4:	7e27      	ldrb	r7, [r4, #24]
 80052f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052f8:	2f78      	cmp	r7, #120	; 0x78
 80052fa:	4680      	mov	r8, r0
 80052fc:	469a      	mov	sl, r3
 80052fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005302:	d807      	bhi.n	8005314 <_printf_i+0x28>
 8005304:	2f62      	cmp	r7, #98	; 0x62
 8005306:	d80a      	bhi.n	800531e <_printf_i+0x32>
 8005308:	2f00      	cmp	r7, #0
 800530a:	f000 80d8 	beq.w	80054be <_printf_i+0x1d2>
 800530e:	2f58      	cmp	r7, #88	; 0x58
 8005310:	f000 80a3 	beq.w	800545a <_printf_i+0x16e>
 8005314:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800531c:	e03a      	b.n	8005394 <_printf_i+0xa8>
 800531e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005322:	2b15      	cmp	r3, #21
 8005324:	d8f6      	bhi.n	8005314 <_printf_i+0x28>
 8005326:	a001      	add	r0, pc, #4	; (adr r0, 800532c <_printf_i+0x40>)
 8005328:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800532c:	08005385 	.word	0x08005385
 8005330:	08005399 	.word	0x08005399
 8005334:	08005315 	.word	0x08005315
 8005338:	08005315 	.word	0x08005315
 800533c:	08005315 	.word	0x08005315
 8005340:	08005315 	.word	0x08005315
 8005344:	08005399 	.word	0x08005399
 8005348:	08005315 	.word	0x08005315
 800534c:	08005315 	.word	0x08005315
 8005350:	08005315 	.word	0x08005315
 8005354:	08005315 	.word	0x08005315
 8005358:	080054a5 	.word	0x080054a5
 800535c:	080053c9 	.word	0x080053c9
 8005360:	08005487 	.word	0x08005487
 8005364:	08005315 	.word	0x08005315
 8005368:	08005315 	.word	0x08005315
 800536c:	080054c7 	.word	0x080054c7
 8005370:	08005315 	.word	0x08005315
 8005374:	080053c9 	.word	0x080053c9
 8005378:	08005315 	.word	0x08005315
 800537c:	08005315 	.word	0x08005315
 8005380:	0800548f 	.word	0x0800548f
 8005384:	680b      	ldr	r3, [r1, #0]
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	600a      	str	r2, [r1, #0]
 800538c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005394:	2301      	movs	r3, #1
 8005396:	e0a3      	b.n	80054e0 <_printf_i+0x1f4>
 8005398:	6825      	ldr	r5, [r4, #0]
 800539a:	6808      	ldr	r0, [r1, #0]
 800539c:	062e      	lsls	r6, r5, #24
 800539e:	f100 0304 	add.w	r3, r0, #4
 80053a2:	d50a      	bpl.n	80053ba <_printf_i+0xce>
 80053a4:	6805      	ldr	r5, [r0, #0]
 80053a6:	600b      	str	r3, [r1, #0]
 80053a8:	2d00      	cmp	r5, #0
 80053aa:	da03      	bge.n	80053b4 <_printf_i+0xc8>
 80053ac:	232d      	movs	r3, #45	; 0x2d
 80053ae:	426d      	negs	r5, r5
 80053b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b4:	485e      	ldr	r0, [pc, #376]	; (8005530 <_printf_i+0x244>)
 80053b6:	230a      	movs	r3, #10
 80053b8:	e019      	b.n	80053ee <_printf_i+0x102>
 80053ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053be:	6805      	ldr	r5, [r0, #0]
 80053c0:	600b      	str	r3, [r1, #0]
 80053c2:	bf18      	it	ne
 80053c4:	b22d      	sxthne	r5, r5
 80053c6:	e7ef      	b.n	80053a8 <_printf_i+0xbc>
 80053c8:	680b      	ldr	r3, [r1, #0]
 80053ca:	6825      	ldr	r5, [r4, #0]
 80053cc:	1d18      	adds	r0, r3, #4
 80053ce:	6008      	str	r0, [r1, #0]
 80053d0:	0628      	lsls	r0, r5, #24
 80053d2:	d501      	bpl.n	80053d8 <_printf_i+0xec>
 80053d4:	681d      	ldr	r5, [r3, #0]
 80053d6:	e002      	b.n	80053de <_printf_i+0xf2>
 80053d8:	0669      	lsls	r1, r5, #25
 80053da:	d5fb      	bpl.n	80053d4 <_printf_i+0xe8>
 80053dc:	881d      	ldrh	r5, [r3, #0]
 80053de:	4854      	ldr	r0, [pc, #336]	; (8005530 <_printf_i+0x244>)
 80053e0:	2f6f      	cmp	r7, #111	; 0x6f
 80053e2:	bf0c      	ite	eq
 80053e4:	2308      	moveq	r3, #8
 80053e6:	230a      	movne	r3, #10
 80053e8:	2100      	movs	r1, #0
 80053ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053ee:	6866      	ldr	r6, [r4, #4]
 80053f0:	60a6      	str	r6, [r4, #8]
 80053f2:	2e00      	cmp	r6, #0
 80053f4:	bfa2      	ittt	ge
 80053f6:	6821      	ldrge	r1, [r4, #0]
 80053f8:	f021 0104 	bicge.w	r1, r1, #4
 80053fc:	6021      	strge	r1, [r4, #0]
 80053fe:	b90d      	cbnz	r5, 8005404 <_printf_i+0x118>
 8005400:	2e00      	cmp	r6, #0
 8005402:	d04d      	beq.n	80054a0 <_printf_i+0x1b4>
 8005404:	4616      	mov	r6, r2
 8005406:	fbb5 f1f3 	udiv	r1, r5, r3
 800540a:	fb03 5711 	mls	r7, r3, r1, r5
 800540e:	5dc7      	ldrb	r7, [r0, r7]
 8005410:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005414:	462f      	mov	r7, r5
 8005416:	42bb      	cmp	r3, r7
 8005418:	460d      	mov	r5, r1
 800541a:	d9f4      	bls.n	8005406 <_printf_i+0x11a>
 800541c:	2b08      	cmp	r3, #8
 800541e:	d10b      	bne.n	8005438 <_printf_i+0x14c>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	07df      	lsls	r7, r3, #31
 8005424:	d508      	bpl.n	8005438 <_printf_i+0x14c>
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	6861      	ldr	r1, [r4, #4]
 800542a:	4299      	cmp	r1, r3
 800542c:	bfde      	ittt	le
 800542e:	2330      	movle	r3, #48	; 0x30
 8005430:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005434:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005438:	1b92      	subs	r2, r2, r6
 800543a:	6122      	str	r2, [r4, #16]
 800543c:	f8cd a000 	str.w	sl, [sp]
 8005440:	464b      	mov	r3, r9
 8005442:	aa03      	add	r2, sp, #12
 8005444:	4621      	mov	r1, r4
 8005446:	4640      	mov	r0, r8
 8005448:	f7ff fee2 	bl	8005210 <_printf_common>
 800544c:	3001      	adds	r0, #1
 800544e:	d14c      	bne.n	80054ea <_printf_i+0x1fe>
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	b004      	add	sp, #16
 8005456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545a:	4835      	ldr	r0, [pc, #212]	; (8005530 <_printf_i+0x244>)
 800545c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	680e      	ldr	r6, [r1, #0]
 8005464:	061f      	lsls	r7, r3, #24
 8005466:	f856 5b04 	ldr.w	r5, [r6], #4
 800546a:	600e      	str	r6, [r1, #0]
 800546c:	d514      	bpl.n	8005498 <_printf_i+0x1ac>
 800546e:	07d9      	lsls	r1, r3, #31
 8005470:	bf44      	itt	mi
 8005472:	f043 0320 	orrmi.w	r3, r3, #32
 8005476:	6023      	strmi	r3, [r4, #0]
 8005478:	b91d      	cbnz	r5, 8005482 <_printf_i+0x196>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	f023 0320 	bic.w	r3, r3, #32
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	2310      	movs	r3, #16
 8005484:	e7b0      	b.n	80053e8 <_printf_i+0xfc>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	f043 0320 	orr.w	r3, r3, #32
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	2378      	movs	r3, #120	; 0x78
 8005490:	4828      	ldr	r0, [pc, #160]	; (8005534 <_printf_i+0x248>)
 8005492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005496:	e7e3      	b.n	8005460 <_printf_i+0x174>
 8005498:	065e      	lsls	r6, r3, #25
 800549a:	bf48      	it	mi
 800549c:	b2ad      	uxthmi	r5, r5
 800549e:	e7e6      	b.n	800546e <_printf_i+0x182>
 80054a0:	4616      	mov	r6, r2
 80054a2:	e7bb      	b.n	800541c <_printf_i+0x130>
 80054a4:	680b      	ldr	r3, [r1, #0]
 80054a6:	6826      	ldr	r6, [r4, #0]
 80054a8:	6960      	ldr	r0, [r4, #20]
 80054aa:	1d1d      	adds	r5, r3, #4
 80054ac:	600d      	str	r5, [r1, #0]
 80054ae:	0635      	lsls	r5, r6, #24
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	d501      	bpl.n	80054b8 <_printf_i+0x1cc>
 80054b4:	6018      	str	r0, [r3, #0]
 80054b6:	e002      	b.n	80054be <_printf_i+0x1d2>
 80054b8:	0671      	lsls	r1, r6, #25
 80054ba:	d5fb      	bpl.n	80054b4 <_printf_i+0x1c8>
 80054bc:	8018      	strh	r0, [r3, #0]
 80054be:	2300      	movs	r3, #0
 80054c0:	6123      	str	r3, [r4, #16]
 80054c2:	4616      	mov	r6, r2
 80054c4:	e7ba      	b.n	800543c <_printf_i+0x150>
 80054c6:	680b      	ldr	r3, [r1, #0]
 80054c8:	1d1a      	adds	r2, r3, #4
 80054ca:	600a      	str	r2, [r1, #0]
 80054cc:	681e      	ldr	r6, [r3, #0]
 80054ce:	6862      	ldr	r2, [r4, #4]
 80054d0:	2100      	movs	r1, #0
 80054d2:	4630      	mov	r0, r6
 80054d4:	f7fa fea4 	bl	8000220 <memchr>
 80054d8:	b108      	cbz	r0, 80054de <_printf_i+0x1f2>
 80054da:	1b80      	subs	r0, r0, r6
 80054dc:	6060      	str	r0, [r4, #4]
 80054de:	6863      	ldr	r3, [r4, #4]
 80054e0:	6123      	str	r3, [r4, #16]
 80054e2:	2300      	movs	r3, #0
 80054e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e8:	e7a8      	b.n	800543c <_printf_i+0x150>
 80054ea:	6923      	ldr	r3, [r4, #16]
 80054ec:	4632      	mov	r2, r6
 80054ee:	4649      	mov	r1, r9
 80054f0:	4640      	mov	r0, r8
 80054f2:	47d0      	blx	sl
 80054f4:	3001      	adds	r0, #1
 80054f6:	d0ab      	beq.n	8005450 <_printf_i+0x164>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	079b      	lsls	r3, r3, #30
 80054fc:	d413      	bmi.n	8005526 <_printf_i+0x23a>
 80054fe:	68e0      	ldr	r0, [r4, #12]
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	4298      	cmp	r0, r3
 8005504:	bfb8      	it	lt
 8005506:	4618      	movlt	r0, r3
 8005508:	e7a4      	b.n	8005454 <_printf_i+0x168>
 800550a:	2301      	movs	r3, #1
 800550c:	4632      	mov	r2, r6
 800550e:	4649      	mov	r1, r9
 8005510:	4640      	mov	r0, r8
 8005512:	47d0      	blx	sl
 8005514:	3001      	adds	r0, #1
 8005516:	d09b      	beq.n	8005450 <_printf_i+0x164>
 8005518:	3501      	adds	r5, #1
 800551a:	68e3      	ldr	r3, [r4, #12]
 800551c:	9903      	ldr	r1, [sp, #12]
 800551e:	1a5b      	subs	r3, r3, r1
 8005520:	42ab      	cmp	r3, r5
 8005522:	dcf2      	bgt.n	800550a <_printf_i+0x21e>
 8005524:	e7eb      	b.n	80054fe <_printf_i+0x212>
 8005526:	2500      	movs	r5, #0
 8005528:	f104 0619 	add.w	r6, r4, #25
 800552c:	e7f5      	b.n	800551a <_printf_i+0x22e>
 800552e:	bf00      	nop
 8005530:	080094fe 	.word	0x080094fe
 8005534:	0800950f 	.word	0x0800950f

08005538 <_scanf_float>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	b087      	sub	sp, #28
 800553e:	4617      	mov	r7, r2
 8005540:	9303      	str	r3, [sp, #12]
 8005542:	688b      	ldr	r3, [r1, #8]
 8005544:	1e5a      	subs	r2, r3, #1
 8005546:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800554a:	bf83      	ittte	hi
 800554c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005550:	195b      	addhi	r3, r3, r5
 8005552:	9302      	strhi	r3, [sp, #8]
 8005554:	2300      	movls	r3, #0
 8005556:	bf86      	itte	hi
 8005558:	f240 135d 	movwhi	r3, #349	; 0x15d
 800555c:	608b      	strhi	r3, [r1, #8]
 800555e:	9302      	strls	r3, [sp, #8]
 8005560:	680b      	ldr	r3, [r1, #0]
 8005562:	468b      	mov	fp, r1
 8005564:	2500      	movs	r5, #0
 8005566:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800556a:	f84b 3b1c 	str.w	r3, [fp], #28
 800556e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005572:	4680      	mov	r8, r0
 8005574:	460c      	mov	r4, r1
 8005576:	465e      	mov	r6, fp
 8005578:	46aa      	mov	sl, r5
 800557a:	46a9      	mov	r9, r5
 800557c:	9501      	str	r5, [sp, #4]
 800557e:	68a2      	ldr	r2, [r4, #8]
 8005580:	b152      	cbz	r2, 8005598 <_scanf_float+0x60>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b4e      	cmp	r3, #78	; 0x4e
 8005588:	d864      	bhi.n	8005654 <_scanf_float+0x11c>
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d83c      	bhi.n	8005608 <_scanf_float+0xd0>
 800558e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005592:	b2c8      	uxtb	r0, r1
 8005594:	280e      	cmp	r0, #14
 8005596:	d93a      	bls.n	800560e <_scanf_float+0xd6>
 8005598:	f1b9 0f00 	cmp.w	r9, #0
 800559c:	d003      	beq.n	80055a6 <_scanf_float+0x6e>
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055aa:	f1ba 0f01 	cmp.w	sl, #1
 80055ae:	f200 8113 	bhi.w	80057d8 <_scanf_float+0x2a0>
 80055b2:	455e      	cmp	r6, fp
 80055b4:	f200 8105 	bhi.w	80057c2 <_scanf_float+0x28a>
 80055b8:	2501      	movs	r5, #1
 80055ba:	4628      	mov	r0, r5
 80055bc:	b007      	add	sp, #28
 80055be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80055c6:	2a0d      	cmp	r2, #13
 80055c8:	d8e6      	bhi.n	8005598 <_scanf_float+0x60>
 80055ca:	a101      	add	r1, pc, #4	; (adr r1, 80055d0 <_scanf_float+0x98>)
 80055cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80055d0:	0800570f 	.word	0x0800570f
 80055d4:	08005599 	.word	0x08005599
 80055d8:	08005599 	.word	0x08005599
 80055dc:	08005599 	.word	0x08005599
 80055e0:	0800576f 	.word	0x0800576f
 80055e4:	08005747 	.word	0x08005747
 80055e8:	08005599 	.word	0x08005599
 80055ec:	08005599 	.word	0x08005599
 80055f0:	0800571d 	.word	0x0800571d
 80055f4:	08005599 	.word	0x08005599
 80055f8:	08005599 	.word	0x08005599
 80055fc:	08005599 	.word	0x08005599
 8005600:	08005599 	.word	0x08005599
 8005604:	080056d5 	.word	0x080056d5
 8005608:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800560c:	e7db      	b.n	80055c6 <_scanf_float+0x8e>
 800560e:	290e      	cmp	r1, #14
 8005610:	d8c2      	bhi.n	8005598 <_scanf_float+0x60>
 8005612:	a001      	add	r0, pc, #4	; (adr r0, 8005618 <_scanf_float+0xe0>)
 8005614:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005618:	080056c7 	.word	0x080056c7
 800561c:	08005599 	.word	0x08005599
 8005620:	080056c7 	.word	0x080056c7
 8005624:	0800575b 	.word	0x0800575b
 8005628:	08005599 	.word	0x08005599
 800562c:	08005675 	.word	0x08005675
 8005630:	080056b1 	.word	0x080056b1
 8005634:	080056b1 	.word	0x080056b1
 8005638:	080056b1 	.word	0x080056b1
 800563c:	080056b1 	.word	0x080056b1
 8005640:	080056b1 	.word	0x080056b1
 8005644:	080056b1 	.word	0x080056b1
 8005648:	080056b1 	.word	0x080056b1
 800564c:	080056b1 	.word	0x080056b1
 8005650:	080056b1 	.word	0x080056b1
 8005654:	2b6e      	cmp	r3, #110	; 0x6e
 8005656:	d809      	bhi.n	800566c <_scanf_float+0x134>
 8005658:	2b60      	cmp	r3, #96	; 0x60
 800565a:	d8b2      	bhi.n	80055c2 <_scanf_float+0x8a>
 800565c:	2b54      	cmp	r3, #84	; 0x54
 800565e:	d077      	beq.n	8005750 <_scanf_float+0x218>
 8005660:	2b59      	cmp	r3, #89	; 0x59
 8005662:	d199      	bne.n	8005598 <_scanf_float+0x60>
 8005664:	2d07      	cmp	r5, #7
 8005666:	d197      	bne.n	8005598 <_scanf_float+0x60>
 8005668:	2508      	movs	r5, #8
 800566a:	e029      	b.n	80056c0 <_scanf_float+0x188>
 800566c:	2b74      	cmp	r3, #116	; 0x74
 800566e:	d06f      	beq.n	8005750 <_scanf_float+0x218>
 8005670:	2b79      	cmp	r3, #121	; 0x79
 8005672:	e7f6      	b.n	8005662 <_scanf_float+0x12a>
 8005674:	6821      	ldr	r1, [r4, #0]
 8005676:	05c8      	lsls	r0, r1, #23
 8005678:	d51a      	bpl.n	80056b0 <_scanf_float+0x178>
 800567a:	9b02      	ldr	r3, [sp, #8]
 800567c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005680:	6021      	str	r1, [r4, #0]
 8005682:	f109 0901 	add.w	r9, r9, #1
 8005686:	b11b      	cbz	r3, 8005690 <_scanf_float+0x158>
 8005688:	3b01      	subs	r3, #1
 800568a:	3201      	adds	r2, #1
 800568c:	9302      	str	r3, [sp, #8]
 800568e:	60a2      	str	r2, [r4, #8]
 8005690:	68a3      	ldr	r3, [r4, #8]
 8005692:	3b01      	subs	r3, #1
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	3301      	adds	r3, #1
 800569a:	6123      	str	r3, [r4, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	607b      	str	r3, [r7, #4]
 80056a4:	f340 8084 	ble.w	80057b0 <_scanf_float+0x278>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	e766      	b.n	800557e <_scanf_float+0x46>
 80056b0:	eb1a 0f05 	cmn.w	sl, r5
 80056b4:	f47f af70 	bne.w	8005598 <_scanf_float+0x60>
 80056b8:	6822      	ldr	r2, [r4, #0]
 80056ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80056be:	6022      	str	r2, [r4, #0]
 80056c0:	f806 3b01 	strb.w	r3, [r6], #1
 80056c4:	e7e4      	b.n	8005690 <_scanf_float+0x158>
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	0610      	lsls	r0, r2, #24
 80056ca:	f57f af65 	bpl.w	8005598 <_scanf_float+0x60>
 80056ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056d2:	e7f4      	b.n	80056be <_scanf_float+0x186>
 80056d4:	f1ba 0f00 	cmp.w	sl, #0
 80056d8:	d10e      	bne.n	80056f8 <_scanf_float+0x1c0>
 80056da:	f1b9 0f00 	cmp.w	r9, #0
 80056de:	d10e      	bne.n	80056fe <_scanf_float+0x1c6>
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80056e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80056ea:	d108      	bne.n	80056fe <_scanf_float+0x1c6>
 80056ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056f0:	6022      	str	r2, [r4, #0]
 80056f2:	f04f 0a01 	mov.w	sl, #1
 80056f6:	e7e3      	b.n	80056c0 <_scanf_float+0x188>
 80056f8:	f1ba 0f02 	cmp.w	sl, #2
 80056fc:	d055      	beq.n	80057aa <_scanf_float+0x272>
 80056fe:	2d01      	cmp	r5, #1
 8005700:	d002      	beq.n	8005708 <_scanf_float+0x1d0>
 8005702:	2d04      	cmp	r5, #4
 8005704:	f47f af48 	bne.w	8005598 <_scanf_float+0x60>
 8005708:	3501      	adds	r5, #1
 800570a:	b2ed      	uxtb	r5, r5
 800570c:	e7d8      	b.n	80056c0 <_scanf_float+0x188>
 800570e:	f1ba 0f01 	cmp.w	sl, #1
 8005712:	f47f af41 	bne.w	8005598 <_scanf_float+0x60>
 8005716:	f04f 0a02 	mov.w	sl, #2
 800571a:	e7d1      	b.n	80056c0 <_scanf_float+0x188>
 800571c:	b97d      	cbnz	r5, 800573e <_scanf_float+0x206>
 800571e:	f1b9 0f00 	cmp.w	r9, #0
 8005722:	f47f af3c 	bne.w	800559e <_scanf_float+0x66>
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800572c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005730:	f47f af39 	bne.w	80055a6 <_scanf_float+0x6e>
 8005734:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005738:	6022      	str	r2, [r4, #0]
 800573a:	2501      	movs	r5, #1
 800573c:	e7c0      	b.n	80056c0 <_scanf_float+0x188>
 800573e:	2d03      	cmp	r5, #3
 8005740:	d0e2      	beq.n	8005708 <_scanf_float+0x1d0>
 8005742:	2d05      	cmp	r5, #5
 8005744:	e7de      	b.n	8005704 <_scanf_float+0x1cc>
 8005746:	2d02      	cmp	r5, #2
 8005748:	f47f af26 	bne.w	8005598 <_scanf_float+0x60>
 800574c:	2503      	movs	r5, #3
 800574e:	e7b7      	b.n	80056c0 <_scanf_float+0x188>
 8005750:	2d06      	cmp	r5, #6
 8005752:	f47f af21 	bne.w	8005598 <_scanf_float+0x60>
 8005756:	2507      	movs	r5, #7
 8005758:	e7b2      	b.n	80056c0 <_scanf_float+0x188>
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	0591      	lsls	r1, r2, #22
 800575e:	f57f af1b 	bpl.w	8005598 <_scanf_float+0x60>
 8005762:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005766:	6022      	str	r2, [r4, #0]
 8005768:	f8cd 9004 	str.w	r9, [sp, #4]
 800576c:	e7a8      	b.n	80056c0 <_scanf_float+0x188>
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005774:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005778:	d006      	beq.n	8005788 <_scanf_float+0x250>
 800577a:	0550      	lsls	r0, r2, #21
 800577c:	f57f af0c 	bpl.w	8005598 <_scanf_float+0x60>
 8005780:	f1b9 0f00 	cmp.w	r9, #0
 8005784:	f43f af0f 	beq.w	80055a6 <_scanf_float+0x6e>
 8005788:	0591      	lsls	r1, r2, #22
 800578a:	bf58      	it	pl
 800578c:	9901      	ldrpl	r1, [sp, #4]
 800578e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005792:	bf58      	it	pl
 8005794:	eba9 0101 	subpl.w	r1, r9, r1
 8005798:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800579c:	bf58      	it	pl
 800579e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80057a2:	6022      	str	r2, [r4, #0]
 80057a4:	f04f 0900 	mov.w	r9, #0
 80057a8:	e78a      	b.n	80056c0 <_scanf_float+0x188>
 80057aa:	f04f 0a03 	mov.w	sl, #3
 80057ae:	e787      	b.n	80056c0 <_scanf_float+0x188>
 80057b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80057b4:	4639      	mov	r1, r7
 80057b6:	4640      	mov	r0, r8
 80057b8:	4798      	blx	r3
 80057ba:	2800      	cmp	r0, #0
 80057bc:	f43f aedf 	beq.w	800557e <_scanf_float+0x46>
 80057c0:	e6ea      	b.n	8005598 <_scanf_float+0x60>
 80057c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057ca:	463a      	mov	r2, r7
 80057cc:	4640      	mov	r0, r8
 80057ce:	4798      	blx	r3
 80057d0:	6923      	ldr	r3, [r4, #16]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	e6ec      	b.n	80055b2 <_scanf_float+0x7a>
 80057d8:	1e6b      	subs	r3, r5, #1
 80057da:	2b06      	cmp	r3, #6
 80057dc:	d825      	bhi.n	800582a <_scanf_float+0x2f2>
 80057de:	2d02      	cmp	r5, #2
 80057e0:	d836      	bhi.n	8005850 <_scanf_float+0x318>
 80057e2:	455e      	cmp	r6, fp
 80057e4:	f67f aee8 	bls.w	80055b8 <_scanf_float+0x80>
 80057e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057f0:	463a      	mov	r2, r7
 80057f2:	4640      	mov	r0, r8
 80057f4:	4798      	blx	r3
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	6123      	str	r3, [r4, #16]
 80057fc:	e7f1      	b.n	80057e2 <_scanf_float+0x2aa>
 80057fe:	9802      	ldr	r0, [sp, #8]
 8005800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005804:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005808:	9002      	str	r0, [sp, #8]
 800580a:	463a      	mov	r2, r7
 800580c:	4640      	mov	r0, r8
 800580e:	4798      	blx	r3
 8005810:	6923      	ldr	r3, [r4, #16]
 8005812:	3b01      	subs	r3, #1
 8005814:	6123      	str	r3, [r4, #16]
 8005816:	f10a 3aff 	add.w	sl, sl, #4294967295
 800581a:	fa5f fa8a 	uxtb.w	sl, sl
 800581e:	f1ba 0f02 	cmp.w	sl, #2
 8005822:	d1ec      	bne.n	80057fe <_scanf_float+0x2c6>
 8005824:	3d03      	subs	r5, #3
 8005826:	b2ed      	uxtb	r5, r5
 8005828:	1b76      	subs	r6, r6, r5
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	05da      	lsls	r2, r3, #23
 800582e:	d52f      	bpl.n	8005890 <_scanf_float+0x358>
 8005830:	055b      	lsls	r3, r3, #21
 8005832:	d510      	bpl.n	8005856 <_scanf_float+0x31e>
 8005834:	455e      	cmp	r6, fp
 8005836:	f67f aebf 	bls.w	80055b8 <_scanf_float+0x80>
 800583a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800583e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005842:	463a      	mov	r2, r7
 8005844:	4640      	mov	r0, r8
 8005846:	4798      	blx	r3
 8005848:	6923      	ldr	r3, [r4, #16]
 800584a:	3b01      	subs	r3, #1
 800584c:	6123      	str	r3, [r4, #16]
 800584e:	e7f1      	b.n	8005834 <_scanf_float+0x2fc>
 8005850:	46aa      	mov	sl, r5
 8005852:	9602      	str	r6, [sp, #8]
 8005854:	e7df      	b.n	8005816 <_scanf_float+0x2de>
 8005856:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800585a:	6923      	ldr	r3, [r4, #16]
 800585c:	2965      	cmp	r1, #101	; 0x65
 800585e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005862:	f106 35ff 	add.w	r5, r6, #4294967295
 8005866:	6123      	str	r3, [r4, #16]
 8005868:	d00c      	beq.n	8005884 <_scanf_float+0x34c>
 800586a:	2945      	cmp	r1, #69	; 0x45
 800586c:	d00a      	beq.n	8005884 <_scanf_float+0x34c>
 800586e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005872:	463a      	mov	r2, r7
 8005874:	4640      	mov	r0, r8
 8005876:	4798      	blx	r3
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800587e:	3b01      	subs	r3, #1
 8005880:	1eb5      	subs	r5, r6, #2
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005888:	463a      	mov	r2, r7
 800588a:	4640      	mov	r0, r8
 800588c:	4798      	blx	r3
 800588e:	462e      	mov	r6, r5
 8005890:	6825      	ldr	r5, [r4, #0]
 8005892:	f015 0510 	ands.w	r5, r5, #16
 8005896:	d158      	bne.n	800594a <_scanf_float+0x412>
 8005898:	7035      	strb	r5, [r6, #0]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a4:	d11c      	bne.n	80058e0 <_scanf_float+0x3a8>
 80058a6:	9b01      	ldr	r3, [sp, #4]
 80058a8:	454b      	cmp	r3, r9
 80058aa:	eba3 0209 	sub.w	r2, r3, r9
 80058ae:	d124      	bne.n	80058fa <_scanf_float+0x3c2>
 80058b0:	2200      	movs	r2, #0
 80058b2:	4659      	mov	r1, fp
 80058b4:	4640      	mov	r0, r8
 80058b6:	f000 fe9d 	bl	80065f4 <_strtod_r>
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	6821      	ldr	r1, [r4, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f011 0f02 	tst.w	r1, #2
 80058c4:	ec57 6b10 	vmov	r6, r7, d0
 80058c8:	f103 0204 	add.w	r2, r3, #4
 80058cc:	d020      	beq.n	8005910 <_scanf_float+0x3d8>
 80058ce:	9903      	ldr	r1, [sp, #12]
 80058d0:	600a      	str	r2, [r1, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	e9c3 6700 	strd	r6, r7, [r3]
 80058d8:	68e3      	ldr	r3, [r4, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60e3      	str	r3, [r4, #12]
 80058de:	e66c      	b.n	80055ba <_scanf_float+0x82>
 80058e0:	9b04      	ldr	r3, [sp, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0e4      	beq.n	80058b0 <_scanf_float+0x378>
 80058e6:	9905      	ldr	r1, [sp, #20]
 80058e8:	230a      	movs	r3, #10
 80058ea:	462a      	mov	r2, r5
 80058ec:	3101      	adds	r1, #1
 80058ee:	4640      	mov	r0, r8
 80058f0:	f000 ff0a 	bl	8006708 <_strtol_r>
 80058f4:	9b04      	ldr	r3, [sp, #16]
 80058f6:	9e05      	ldr	r6, [sp, #20]
 80058f8:	1ac2      	subs	r2, r0, r3
 80058fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80058fe:	429e      	cmp	r6, r3
 8005900:	bf28      	it	cs
 8005902:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005906:	4912      	ldr	r1, [pc, #72]	; (8005950 <_scanf_float+0x418>)
 8005908:	4630      	mov	r0, r6
 800590a:	f000 f82b 	bl	8005964 <siprintf>
 800590e:	e7cf      	b.n	80058b0 <_scanf_float+0x378>
 8005910:	f011 0f04 	tst.w	r1, #4
 8005914:	9903      	ldr	r1, [sp, #12]
 8005916:	600a      	str	r2, [r1, #0]
 8005918:	d1db      	bne.n	80058d2 <_scanf_float+0x39a>
 800591a:	f8d3 8000 	ldr.w	r8, [r3]
 800591e:	ee10 2a10 	vmov	r2, s0
 8005922:	ee10 0a10 	vmov	r0, s0
 8005926:	463b      	mov	r3, r7
 8005928:	4639      	mov	r1, r7
 800592a:	f7fb f91f 	bl	8000b6c <__aeabi_dcmpun>
 800592e:	b128      	cbz	r0, 800593c <_scanf_float+0x404>
 8005930:	4808      	ldr	r0, [pc, #32]	; (8005954 <_scanf_float+0x41c>)
 8005932:	f000 f811 	bl	8005958 <nanf>
 8005936:	ed88 0a00 	vstr	s0, [r8]
 800593a:	e7cd      	b.n	80058d8 <_scanf_float+0x3a0>
 800593c:	4630      	mov	r0, r6
 800593e:	4639      	mov	r1, r7
 8005940:	f7fb f972 	bl	8000c28 <__aeabi_d2f>
 8005944:	f8c8 0000 	str.w	r0, [r8]
 8005948:	e7c6      	b.n	80058d8 <_scanf_float+0x3a0>
 800594a:	2500      	movs	r5, #0
 800594c:	e635      	b.n	80055ba <_scanf_float+0x82>
 800594e:	bf00      	nop
 8005950:	08009520 	.word	0x08009520
 8005954:	08009938 	.word	0x08009938

08005958 <nanf>:
 8005958:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005960 <nanf+0x8>
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	7fc00000 	.word	0x7fc00000

08005964 <siprintf>:
 8005964:	b40e      	push	{r1, r2, r3}
 8005966:	b500      	push	{lr}
 8005968:	b09c      	sub	sp, #112	; 0x70
 800596a:	ab1d      	add	r3, sp, #116	; 0x74
 800596c:	9002      	str	r0, [sp, #8]
 800596e:	9006      	str	r0, [sp, #24]
 8005970:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005974:	4809      	ldr	r0, [pc, #36]	; (800599c <siprintf+0x38>)
 8005976:	9107      	str	r1, [sp, #28]
 8005978:	9104      	str	r1, [sp, #16]
 800597a:	4909      	ldr	r1, [pc, #36]	; (80059a0 <siprintf+0x3c>)
 800597c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005980:	9105      	str	r1, [sp, #20]
 8005982:	6800      	ldr	r0, [r0, #0]
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	a902      	add	r1, sp, #8
 8005988:	f002 fea6 	bl	80086d8 <_svfiprintf_r>
 800598c:	9b02      	ldr	r3, [sp, #8]
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	b01c      	add	sp, #112	; 0x70
 8005994:	f85d eb04 	ldr.w	lr, [sp], #4
 8005998:	b003      	add	sp, #12
 800599a:	4770      	bx	lr
 800599c:	20000010 	.word	0x20000010
 80059a0:	ffff0208 	.word	0xffff0208

080059a4 <sulp>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	4604      	mov	r4, r0
 80059a8:	460d      	mov	r5, r1
 80059aa:	ec45 4b10 	vmov	d0, r4, r5
 80059ae:	4616      	mov	r6, r2
 80059b0:	f002 fc2e 	bl	8008210 <__ulp>
 80059b4:	ec51 0b10 	vmov	r0, r1, d0
 80059b8:	b17e      	cbz	r6, 80059da <sulp+0x36>
 80059ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80059be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	dd09      	ble.n	80059da <sulp+0x36>
 80059c6:	051b      	lsls	r3, r3, #20
 80059c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80059cc:	2400      	movs	r4, #0
 80059ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80059d2:	4622      	mov	r2, r4
 80059d4:	462b      	mov	r3, r5
 80059d6:	f7fa fe2f 	bl	8000638 <__aeabi_dmul>
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	0000      	movs	r0, r0
	...

080059e0 <_strtod_l>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	b0a3      	sub	sp, #140	; 0x8c
 80059e6:	461f      	mov	r7, r3
 80059e8:	2300      	movs	r3, #0
 80059ea:	931e      	str	r3, [sp, #120]	; 0x78
 80059ec:	4ba4      	ldr	r3, [pc, #656]	; (8005c80 <_strtod_l+0x2a0>)
 80059ee:	9219      	str	r2, [sp, #100]	; 0x64
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	9307      	str	r3, [sp, #28]
 80059f4:	4604      	mov	r4, r0
 80059f6:	4618      	mov	r0, r3
 80059f8:	4688      	mov	r8, r1
 80059fa:	f7fa fc09 	bl	8000210 <strlen>
 80059fe:	f04f 0a00 	mov.w	sl, #0
 8005a02:	4605      	mov	r5, r0
 8005a04:	f04f 0b00 	mov.w	fp, #0
 8005a08:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005a0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a0e:	781a      	ldrb	r2, [r3, #0]
 8005a10:	2a2b      	cmp	r2, #43	; 0x2b
 8005a12:	d04c      	beq.n	8005aae <_strtod_l+0xce>
 8005a14:	d839      	bhi.n	8005a8a <_strtod_l+0xaa>
 8005a16:	2a0d      	cmp	r2, #13
 8005a18:	d832      	bhi.n	8005a80 <_strtod_l+0xa0>
 8005a1a:	2a08      	cmp	r2, #8
 8005a1c:	d832      	bhi.n	8005a84 <_strtod_l+0xa4>
 8005a1e:	2a00      	cmp	r2, #0
 8005a20:	d03c      	beq.n	8005a9c <_strtod_l+0xbc>
 8005a22:	2300      	movs	r3, #0
 8005a24:	930e      	str	r3, [sp, #56]	; 0x38
 8005a26:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005a28:	7833      	ldrb	r3, [r6, #0]
 8005a2a:	2b30      	cmp	r3, #48	; 0x30
 8005a2c:	f040 80b4 	bne.w	8005b98 <_strtod_l+0x1b8>
 8005a30:	7873      	ldrb	r3, [r6, #1]
 8005a32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a36:	2b58      	cmp	r3, #88	; 0x58
 8005a38:	d16c      	bne.n	8005b14 <_strtod_l+0x134>
 8005a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	ab1e      	add	r3, sp, #120	; 0x78
 8005a40:	9702      	str	r7, [sp, #8]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	4a8f      	ldr	r2, [pc, #572]	; (8005c84 <_strtod_l+0x2a4>)
 8005a46:	ab1f      	add	r3, sp, #124	; 0x7c
 8005a48:	a91d      	add	r1, sp, #116	; 0x74
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f001 fd40 	bl	80074d0 <__gethex>
 8005a50:	f010 0707 	ands.w	r7, r0, #7
 8005a54:	4605      	mov	r5, r0
 8005a56:	d005      	beq.n	8005a64 <_strtod_l+0x84>
 8005a58:	2f06      	cmp	r7, #6
 8005a5a:	d12a      	bne.n	8005ab2 <_strtod_l+0xd2>
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	2300      	movs	r3, #0
 8005a60:	961d      	str	r6, [sp, #116]	; 0x74
 8005a62:	930e      	str	r3, [sp, #56]	; 0x38
 8005a64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f040 8596 	bne.w	8006598 <_strtod_l+0xbb8>
 8005a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a6e:	b1db      	cbz	r3, 8005aa8 <_strtod_l+0xc8>
 8005a70:	4652      	mov	r2, sl
 8005a72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005a76:	ec43 2b10 	vmov	d0, r2, r3
 8005a7a:	b023      	add	sp, #140	; 0x8c
 8005a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a80:	2a20      	cmp	r2, #32
 8005a82:	d1ce      	bne.n	8005a22 <_strtod_l+0x42>
 8005a84:	3301      	adds	r3, #1
 8005a86:	931d      	str	r3, [sp, #116]	; 0x74
 8005a88:	e7c0      	b.n	8005a0c <_strtod_l+0x2c>
 8005a8a:	2a2d      	cmp	r2, #45	; 0x2d
 8005a8c:	d1c9      	bne.n	8005a22 <_strtod_l+0x42>
 8005a8e:	2201      	movs	r2, #1
 8005a90:	920e      	str	r2, [sp, #56]	; 0x38
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	921d      	str	r2, [sp, #116]	; 0x74
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1c4      	bne.n	8005a26 <_strtod_l+0x46>
 8005a9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a9e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f040 8576 	bne.w	8006594 <_strtod_l+0xbb4>
 8005aa8:	4652      	mov	r2, sl
 8005aaa:	465b      	mov	r3, fp
 8005aac:	e7e3      	b.n	8005a76 <_strtod_l+0x96>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	e7ee      	b.n	8005a90 <_strtod_l+0xb0>
 8005ab2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ab4:	b13a      	cbz	r2, 8005ac6 <_strtod_l+0xe6>
 8005ab6:	2135      	movs	r1, #53	; 0x35
 8005ab8:	a820      	add	r0, sp, #128	; 0x80
 8005aba:	f002 fcb4 	bl	8008426 <__copybits>
 8005abe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f002 f879 	bl	8007bb8 <_Bfree>
 8005ac6:	3f01      	subs	r7, #1
 8005ac8:	2f05      	cmp	r7, #5
 8005aca:	d807      	bhi.n	8005adc <_strtod_l+0xfc>
 8005acc:	e8df f007 	tbb	[pc, r7]
 8005ad0:	1d180b0e 	.word	0x1d180b0e
 8005ad4:	030e      	.short	0x030e
 8005ad6:	f04f 0b00 	mov.w	fp, #0
 8005ada:	46da      	mov	sl, fp
 8005adc:	0728      	lsls	r0, r5, #28
 8005ade:	d5c1      	bpl.n	8005a64 <_strtod_l+0x84>
 8005ae0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005ae4:	e7be      	b.n	8005a64 <_strtod_l+0x84>
 8005ae6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005aea:	e7f7      	b.n	8005adc <_strtod_l+0xfc>
 8005aec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005af0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005af2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005af6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005afa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005afe:	e7ed      	b.n	8005adc <_strtod_l+0xfc>
 8005b00:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005c88 <_strtod_l+0x2a8>
 8005b04:	f04f 0a00 	mov.w	sl, #0
 8005b08:	e7e8      	b.n	8005adc <_strtod_l+0xfc>
 8005b0a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005b0e:	f04f 3aff 	mov.w	sl, #4294967295
 8005b12:	e7e3      	b.n	8005adc <_strtod_l+0xfc>
 8005b14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	921d      	str	r2, [sp, #116]	; 0x74
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b30      	cmp	r3, #48	; 0x30
 8005b1e:	d0f9      	beq.n	8005b14 <_strtod_l+0x134>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d09f      	beq.n	8005a64 <_strtod_l+0x84>
 8005b24:	2301      	movs	r3, #1
 8005b26:	f04f 0900 	mov.w	r9, #0
 8005b2a:	9304      	str	r3, [sp, #16]
 8005b2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b30:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005b34:	464f      	mov	r7, r9
 8005b36:	220a      	movs	r2, #10
 8005b38:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005b3a:	7806      	ldrb	r6, [r0, #0]
 8005b3c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005b40:	b2d9      	uxtb	r1, r3
 8005b42:	2909      	cmp	r1, #9
 8005b44:	d92a      	bls.n	8005b9c <_strtod_l+0x1bc>
 8005b46:	9907      	ldr	r1, [sp, #28]
 8005b48:	462a      	mov	r2, r5
 8005b4a:	f002 fedd 	bl	8008908 <strncmp>
 8005b4e:	b398      	cbz	r0, 8005bb8 <_strtod_l+0x1d8>
 8005b50:	2000      	movs	r0, #0
 8005b52:	4633      	mov	r3, r6
 8005b54:	463d      	mov	r5, r7
 8005b56:	9007      	str	r0, [sp, #28]
 8005b58:	4602      	mov	r2, r0
 8005b5a:	2b65      	cmp	r3, #101	; 0x65
 8005b5c:	d001      	beq.n	8005b62 <_strtod_l+0x182>
 8005b5e:	2b45      	cmp	r3, #69	; 0x45
 8005b60:	d118      	bne.n	8005b94 <_strtod_l+0x1b4>
 8005b62:	b91d      	cbnz	r5, 8005b6c <_strtod_l+0x18c>
 8005b64:	9b04      	ldr	r3, [sp, #16]
 8005b66:	4303      	orrs	r3, r0
 8005b68:	d098      	beq.n	8005a9c <_strtod_l+0xbc>
 8005b6a:	2500      	movs	r5, #0
 8005b6c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005b70:	f108 0301 	add.w	r3, r8, #1
 8005b74:	931d      	str	r3, [sp, #116]	; 0x74
 8005b76:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005b7a:	2b2b      	cmp	r3, #43	; 0x2b
 8005b7c:	d075      	beq.n	8005c6a <_strtod_l+0x28a>
 8005b7e:	2b2d      	cmp	r3, #45	; 0x2d
 8005b80:	d07b      	beq.n	8005c7a <_strtod_l+0x29a>
 8005b82:	f04f 0c00 	mov.w	ip, #0
 8005b86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005b8a:	2909      	cmp	r1, #9
 8005b8c:	f240 8082 	bls.w	8005c94 <_strtod_l+0x2b4>
 8005b90:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005b94:	2600      	movs	r6, #0
 8005b96:	e09d      	b.n	8005cd4 <_strtod_l+0x2f4>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e7c4      	b.n	8005b26 <_strtod_l+0x146>
 8005b9c:	2f08      	cmp	r7, #8
 8005b9e:	bfd8      	it	le
 8005ba0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005ba2:	f100 0001 	add.w	r0, r0, #1
 8005ba6:	bfda      	itte	le
 8005ba8:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bac:	9309      	strle	r3, [sp, #36]	; 0x24
 8005bae:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005bb2:	3701      	adds	r7, #1
 8005bb4:	901d      	str	r0, [sp, #116]	; 0x74
 8005bb6:	e7bf      	b.n	8005b38 <_strtod_l+0x158>
 8005bb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bba:	195a      	adds	r2, r3, r5
 8005bbc:	921d      	str	r2, [sp, #116]	; 0x74
 8005bbe:	5d5b      	ldrb	r3, [r3, r5]
 8005bc0:	2f00      	cmp	r7, #0
 8005bc2:	d037      	beq.n	8005c34 <_strtod_l+0x254>
 8005bc4:	9007      	str	r0, [sp, #28]
 8005bc6:	463d      	mov	r5, r7
 8005bc8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005bcc:	2a09      	cmp	r2, #9
 8005bce:	d912      	bls.n	8005bf6 <_strtod_l+0x216>
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	e7c2      	b.n	8005b5a <_strtod_l+0x17a>
 8005bd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	921d      	str	r2, [sp, #116]	; 0x74
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	3001      	adds	r0, #1
 8005bde:	2b30      	cmp	r3, #48	; 0x30
 8005be0:	d0f8      	beq.n	8005bd4 <_strtod_l+0x1f4>
 8005be2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005be6:	2a08      	cmp	r2, #8
 8005be8:	f200 84db 	bhi.w	80065a2 <_strtod_l+0xbc2>
 8005bec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005bee:	9007      	str	r0, [sp, #28]
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	920a      	str	r2, [sp, #40]	; 0x28
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	3b30      	subs	r3, #48	; 0x30
 8005bf8:	f100 0201 	add.w	r2, r0, #1
 8005bfc:	d014      	beq.n	8005c28 <_strtod_l+0x248>
 8005bfe:	9907      	ldr	r1, [sp, #28]
 8005c00:	4411      	add	r1, r2
 8005c02:	9107      	str	r1, [sp, #28]
 8005c04:	462a      	mov	r2, r5
 8005c06:	eb00 0e05 	add.w	lr, r0, r5
 8005c0a:	210a      	movs	r1, #10
 8005c0c:	4572      	cmp	r2, lr
 8005c0e:	d113      	bne.n	8005c38 <_strtod_l+0x258>
 8005c10:	182a      	adds	r2, r5, r0
 8005c12:	2a08      	cmp	r2, #8
 8005c14:	f105 0501 	add.w	r5, r5, #1
 8005c18:	4405      	add	r5, r0
 8005c1a:	dc1c      	bgt.n	8005c56 <_strtod_l+0x276>
 8005c1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c1e:	220a      	movs	r2, #10
 8005c20:	fb02 3301 	mla	r3, r2, r1, r3
 8005c24:	9309      	str	r3, [sp, #36]	; 0x24
 8005c26:	2200      	movs	r2, #0
 8005c28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c2a:	1c59      	adds	r1, r3, #1
 8005c2c:	911d      	str	r1, [sp, #116]	; 0x74
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	4610      	mov	r0, r2
 8005c32:	e7c9      	b.n	8005bc8 <_strtod_l+0x1e8>
 8005c34:	4638      	mov	r0, r7
 8005c36:	e7d2      	b.n	8005bde <_strtod_l+0x1fe>
 8005c38:	2a08      	cmp	r2, #8
 8005c3a:	dc04      	bgt.n	8005c46 <_strtod_l+0x266>
 8005c3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005c3e:	434e      	muls	r6, r1
 8005c40:	9609      	str	r6, [sp, #36]	; 0x24
 8005c42:	3201      	adds	r2, #1
 8005c44:	e7e2      	b.n	8005c0c <_strtod_l+0x22c>
 8005c46:	f102 0c01 	add.w	ip, r2, #1
 8005c4a:	f1bc 0f10 	cmp.w	ip, #16
 8005c4e:	bfd8      	it	le
 8005c50:	fb01 f909 	mulle.w	r9, r1, r9
 8005c54:	e7f5      	b.n	8005c42 <_strtod_l+0x262>
 8005c56:	2d10      	cmp	r5, #16
 8005c58:	bfdc      	itt	le
 8005c5a:	220a      	movle	r2, #10
 8005c5c:	fb02 3909 	mlale	r9, r2, r9, r3
 8005c60:	e7e1      	b.n	8005c26 <_strtod_l+0x246>
 8005c62:	2300      	movs	r3, #0
 8005c64:	9307      	str	r3, [sp, #28]
 8005c66:	2201      	movs	r2, #1
 8005c68:	e77c      	b.n	8005b64 <_strtod_l+0x184>
 8005c6a:	f04f 0c00 	mov.w	ip, #0
 8005c6e:	f108 0302 	add.w	r3, r8, #2
 8005c72:	931d      	str	r3, [sp, #116]	; 0x74
 8005c74:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005c78:	e785      	b.n	8005b86 <_strtod_l+0x1a6>
 8005c7a:	f04f 0c01 	mov.w	ip, #1
 8005c7e:	e7f6      	b.n	8005c6e <_strtod_l+0x28e>
 8005c80:	08009778 	.word	0x08009778
 8005c84:	08009528 	.word	0x08009528
 8005c88:	7ff00000 	.word	0x7ff00000
 8005c8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c8e:	1c59      	adds	r1, r3, #1
 8005c90:	911d      	str	r1, [sp, #116]	; 0x74
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	2b30      	cmp	r3, #48	; 0x30
 8005c96:	d0f9      	beq.n	8005c8c <_strtod_l+0x2ac>
 8005c98:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005c9c:	2908      	cmp	r1, #8
 8005c9e:	f63f af79 	bhi.w	8005b94 <_strtod_l+0x1b4>
 8005ca2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005ca6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ca8:	9308      	str	r3, [sp, #32]
 8005caa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005cac:	1c59      	adds	r1, r3, #1
 8005cae:	911d      	str	r1, [sp, #116]	; 0x74
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005cb6:	2e09      	cmp	r6, #9
 8005cb8:	d937      	bls.n	8005d2a <_strtod_l+0x34a>
 8005cba:	9e08      	ldr	r6, [sp, #32]
 8005cbc:	1b89      	subs	r1, r1, r6
 8005cbe:	2908      	cmp	r1, #8
 8005cc0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005cc4:	dc02      	bgt.n	8005ccc <_strtod_l+0x2ec>
 8005cc6:	4576      	cmp	r6, lr
 8005cc8:	bfa8      	it	ge
 8005cca:	4676      	movge	r6, lr
 8005ccc:	f1bc 0f00 	cmp.w	ip, #0
 8005cd0:	d000      	beq.n	8005cd4 <_strtod_l+0x2f4>
 8005cd2:	4276      	negs	r6, r6
 8005cd4:	2d00      	cmp	r5, #0
 8005cd6:	d14f      	bne.n	8005d78 <_strtod_l+0x398>
 8005cd8:	9904      	ldr	r1, [sp, #16]
 8005cda:	4301      	orrs	r1, r0
 8005cdc:	f47f aec2 	bne.w	8005a64 <_strtod_l+0x84>
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	f47f aedb 	bne.w	8005a9c <_strtod_l+0xbc>
 8005ce6:	2b69      	cmp	r3, #105	; 0x69
 8005ce8:	d027      	beq.n	8005d3a <_strtod_l+0x35a>
 8005cea:	dc24      	bgt.n	8005d36 <_strtod_l+0x356>
 8005cec:	2b49      	cmp	r3, #73	; 0x49
 8005cee:	d024      	beq.n	8005d3a <_strtod_l+0x35a>
 8005cf0:	2b4e      	cmp	r3, #78	; 0x4e
 8005cf2:	f47f aed3 	bne.w	8005a9c <_strtod_l+0xbc>
 8005cf6:	499e      	ldr	r1, [pc, #632]	; (8005f70 <_strtod_l+0x590>)
 8005cf8:	a81d      	add	r0, sp, #116	; 0x74
 8005cfa:	f001 fe41 	bl	8007980 <__match>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	f43f aecc 	beq.w	8005a9c <_strtod_l+0xbc>
 8005d04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b28      	cmp	r3, #40	; 0x28
 8005d0a:	d12d      	bne.n	8005d68 <_strtod_l+0x388>
 8005d0c:	4999      	ldr	r1, [pc, #612]	; (8005f74 <_strtod_l+0x594>)
 8005d0e:	aa20      	add	r2, sp, #128	; 0x80
 8005d10:	a81d      	add	r0, sp, #116	; 0x74
 8005d12:	f001 fe49 	bl	80079a8 <__hexnan>
 8005d16:	2805      	cmp	r0, #5
 8005d18:	d126      	bne.n	8005d68 <_strtod_l+0x388>
 8005d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d1c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005d20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005d24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005d28:	e69c      	b.n	8005a64 <_strtod_l+0x84>
 8005d2a:	210a      	movs	r1, #10
 8005d2c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005d30:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005d34:	e7b9      	b.n	8005caa <_strtod_l+0x2ca>
 8005d36:	2b6e      	cmp	r3, #110	; 0x6e
 8005d38:	e7db      	b.n	8005cf2 <_strtod_l+0x312>
 8005d3a:	498f      	ldr	r1, [pc, #572]	; (8005f78 <_strtod_l+0x598>)
 8005d3c:	a81d      	add	r0, sp, #116	; 0x74
 8005d3e:	f001 fe1f 	bl	8007980 <__match>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	f43f aeaa 	beq.w	8005a9c <_strtod_l+0xbc>
 8005d48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d4a:	498c      	ldr	r1, [pc, #560]	; (8005f7c <_strtod_l+0x59c>)
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	a81d      	add	r0, sp, #116	; 0x74
 8005d50:	931d      	str	r3, [sp, #116]	; 0x74
 8005d52:	f001 fe15 	bl	8007980 <__match>
 8005d56:	b910      	cbnz	r0, 8005d5e <_strtod_l+0x37e>
 8005d58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	931d      	str	r3, [sp, #116]	; 0x74
 8005d5e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005f8c <_strtod_l+0x5ac>
 8005d62:	f04f 0a00 	mov.w	sl, #0
 8005d66:	e67d      	b.n	8005a64 <_strtod_l+0x84>
 8005d68:	4885      	ldr	r0, [pc, #532]	; (8005f80 <_strtod_l+0x5a0>)
 8005d6a:	f002 fdb5 	bl	80088d8 <nan>
 8005d6e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005d72:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005d76:	e675      	b.n	8005a64 <_strtod_l+0x84>
 8005d78:	9b07      	ldr	r3, [sp, #28]
 8005d7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d7c:	1af3      	subs	r3, r6, r3
 8005d7e:	2f00      	cmp	r7, #0
 8005d80:	bf08      	it	eq
 8005d82:	462f      	moveq	r7, r5
 8005d84:	2d10      	cmp	r5, #16
 8005d86:	9308      	str	r3, [sp, #32]
 8005d88:	46a8      	mov	r8, r5
 8005d8a:	bfa8      	it	ge
 8005d8c:	f04f 0810 	movge.w	r8, #16
 8005d90:	f7fa fbd8 	bl	8000544 <__aeabi_ui2d>
 8005d94:	2d09      	cmp	r5, #9
 8005d96:	4682      	mov	sl, r0
 8005d98:	468b      	mov	fp, r1
 8005d9a:	dd13      	ble.n	8005dc4 <_strtod_l+0x3e4>
 8005d9c:	4b79      	ldr	r3, [pc, #484]	; (8005f84 <_strtod_l+0x5a4>)
 8005d9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005da2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005da6:	f7fa fc47 	bl	8000638 <__aeabi_dmul>
 8005daa:	4682      	mov	sl, r0
 8005dac:	4648      	mov	r0, r9
 8005dae:	468b      	mov	fp, r1
 8005db0:	f7fa fbc8 	bl	8000544 <__aeabi_ui2d>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4650      	mov	r0, sl
 8005dba:	4659      	mov	r1, fp
 8005dbc:	f7fa fa86 	bl	80002cc <__adddf3>
 8005dc0:	4682      	mov	sl, r0
 8005dc2:	468b      	mov	fp, r1
 8005dc4:	2d0f      	cmp	r5, #15
 8005dc6:	dc38      	bgt.n	8005e3a <_strtod_l+0x45a>
 8005dc8:	9b08      	ldr	r3, [sp, #32]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f43f ae4a 	beq.w	8005a64 <_strtod_l+0x84>
 8005dd0:	dd24      	ble.n	8005e1c <_strtod_l+0x43c>
 8005dd2:	2b16      	cmp	r3, #22
 8005dd4:	dc0b      	bgt.n	8005dee <_strtod_l+0x40e>
 8005dd6:	4d6b      	ldr	r5, [pc, #428]	; (8005f84 <_strtod_l+0x5a4>)
 8005dd8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005ddc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005de0:	4652      	mov	r2, sl
 8005de2:	465b      	mov	r3, fp
 8005de4:	f7fa fc28 	bl	8000638 <__aeabi_dmul>
 8005de8:	4682      	mov	sl, r0
 8005dea:	468b      	mov	fp, r1
 8005dec:	e63a      	b.n	8005a64 <_strtod_l+0x84>
 8005dee:	9a08      	ldr	r2, [sp, #32]
 8005df0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005df4:	4293      	cmp	r3, r2
 8005df6:	db20      	blt.n	8005e3a <_strtod_l+0x45a>
 8005df8:	4c62      	ldr	r4, [pc, #392]	; (8005f84 <_strtod_l+0x5a4>)
 8005dfa:	f1c5 050f 	rsb	r5, r5, #15
 8005dfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005e02:	4652      	mov	r2, sl
 8005e04:	465b      	mov	r3, fp
 8005e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e0a:	f7fa fc15 	bl	8000638 <__aeabi_dmul>
 8005e0e:	9b08      	ldr	r3, [sp, #32]
 8005e10:	1b5d      	subs	r5, r3, r5
 8005e12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005e16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005e1a:	e7e3      	b.n	8005de4 <_strtod_l+0x404>
 8005e1c:	9b08      	ldr	r3, [sp, #32]
 8005e1e:	3316      	adds	r3, #22
 8005e20:	db0b      	blt.n	8005e3a <_strtod_l+0x45a>
 8005e22:	9b07      	ldr	r3, [sp, #28]
 8005e24:	4a57      	ldr	r2, [pc, #348]	; (8005f84 <_strtod_l+0x5a4>)
 8005e26:	1b9e      	subs	r6, r3, r6
 8005e28:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005e2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e30:	4650      	mov	r0, sl
 8005e32:	4659      	mov	r1, fp
 8005e34:	f7fa fd2a 	bl	800088c <__aeabi_ddiv>
 8005e38:	e7d6      	b.n	8005de8 <_strtod_l+0x408>
 8005e3a:	9b08      	ldr	r3, [sp, #32]
 8005e3c:	eba5 0808 	sub.w	r8, r5, r8
 8005e40:	4498      	add	r8, r3
 8005e42:	f1b8 0f00 	cmp.w	r8, #0
 8005e46:	dd71      	ble.n	8005f2c <_strtod_l+0x54c>
 8005e48:	f018 030f 	ands.w	r3, r8, #15
 8005e4c:	d00a      	beq.n	8005e64 <_strtod_l+0x484>
 8005e4e:	494d      	ldr	r1, [pc, #308]	; (8005f84 <_strtod_l+0x5a4>)
 8005e50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e54:	4652      	mov	r2, sl
 8005e56:	465b      	mov	r3, fp
 8005e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e5c:	f7fa fbec 	bl	8000638 <__aeabi_dmul>
 8005e60:	4682      	mov	sl, r0
 8005e62:	468b      	mov	fp, r1
 8005e64:	f038 080f 	bics.w	r8, r8, #15
 8005e68:	d04d      	beq.n	8005f06 <_strtod_l+0x526>
 8005e6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005e6e:	dd22      	ble.n	8005eb6 <_strtod_l+0x4d6>
 8005e70:	2500      	movs	r5, #0
 8005e72:	462e      	mov	r6, r5
 8005e74:	9509      	str	r5, [sp, #36]	; 0x24
 8005e76:	9507      	str	r5, [sp, #28]
 8005e78:	2322      	movs	r3, #34	; 0x22
 8005e7a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005f8c <_strtod_l+0x5ac>
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	f04f 0a00 	mov.w	sl, #0
 8005e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f43f adec 	beq.w	8005a64 <_strtod_l+0x84>
 8005e8c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f001 fe92 	bl	8007bb8 <_Bfree>
 8005e94:	9907      	ldr	r1, [sp, #28]
 8005e96:	4620      	mov	r0, r4
 8005e98:	f001 fe8e 	bl	8007bb8 <_Bfree>
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f001 fe8a 	bl	8007bb8 <_Bfree>
 8005ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f001 fe86 	bl	8007bb8 <_Bfree>
 8005eac:	4629      	mov	r1, r5
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f001 fe82 	bl	8007bb8 <_Bfree>
 8005eb4:	e5d6      	b.n	8005a64 <_strtod_l+0x84>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	4659      	mov	r1, fp
 8005ec0:	4699      	mov	r9, r3
 8005ec2:	f1b8 0f01 	cmp.w	r8, #1
 8005ec6:	dc21      	bgt.n	8005f0c <_strtod_l+0x52c>
 8005ec8:	b10b      	cbz	r3, 8005ece <_strtod_l+0x4ee>
 8005eca:	4682      	mov	sl, r0
 8005ecc:	468b      	mov	fp, r1
 8005ece:	4b2e      	ldr	r3, [pc, #184]	; (8005f88 <_strtod_l+0x5a8>)
 8005ed0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005ed4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005ed8:	4652      	mov	r2, sl
 8005eda:	465b      	mov	r3, fp
 8005edc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005ee0:	f7fa fbaa 	bl	8000638 <__aeabi_dmul>
 8005ee4:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <_strtod_l+0x5ac>)
 8005ee6:	460a      	mov	r2, r1
 8005ee8:	400b      	ands	r3, r1
 8005eea:	4929      	ldr	r1, [pc, #164]	; (8005f90 <_strtod_l+0x5b0>)
 8005eec:	428b      	cmp	r3, r1
 8005eee:	4682      	mov	sl, r0
 8005ef0:	d8be      	bhi.n	8005e70 <_strtod_l+0x490>
 8005ef2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005ef6:	428b      	cmp	r3, r1
 8005ef8:	bf86      	itte	hi
 8005efa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005f94 <_strtod_l+0x5b4>
 8005efe:	f04f 3aff 	movhi.w	sl, #4294967295
 8005f02:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005f06:	2300      	movs	r3, #0
 8005f08:	9304      	str	r3, [sp, #16]
 8005f0a:	e081      	b.n	8006010 <_strtod_l+0x630>
 8005f0c:	f018 0f01 	tst.w	r8, #1
 8005f10:	d007      	beq.n	8005f22 <_strtod_l+0x542>
 8005f12:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <_strtod_l+0x5a8>)
 8005f14:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1c:	f7fa fb8c 	bl	8000638 <__aeabi_dmul>
 8005f20:	2301      	movs	r3, #1
 8005f22:	f109 0901 	add.w	r9, r9, #1
 8005f26:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f2a:	e7ca      	b.n	8005ec2 <_strtod_l+0x4e2>
 8005f2c:	d0eb      	beq.n	8005f06 <_strtod_l+0x526>
 8005f2e:	f1c8 0800 	rsb	r8, r8, #0
 8005f32:	f018 020f 	ands.w	r2, r8, #15
 8005f36:	d00a      	beq.n	8005f4e <_strtod_l+0x56e>
 8005f38:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <_strtod_l+0x5a4>)
 8005f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f3e:	4650      	mov	r0, sl
 8005f40:	4659      	mov	r1, fp
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f7fa fca1 	bl	800088c <__aeabi_ddiv>
 8005f4a:	4682      	mov	sl, r0
 8005f4c:	468b      	mov	fp, r1
 8005f4e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005f52:	d0d8      	beq.n	8005f06 <_strtod_l+0x526>
 8005f54:	f1b8 0f1f 	cmp.w	r8, #31
 8005f58:	dd1e      	ble.n	8005f98 <_strtod_l+0x5b8>
 8005f5a:	2500      	movs	r5, #0
 8005f5c:	462e      	mov	r6, r5
 8005f5e:	9509      	str	r5, [sp, #36]	; 0x24
 8005f60:	9507      	str	r5, [sp, #28]
 8005f62:	2322      	movs	r3, #34	; 0x22
 8005f64:	f04f 0a00 	mov.w	sl, #0
 8005f68:	f04f 0b00 	mov.w	fp, #0
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	e789      	b.n	8005e84 <_strtod_l+0x4a4>
 8005f70:	080094f9 	.word	0x080094f9
 8005f74:	0800953c 	.word	0x0800953c
 8005f78:	080094f1 	.word	0x080094f1
 8005f7c:	0800967c 	.word	0x0800967c
 8005f80:	08009938 	.word	0x08009938
 8005f84:	08009818 	.word	0x08009818
 8005f88:	080097f0 	.word	0x080097f0
 8005f8c:	7ff00000 	.word	0x7ff00000
 8005f90:	7ca00000 	.word	0x7ca00000
 8005f94:	7fefffff 	.word	0x7fefffff
 8005f98:	f018 0310 	ands.w	r3, r8, #16
 8005f9c:	bf18      	it	ne
 8005f9e:	236a      	movne	r3, #106	; 0x6a
 8005fa0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006358 <_strtod_l+0x978>
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	4650      	mov	r0, sl
 8005fa8:	4659      	mov	r1, fp
 8005faa:	2300      	movs	r3, #0
 8005fac:	f018 0f01 	tst.w	r8, #1
 8005fb0:	d004      	beq.n	8005fbc <_strtod_l+0x5dc>
 8005fb2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005fb6:	f7fa fb3f 	bl	8000638 <__aeabi_dmul>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005fc0:	f109 0908 	add.w	r9, r9, #8
 8005fc4:	d1f2      	bne.n	8005fac <_strtod_l+0x5cc>
 8005fc6:	b10b      	cbz	r3, 8005fcc <_strtod_l+0x5ec>
 8005fc8:	4682      	mov	sl, r0
 8005fca:	468b      	mov	fp, r1
 8005fcc:	9b04      	ldr	r3, [sp, #16]
 8005fce:	b1bb      	cbz	r3, 8006000 <_strtod_l+0x620>
 8005fd0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005fd4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	4659      	mov	r1, fp
 8005fdc:	dd10      	ble.n	8006000 <_strtod_l+0x620>
 8005fde:	2b1f      	cmp	r3, #31
 8005fe0:	f340 8128 	ble.w	8006234 <_strtod_l+0x854>
 8005fe4:	2b34      	cmp	r3, #52	; 0x34
 8005fe6:	bfde      	ittt	le
 8005fe8:	3b20      	suble	r3, #32
 8005fea:	f04f 32ff 	movle.w	r2, #4294967295
 8005fee:	fa02 f303 	lslle.w	r3, r2, r3
 8005ff2:	f04f 0a00 	mov.w	sl, #0
 8005ff6:	bfcc      	ite	gt
 8005ff8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005ffc:	ea03 0b01 	andle.w	fp, r3, r1
 8006000:	2200      	movs	r2, #0
 8006002:	2300      	movs	r3, #0
 8006004:	4650      	mov	r0, sl
 8006006:	4659      	mov	r1, fp
 8006008:	f7fa fd7e 	bl	8000b08 <__aeabi_dcmpeq>
 800600c:	2800      	cmp	r0, #0
 800600e:	d1a4      	bne.n	8005f5a <_strtod_l+0x57a>
 8006010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006016:	462b      	mov	r3, r5
 8006018:	463a      	mov	r2, r7
 800601a:	4620      	mov	r0, r4
 800601c:	f001 fe38 	bl	8007c90 <__s2b>
 8006020:	9009      	str	r0, [sp, #36]	; 0x24
 8006022:	2800      	cmp	r0, #0
 8006024:	f43f af24 	beq.w	8005e70 <_strtod_l+0x490>
 8006028:	9b07      	ldr	r3, [sp, #28]
 800602a:	1b9e      	subs	r6, r3, r6
 800602c:	9b08      	ldr	r3, [sp, #32]
 800602e:	2b00      	cmp	r3, #0
 8006030:	bfb4      	ite	lt
 8006032:	4633      	movlt	r3, r6
 8006034:	2300      	movge	r3, #0
 8006036:	9310      	str	r3, [sp, #64]	; 0x40
 8006038:	9b08      	ldr	r3, [sp, #32]
 800603a:	2500      	movs	r5, #0
 800603c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006040:	9318      	str	r3, [sp, #96]	; 0x60
 8006042:	462e      	mov	r6, r5
 8006044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006046:	4620      	mov	r0, r4
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	f001 fd75 	bl	8007b38 <_Balloc>
 800604e:	9007      	str	r0, [sp, #28]
 8006050:	2800      	cmp	r0, #0
 8006052:	f43f af11 	beq.w	8005e78 <_strtod_l+0x498>
 8006056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	3202      	adds	r2, #2
 800605c:	f103 010c 	add.w	r1, r3, #12
 8006060:	0092      	lsls	r2, r2, #2
 8006062:	300c      	adds	r0, #12
 8006064:	f001 fd5a 	bl	8007b1c <memcpy>
 8006068:	ec4b ab10 	vmov	d0, sl, fp
 800606c:	aa20      	add	r2, sp, #128	; 0x80
 800606e:	a91f      	add	r1, sp, #124	; 0x7c
 8006070:	4620      	mov	r0, r4
 8006072:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006076:	f002 f947 	bl	8008308 <__d2b>
 800607a:	901e      	str	r0, [sp, #120]	; 0x78
 800607c:	2800      	cmp	r0, #0
 800607e:	f43f aefb 	beq.w	8005e78 <_strtod_l+0x498>
 8006082:	2101      	movs	r1, #1
 8006084:	4620      	mov	r0, r4
 8006086:	f001 fe9d 	bl	8007dc4 <__i2b>
 800608a:	4606      	mov	r6, r0
 800608c:	2800      	cmp	r0, #0
 800608e:	f43f aef3 	beq.w	8005e78 <_strtod_l+0x498>
 8006092:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006094:	9904      	ldr	r1, [sp, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	bfab      	itete	ge
 800609a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800609c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800609e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80060a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80060a4:	bfac      	ite	ge
 80060a6:	eb03 0902 	addge.w	r9, r3, r2
 80060aa:	1ad7      	sublt	r7, r2, r3
 80060ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060ae:	eba3 0801 	sub.w	r8, r3, r1
 80060b2:	4490      	add	r8, r2
 80060b4:	4ba3      	ldr	r3, [pc, #652]	; (8006344 <_strtod_l+0x964>)
 80060b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80060ba:	4598      	cmp	r8, r3
 80060bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80060c0:	f280 80cc 	bge.w	800625c <_strtod_l+0x87c>
 80060c4:	eba3 0308 	sub.w	r3, r3, r8
 80060c8:	2b1f      	cmp	r3, #31
 80060ca:	eba2 0203 	sub.w	r2, r2, r3
 80060ce:	f04f 0101 	mov.w	r1, #1
 80060d2:	f300 80b6 	bgt.w	8006242 <_strtod_l+0x862>
 80060d6:	fa01 f303 	lsl.w	r3, r1, r3
 80060da:	9311      	str	r3, [sp, #68]	; 0x44
 80060dc:	2300      	movs	r3, #0
 80060de:	930c      	str	r3, [sp, #48]	; 0x30
 80060e0:	eb09 0802 	add.w	r8, r9, r2
 80060e4:	9b04      	ldr	r3, [sp, #16]
 80060e6:	45c1      	cmp	r9, r8
 80060e8:	4417      	add	r7, r2
 80060ea:	441f      	add	r7, r3
 80060ec:	464b      	mov	r3, r9
 80060ee:	bfa8      	it	ge
 80060f0:	4643      	movge	r3, r8
 80060f2:	42bb      	cmp	r3, r7
 80060f4:	bfa8      	it	ge
 80060f6:	463b      	movge	r3, r7
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bfc2      	ittt	gt
 80060fc:	eba8 0803 	subgt.w	r8, r8, r3
 8006100:	1aff      	subgt	r7, r7, r3
 8006102:	eba9 0903 	subgt.w	r9, r9, r3
 8006106:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	dd17      	ble.n	800613c <_strtod_l+0x75c>
 800610c:	4631      	mov	r1, r6
 800610e:	461a      	mov	r2, r3
 8006110:	4620      	mov	r0, r4
 8006112:	f001 ff13 	bl	8007f3c <__pow5mult>
 8006116:	4606      	mov	r6, r0
 8006118:	2800      	cmp	r0, #0
 800611a:	f43f aead 	beq.w	8005e78 <_strtod_l+0x498>
 800611e:	4601      	mov	r1, r0
 8006120:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006122:	4620      	mov	r0, r4
 8006124:	f001 fe64 	bl	8007df0 <__multiply>
 8006128:	900f      	str	r0, [sp, #60]	; 0x3c
 800612a:	2800      	cmp	r0, #0
 800612c:	f43f aea4 	beq.w	8005e78 <_strtod_l+0x498>
 8006130:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006132:	4620      	mov	r0, r4
 8006134:	f001 fd40 	bl	8007bb8 <_Bfree>
 8006138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800613a:	931e      	str	r3, [sp, #120]	; 0x78
 800613c:	f1b8 0f00 	cmp.w	r8, #0
 8006140:	f300 8091 	bgt.w	8006266 <_strtod_l+0x886>
 8006144:	9b08      	ldr	r3, [sp, #32]
 8006146:	2b00      	cmp	r3, #0
 8006148:	dd08      	ble.n	800615c <_strtod_l+0x77c>
 800614a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800614c:	9907      	ldr	r1, [sp, #28]
 800614e:	4620      	mov	r0, r4
 8006150:	f001 fef4 	bl	8007f3c <__pow5mult>
 8006154:	9007      	str	r0, [sp, #28]
 8006156:	2800      	cmp	r0, #0
 8006158:	f43f ae8e 	beq.w	8005e78 <_strtod_l+0x498>
 800615c:	2f00      	cmp	r7, #0
 800615e:	dd08      	ble.n	8006172 <_strtod_l+0x792>
 8006160:	9907      	ldr	r1, [sp, #28]
 8006162:	463a      	mov	r2, r7
 8006164:	4620      	mov	r0, r4
 8006166:	f001 ff43 	bl	8007ff0 <__lshift>
 800616a:	9007      	str	r0, [sp, #28]
 800616c:	2800      	cmp	r0, #0
 800616e:	f43f ae83 	beq.w	8005e78 <_strtod_l+0x498>
 8006172:	f1b9 0f00 	cmp.w	r9, #0
 8006176:	dd08      	ble.n	800618a <_strtod_l+0x7aa>
 8006178:	4631      	mov	r1, r6
 800617a:	464a      	mov	r2, r9
 800617c:	4620      	mov	r0, r4
 800617e:	f001 ff37 	bl	8007ff0 <__lshift>
 8006182:	4606      	mov	r6, r0
 8006184:	2800      	cmp	r0, #0
 8006186:	f43f ae77 	beq.w	8005e78 <_strtod_l+0x498>
 800618a:	9a07      	ldr	r2, [sp, #28]
 800618c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800618e:	4620      	mov	r0, r4
 8006190:	f001 ffb6 	bl	8008100 <__mdiff>
 8006194:	4605      	mov	r5, r0
 8006196:	2800      	cmp	r0, #0
 8006198:	f43f ae6e 	beq.w	8005e78 <_strtod_l+0x498>
 800619c:	68c3      	ldr	r3, [r0, #12]
 800619e:	930f      	str	r3, [sp, #60]	; 0x3c
 80061a0:	2300      	movs	r3, #0
 80061a2:	60c3      	str	r3, [r0, #12]
 80061a4:	4631      	mov	r1, r6
 80061a6:	f001 ff8f 	bl	80080c8 <__mcmp>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	da65      	bge.n	800627a <_strtod_l+0x89a>
 80061ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061b0:	ea53 030a 	orrs.w	r3, r3, sl
 80061b4:	f040 8087 	bne.w	80062c6 <_strtod_l+0x8e6>
 80061b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f040 8082 	bne.w	80062c6 <_strtod_l+0x8e6>
 80061c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061c6:	0d1b      	lsrs	r3, r3, #20
 80061c8:	051b      	lsls	r3, r3, #20
 80061ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80061ce:	d97a      	bls.n	80062c6 <_strtod_l+0x8e6>
 80061d0:	696b      	ldr	r3, [r5, #20]
 80061d2:	b913      	cbnz	r3, 80061da <_strtod_l+0x7fa>
 80061d4:	692b      	ldr	r3, [r5, #16]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	dd75      	ble.n	80062c6 <_strtod_l+0x8e6>
 80061da:	4629      	mov	r1, r5
 80061dc:	2201      	movs	r2, #1
 80061de:	4620      	mov	r0, r4
 80061e0:	f001 ff06 	bl	8007ff0 <__lshift>
 80061e4:	4631      	mov	r1, r6
 80061e6:	4605      	mov	r5, r0
 80061e8:	f001 ff6e 	bl	80080c8 <__mcmp>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	dd6a      	ble.n	80062c6 <_strtod_l+0x8e6>
 80061f0:	9904      	ldr	r1, [sp, #16]
 80061f2:	4a55      	ldr	r2, [pc, #340]	; (8006348 <_strtod_l+0x968>)
 80061f4:	465b      	mov	r3, fp
 80061f6:	2900      	cmp	r1, #0
 80061f8:	f000 8085 	beq.w	8006306 <_strtod_l+0x926>
 80061fc:	ea02 010b 	and.w	r1, r2, fp
 8006200:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006204:	dc7f      	bgt.n	8006306 <_strtod_l+0x926>
 8006206:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800620a:	f77f aeaa 	ble.w	8005f62 <_strtod_l+0x582>
 800620e:	4a4f      	ldr	r2, [pc, #316]	; (800634c <_strtod_l+0x96c>)
 8006210:	2300      	movs	r3, #0
 8006212:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006216:	4650      	mov	r0, sl
 8006218:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800621c:	4659      	mov	r1, fp
 800621e:	f7fa fa0b 	bl	8000638 <__aeabi_dmul>
 8006222:	460b      	mov	r3, r1
 8006224:	4303      	orrs	r3, r0
 8006226:	bf08      	it	eq
 8006228:	2322      	moveq	r3, #34	; 0x22
 800622a:	4682      	mov	sl, r0
 800622c:	468b      	mov	fp, r1
 800622e:	bf08      	it	eq
 8006230:	6023      	streq	r3, [r4, #0]
 8006232:	e62b      	b.n	8005e8c <_strtod_l+0x4ac>
 8006234:	f04f 32ff 	mov.w	r2, #4294967295
 8006238:	fa02 f303 	lsl.w	r3, r2, r3
 800623c:	ea03 0a0a 	and.w	sl, r3, sl
 8006240:	e6de      	b.n	8006000 <_strtod_l+0x620>
 8006242:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006246:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800624a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800624e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006252:	fa01 f308 	lsl.w	r3, r1, r8
 8006256:	930c      	str	r3, [sp, #48]	; 0x30
 8006258:	9111      	str	r1, [sp, #68]	; 0x44
 800625a:	e741      	b.n	80060e0 <_strtod_l+0x700>
 800625c:	2300      	movs	r3, #0
 800625e:	930c      	str	r3, [sp, #48]	; 0x30
 8006260:	2301      	movs	r3, #1
 8006262:	9311      	str	r3, [sp, #68]	; 0x44
 8006264:	e73c      	b.n	80060e0 <_strtod_l+0x700>
 8006266:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006268:	4642      	mov	r2, r8
 800626a:	4620      	mov	r0, r4
 800626c:	f001 fec0 	bl	8007ff0 <__lshift>
 8006270:	901e      	str	r0, [sp, #120]	; 0x78
 8006272:	2800      	cmp	r0, #0
 8006274:	f47f af66 	bne.w	8006144 <_strtod_l+0x764>
 8006278:	e5fe      	b.n	8005e78 <_strtod_l+0x498>
 800627a:	465f      	mov	r7, fp
 800627c:	d16e      	bne.n	800635c <_strtod_l+0x97c>
 800627e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006280:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006284:	b342      	cbz	r2, 80062d8 <_strtod_l+0x8f8>
 8006286:	4a32      	ldr	r2, [pc, #200]	; (8006350 <_strtod_l+0x970>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d128      	bne.n	80062de <_strtod_l+0x8fe>
 800628c:	9b04      	ldr	r3, [sp, #16]
 800628e:	4650      	mov	r0, sl
 8006290:	b1eb      	cbz	r3, 80062ce <_strtod_l+0x8ee>
 8006292:	4a2d      	ldr	r2, [pc, #180]	; (8006348 <_strtod_l+0x968>)
 8006294:	403a      	ands	r2, r7
 8006296:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800629a:	f04f 31ff 	mov.w	r1, #4294967295
 800629e:	d819      	bhi.n	80062d4 <_strtod_l+0x8f4>
 80062a0:	0d12      	lsrs	r2, r2, #20
 80062a2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80062a6:	fa01 f303 	lsl.w	r3, r1, r3
 80062aa:	4298      	cmp	r0, r3
 80062ac:	d117      	bne.n	80062de <_strtod_l+0x8fe>
 80062ae:	4b29      	ldr	r3, [pc, #164]	; (8006354 <_strtod_l+0x974>)
 80062b0:	429f      	cmp	r7, r3
 80062b2:	d102      	bne.n	80062ba <_strtod_l+0x8da>
 80062b4:	3001      	adds	r0, #1
 80062b6:	f43f addf 	beq.w	8005e78 <_strtod_l+0x498>
 80062ba:	4b23      	ldr	r3, [pc, #140]	; (8006348 <_strtod_l+0x968>)
 80062bc:	403b      	ands	r3, r7
 80062be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80062c2:	f04f 0a00 	mov.w	sl, #0
 80062c6:	9b04      	ldr	r3, [sp, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1a0      	bne.n	800620e <_strtod_l+0x82e>
 80062cc:	e5de      	b.n	8005e8c <_strtod_l+0x4ac>
 80062ce:	f04f 33ff 	mov.w	r3, #4294967295
 80062d2:	e7ea      	b.n	80062aa <_strtod_l+0x8ca>
 80062d4:	460b      	mov	r3, r1
 80062d6:	e7e8      	b.n	80062aa <_strtod_l+0x8ca>
 80062d8:	ea53 030a 	orrs.w	r3, r3, sl
 80062dc:	d088      	beq.n	80061f0 <_strtod_l+0x810>
 80062de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062e0:	b1db      	cbz	r3, 800631a <_strtod_l+0x93a>
 80062e2:	423b      	tst	r3, r7
 80062e4:	d0ef      	beq.n	80062c6 <_strtod_l+0x8e6>
 80062e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062e8:	9a04      	ldr	r2, [sp, #16]
 80062ea:	4650      	mov	r0, sl
 80062ec:	4659      	mov	r1, fp
 80062ee:	b1c3      	cbz	r3, 8006322 <_strtod_l+0x942>
 80062f0:	f7ff fb58 	bl	80059a4 <sulp>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062fc:	f7f9 ffe6 	bl	80002cc <__adddf3>
 8006300:	4682      	mov	sl, r0
 8006302:	468b      	mov	fp, r1
 8006304:	e7df      	b.n	80062c6 <_strtod_l+0x8e6>
 8006306:	4013      	ands	r3, r2
 8006308:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800630c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006310:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006314:	f04f 3aff 	mov.w	sl, #4294967295
 8006318:	e7d5      	b.n	80062c6 <_strtod_l+0x8e6>
 800631a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800631c:	ea13 0f0a 	tst.w	r3, sl
 8006320:	e7e0      	b.n	80062e4 <_strtod_l+0x904>
 8006322:	f7ff fb3f 	bl	80059a4 <sulp>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800632e:	f7f9 ffcb 	bl	80002c8 <__aeabi_dsub>
 8006332:	2200      	movs	r2, #0
 8006334:	2300      	movs	r3, #0
 8006336:	4682      	mov	sl, r0
 8006338:	468b      	mov	fp, r1
 800633a:	f7fa fbe5 	bl	8000b08 <__aeabi_dcmpeq>
 800633e:	2800      	cmp	r0, #0
 8006340:	d0c1      	beq.n	80062c6 <_strtod_l+0x8e6>
 8006342:	e60e      	b.n	8005f62 <_strtod_l+0x582>
 8006344:	fffffc02 	.word	0xfffffc02
 8006348:	7ff00000 	.word	0x7ff00000
 800634c:	39500000 	.word	0x39500000
 8006350:	000fffff 	.word	0x000fffff
 8006354:	7fefffff 	.word	0x7fefffff
 8006358:	08009550 	.word	0x08009550
 800635c:	4631      	mov	r1, r6
 800635e:	4628      	mov	r0, r5
 8006360:	f002 f82e 	bl	80083c0 <__ratio>
 8006364:	ec59 8b10 	vmov	r8, r9, d0
 8006368:	ee10 0a10 	vmov	r0, s0
 800636c:	2200      	movs	r2, #0
 800636e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006372:	4649      	mov	r1, r9
 8006374:	f7fa fbdc 	bl	8000b30 <__aeabi_dcmple>
 8006378:	2800      	cmp	r0, #0
 800637a:	d07c      	beq.n	8006476 <_strtod_l+0xa96>
 800637c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d04c      	beq.n	800641c <_strtod_l+0xa3c>
 8006382:	4b95      	ldr	r3, [pc, #596]	; (80065d8 <_strtod_l+0xbf8>)
 8006384:	2200      	movs	r2, #0
 8006386:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800638a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80065d8 <_strtod_l+0xbf8>
 800638e:	f04f 0800 	mov.w	r8, #0
 8006392:	4b92      	ldr	r3, [pc, #584]	; (80065dc <_strtod_l+0xbfc>)
 8006394:	403b      	ands	r3, r7
 8006396:	9311      	str	r3, [sp, #68]	; 0x44
 8006398:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800639a:	4b91      	ldr	r3, [pc, #580]	; (80065e0 <_strtod_l+0xc00>)
 800639c:	429a      	cmp	r2, r3
 800639e:	f040 80b2 	bne.w	8006506 <_strtod_l+0xb26>
 80063a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063aa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80063ae:	ec4b ab10 	vmov	d0, sl, fp
 80063b2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80063b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80063ba:	f001 ff29 	bl	8008210 <__ulp>
 80063be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063c2:	ec53 2b10 	vmov	r2, r3, d0
 80063c6:	f7fa f937 	bl	8000638 <__aeabi_dmul>
 80063ca:	4652      	mov	r2, sl
 80063cc:	465b      	mov	r3, fp
 80063ce:	f7f9 ff7d 	bl	80002cc <__adddf3>
 80063d2:	460b      	mov	r3, r1
 80063d4:	4981      	ldr	r1, [pc, #516]	; (80065dc <_strtod_l+0xbfc>)
 80063d6:	4a83      	ldr	r2, [pc, #524]	; (80065e4 <_strtod_l+0xc04>)
 80063d8:	4019      	ands	r1, r3
 80063da:	4291      	cmp	r1, r2
 80063dc:	4682      	mov	sl, r0
 80063de:	d95e      	bls.n	800649e <_strtod_l+0xabe>
 80063e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d103      	bne.n	80063f2 <_strtod_l+0xa12>
 80063ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ec:	3301      	adds	r3, #1
 80063ee:	f43f ad43 	beq.w	8005e78 <_strtod_l+0x498>
 80063f2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80065f0 <_strtod_l+0xc10>
 80063f6:	f04f 3aff 	mov.w	sl, #4294967295
 80063fa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80063fc:	4620      	mov	r0, r4
 80063fe:	f001 fbdb 	bl	8007bb8 <_Bfree>
 8006402:	9907      	ldr	r1, [sp, #28]
 8006404:	4620      	mov	r0, r4
 8006406:	f001 fbd7 	bl	8007bb8 <_Bfree>
 800640a:	4631      	mov	r1, r6
 800640c:	4620      	mov	r0, r4
 800640e:	f001 fbd3 	bl	8007bb8 <_Bfree>
 8006412:	4629      	mov	r1, r5
 8006414:	4620      	mov	r0, r4
 8006416:	f001 fbcf 	bl	8007bb8 <_Bfree>
 800641a:	e613      	b.n	8006044 <_strtod_l+0x664>
 800641c:	f1ba 0f00 	cmp.w	sl, #0
 8006420:	d11b      	bne.n	800645a <_strtod_l+0xa7a>
 8006422:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006426:	b9f3      	cbnz	r3, 8006466 <_strtod_l+0xa86>
 8006428:	4b6b      	ldr	r3, [pc, #428]	; (80065d8 <_strtod_l+0xbf8>)
 800642a:	2200      	movs	r2, #0
 800642c:	4640      	mov	r0, r8
 800642e:	4649      	mov	r1, r9
 8006430:	f7fa fb74 	bl	8000b1c <__aeabi_dcmplt>
 8006434:	b9d0      	cbnz	r0, 800646c <_strtod_l+0xa8c>
 8006436:	4640      	mov	r0, r8
 8006438:	4649      	mov	r1, r9
 800643a:	4b6b      	ldr	r3, [pc, #428]	; (80065e8 <_strtod_l+0xc08>)
 800643c:	2200      	movs	r2, #0
 800643e:	f7fa f8fb 	bl	8000638 <__aeabi_dmul>
 8006442:	4680      	mov	r8, r0
 8006444:	4689      	mov	r9, r1
 8006446:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800644a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800644e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006450:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006454:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006458:	e79b      	b.n	8006392 <_strtod_l+0x9b2>
 800645a:	f1ba 0f01 	cmp.w	sl, #1
 800645e:	d102      	bne.n	8006466 <_strtod_l+0xa86>
 8006460:	2f00      	cmp	r7, #0
 8006462:	f43f ad7e 	beq.w	8005f62 <_strtod_l+0x582>
 8006466:	4b61      	ldr	r3, [pc, #388]	; (80065ec <_strtod_l+0xc0c>)
 8006468:	2200      	movs	r2, #0
 800646a:	e78c      	b.n	8006386 <_strtod_l+0x9a6>
 800646c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80065e8 <_strtod_l+0xc08>
 8006470:	f04f 0800 	mov.w	r8, #0
 8006474:	e7e7      	b.n	8006446 <_strtod_l+0xa66>
 8006476:	4b5c      	ldr	r3, [pc, #368]	; (80065e8 <_strtod_l+0xc08>)
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	2200      	movs	r2, #0
 800647e:	f7fa f8db 	bl	8000638 <__aeabi_dmul>
 8006482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006484:	4680      	mov	r8, r0
 8006486:	4689      	mov	r9, r1
 8006488:	b933      	cbnz	r3, 8006498 <_strtod_l+0xab8>
 800648a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800648e:	9012      	str	r0, [sp, #72]	; 0x48
 8006490:	9313      	str	r3, [sp, #76]	; 0x4c
 8006492:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006496:	e7dd      	b.n	8006454 <_strtod_l+0xa74>
 8006498:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800649c:	e7f9      	b.n	8006492 <_strtod_l+0xab2>
 800649e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80064a2:	9b04      	ldr	r3, [sp, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1a8      	bne.n	80063fa <_strtod_l+0xa1a>
 80064a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80064ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80064ae:	0d1b      	lsrs	r3, r3, #20
 80064b0:	051b      	lsls	r3, r3, #20
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d1a1      	bne.n	80063fa <_strtod_l+0xa1a>
 80064b6:	4640      	mov	r0, r8
 80064b8:	4649      	mov	r1, r9
 80064ba:	f7fa fc1d 	bl	8000cf8 <__aeabi_d2lz>
 80064be:	f7fa f88d 	bl	80005dc <__aeabi_l2d>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4640      	mov	r0, r8
 80064c8:	4649      	mov	r1, r9
 80064ca:	f7f9 fefd 	bl	80002c8 <__aeabi_dsub>
 80064ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064d4:	ea43 030a 	orr.w	r3, r3, sl
 80064d8:	4313      	orrs	r3, r2
 80064da:	4680      	mov	r8, r0
 80064dc:	4689      	mov	r9, r1
 80064de:	d053      	beq.n	8006588 <_strtod_l+0xba8>
 80064e0:	a335      	add	r3, pc, #212	; (adr r3, 80065b8 <_strtod_l+0xbd8>)
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	f7fa fb19 	bl	8000b1c <__aeabi_dcmplt>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	f47f acce 	bne.w	8005e8c <_strtod_l+0x4ac>
 80064f0:	a333      	add	r3, pc, #204	; (adr r3, 80065c0 <_strtod_l+0xbe0>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	4640      	mov	r0, r8
 80064f8:	4649      	mov	r1, r9
 80064fa:	f7fa fb2d 	bl	8000b58 <__aeabi_dcmpgt>
 80064fe:	2800      	cmp	r0, #0
 8006500:	f43f af7b 	beq.w	80063fa <_strtod_l+0xa1a>
 8006504:	e4c2      	b.n	8005e8c <_strtod_l+0x4ac>
 8006506:	9b04      	ldr	r3, [sp, #16]
 8006508:	b333      	cbz	r3, 8006558 <_strtod_l+0xb78>
 800650a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800650c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006510:	d822      	bhi.n	8006558 <_strtod_l+0xb78>
 8006512:	a32d      	add	r3, pc, #180	; (adr r3, 80065c8 <_strtod_l+0xbe8>)
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	4640      	mov	r0, r8
 800651a:	4649      	mov	r1, r9
 800651c:	f7fa fb08 	bl	8000b30 <__aeabi_dcmple>
 8006520:	b1a0      	cbz	r0, 800654c <_strtod_l+0xb6c>
 8006522:	4649      	mov	r1, r9
 8006524:	4640      	mov	r0, r8
 8006526:	f7fa fb5f 	bl	8000be8 <__aeabi_d2uiz>
 800652a:	2801      	cmp	r0, #1
 800652c:	bf38      	it	cc
 800652e:	2001      	movcc	r0, #1
 8006530:	f7fa f808 	bl	8000544 <__aeabi_ui2d>
 8006534:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006536:	4680      	mov	r8, r0
 8006538:	4689      	mov	r9, r1
 800653a:	bb13      	cbnz	r3, 8006582 <_strtod_l+0xba2>
 800653c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006540:	9014      	str	r0, [sp, #80]	; 0x50
 8006542:	9315      	str	r3, [sp, #84]	; 0x54
 8006544:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006548:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800654c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800654e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006550:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	930d      	str	r3, [sp, #52]	; 0x34
 8006558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800655c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006560:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006564:	f001 fe54 	bl	8008210 <__ulp>
 8006568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800656c:	ec53 2b10 	vmov	r2, r3, d0
 8006570:	f7fa f862 	bl	8000638 <__aeabi_dmul>
 8006574:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006578:	f7f9 fea8 	bl	80002cc <__adddf3>
 800657c:	4682      	mov	sl, r0
 800657e:	468b      	mov	fp, r1
 8006580:	e78f      	b.n	80064a2 <_strtod_l+0xac2>
 8006582:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006586:	e7dd      	b.n	8006544 <_strtod_l+0xb64>
 8006588:	a311      	add	r3, pc, #68	; (adr r3, 80065d0 <_strtod_l+0xbf0>)
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f7fa fac5 	bl	8000b1c <__aeabi_dcmplt>
 8006592:	e7b4      	b.n	80064fe <_strtod_l+0xb1e>
 8006594:	2300      	movs	r3, #0
 8006596:	930e      	str	r3, [sp, #56]	; 0x38
 8006598:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800659a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	f7ff ba65 	b.w	8005a6c <_strtod_l+0x8c>
 80065a2:	2b65      	cmp	r3, #101	; 0x65
 80065a4:	f43f ab5d 	beq.w	8005c62 <_strtod_l+0x282>
 80065a8:	2b45      	cmp	r3, #69	; 0x45
 80065aa:	f43f ab5a 	beq.w	8005c62 <_strtod_l+0x282>
 80065ae:	2201      	movs	r2, #1
 80065b0:	f7ff bb92 	b.w	8005cd8 <_strtod_l+0x2f8>
 80065b4:	f3af 8000 	nop.w
 80065b8:	94a03595 	.word	0x94a03595
 80065bc:	3fdfffff 	.word	0x3fdfffff
 80065c0:	35afe535 	.word	0x35afe535
 80065c4:	3fe00000 	.word	0x3fe00000
 80065c8:	ffc00000 	.word	0xffc00000
 80065cc:	41dfffff 	.word	0x41dfffff
 80065d0:	94a03595 	.word	0x94a03595
 80065d4:	3fcfffff 	.word	0x3fcfffff
 80065d8:	3ff00000 	.word	0x3ff00000
 80065dc:	7ff00000 	.word	0x7ff00000
 80065e0:	7fe00000 	.word	0x7fe00000
 80065e4:	7c9fffff 	.word	0x7c9fffff
 80065e8:	3fe00000 	.word	0x3fe00000
 80065ec:	bff00000 	.word	0xbff00000
 80065f0:	7fefffff 	.word	0x7fefffff

080065f4 <_strtod_r>:
 80065f4:	4b01      	ldr	r3, [pc, #4]	; (80065fc <_strtod_r+0x8>)
 80065f6:	f7ff b9f3 	b.w	80059e0 <_strtod_l>
 80065fa:	bf00      	nop
 80065fc:	20000078 	.word	0x20000078

08006600 <_strtol_l.isra.0>:
 8006600:	2b01      	cmp	r3, #1
 8006602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006606:	d001      	beq.n	800660c <_strtol_l.isra.0+0xc>
 8006608:	2b24      	cmp	r3, #36	; 0x24
 800660a:	d906      	bls.n	800661a <_strtol_l.isra.0+0x1a>
 800660c:	f7fe faf8 	bl	8004c00 <__errno>
 8006610:	2316      	movs	r3, #22
 8006612:	6003      	str	r3, [r0, #0]
 8006614:	2000      	movs	r0, #0
 8006616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661a:	4f3a      	ldr	r7, [pc, #232]	; (8006704 <_strtol_l.isra.0+0x104>)
 800661c:	468e      	mov	lr, r1
 800661e:	4676      	mov	r6, lr
 8006620:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006624:	5de5      	ldrb	r5, [r4, r7]
 8006626:	f015 0508 	ands.w	r5, r5, #8
 800662a:	d1f8      	bne.n	800661e <_strtol_l.isra.0+0x1e>
 800662c:	2c2d      	cmp	r4, #45	; 0x2d
 800662e:	d134      	bne.n	800669a <_strtol_l.isra.0+0x9a>
 8006630:	f89e 4000 	ldrb.w	r4, [lr]
 8006634:	f04f 0801 	mov.w	r8, #1
 8006638:	f106 0e02 	add.w	lr, r6, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d05c      	beq.n	80066fa <_strtol_l.isra.0+0xfa>
 8006640:	2b10      	cmp	r3, #16
 8006642:	d10c      	bne.n	800665e <_strtol_l.isra.0+0x5e>
 8006644:	2c30      	cmp	r4, #48	; 0x30
 8006646:	d10a      	bne.n	800665e <_strtol_l.isra.0+0x5e>
 8006648:	f89e 4000 	ldrb.w	r4, [lr]
 800664c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006650:	2c58      	cmp	r4, #88	; 0x58
 8006652:	d14d      	bne.n	80066f0 <_strtol_l.isra.0+0xf0>
 8006654:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006658:	2310      	movs	r3, #16
 800665a:	f10e 0e02 	add.w	lr, lr, #2
 800665e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006662:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006666:	2600      	movs	r6, #0
 8006668:	fbbc f9f3 	udiv	r9, ip, r3
 800666c:	4635      	mov	r5, r6
 800666e:	fb03 ca19 	mls	sl, r3, r9, ip
 8006672:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006676:	2f09      	cmp	r7, #9
 8006678:	d818      	bhi.n	80066ac <_strtol_l.isra.0+0xac>
 800667a:	463c      	mov	r4, r7
 800667c:	42a3      	cmp	r3, r4
 800667e:	dd24      	ble.n	80066ca <_strtol_l.isra.0+0xca>
 8006680:	2e00      	cmp	r6, #0
 8006682:	db1f      	blt.n	80066c4 <_strtol_l.isra.0+0xc4>
 8006684:	45a9      	cmp	r9, r5
 8006686:	d31d      	bcc.n	80066c4 <_strtol_l.isra.0+0xc4>
 8006688:	d101      	bne.n	800668e <_strtol_l.isra.0+0x8e>
 800668a:	45a2      	cmp	sl, r4
 800668c:	db1a      	blt.n	80066c4 <_strtol_l.isra.0+0xc4>
 800668e:	fb05 4503 	mla	r5, r5, r3, r4
 8006692:	2601      	movs	r6, #1
 8006694:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006698:	e7eb      	b.n	8006672 <_strtol_l.isra.0+0x72>
 800669a:	2c2b      	cmp	r4, #43	; 0x2b
 800669c:	bf08      	it	eq
 800669e:	f89e 4000 	ldrbeq.w	r4, [lr]
 80066a2:	46a8      	mov	r8, r5
 80066a4:	bf08      	it	eq
 80066a6:	f106 0e02 	addeq.w	lr, r6, #2
 80066aa:	e7c7      	b.n	800663c <_strtol_l.isra.0+0x3c>
 80066ac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80066b0:	2f19      	cmp	r7, #25
 80066b2:	d801      	bhi.n	80066b8 <_strtol_l.isra.0+0xb8>
 80066b4:	3c37      	subs	r4, #55	; 0x37
 80066b6:	e7e1      	b.n	800667c <_strtol_l.isra.0+0x7c>
 80066b8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80066bc:	2f19      	cmp	r7, #25
 80066be:	d804      	bhi.n	80066ca <_strtol_l.isra.0+0xca>
 80066c0:	3c57      	subs	r4, #87	; 0x57
 80066c2:	e7db      	b.n	800667c <_strtol_l.isra.0+0x7c>
 80066c4:	f04f 36ff 	mov.w	r6, #4294967295
 80066c8:	e7e4      	b.n	8006694 <_strtol_l.isra.0+0x94>
 80066ca:	2e00      	cmp	r6, #0
 80066cc:	da05      	bge.n	80066da <_strtol_l.isra.0+0xda>
 80066ce:	2322      	movs	r3, #34	; 0x22
 80066d0:	6003      	str	r3, [r0, #0]
 80066d2:	4665      	mov	r5, ip
 80066d4:	b942      	cbnz	r2, 80066e8 <_strtol_l.isra.0+0xe8>
 80066d6:	4628      	mov	r0, r5
 80066d8:	e79d      	b.n	8006616 <_strtol_l.isra.0+0x16>
 80066da:	f1b8 0f00 	cmp.w	r8, #0
 80066de:	d000      	beq.n	80066e2 <_strtol_l.isra.0+0xe2>
 80066e0:	426d      	negs	r5, r5
 80066e2:	2a00      	cmp	r2, #0
 80066e4:	d0f7      	beq.n	80066d6 <_strtol_l.isra.0+0xd6>
 80066e6:	b10e      	cbz	r6, 80066ec <_strtol_l.isra.0+0xec>
 80066e8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80066ec:	6011      	str	r1, [r2, #0]
 80066ee:	e7f2      	b.n	80066d6 <_strtol_l.isra.0+0xd6>
 80066f0:	2430      	movs	r4, #48	; 0x30
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1b3      	bne.n	800665e <_strtol_l.isra.0+0x5e>
 80066f6:	2308      	movs	r3, #8
 80066f8:	e7b1      	b.n	800665e <_strtol_l.isra.0+0x5e>
 80066fa:	2c30      	cmp	r4, #48	; 0x30
 80066fc:	d0a4      	beq.n	8006648 <_strtol_l.isra.0+0x48>
 80066fe:	230a      	movs	r3, #10
 8006700:	e7ad      	b.n	800665e <_strtol_l.isra.0+0x5e>
 8006702:	bf00      	nop
 8006704:	08009579 	.word	0x08009579

08006708 <_strtol_r>:
 8006708:	f7ff bf7a 	b.w	8006600 <_strtol_l.isra.0>

0800670c <quorem>:
 800670c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	6903      	ldr	r3, [r0, #16]
 8006712:	690c      	ldr	r4, [r1, #16]
 8006714:	42a3      	cmp	r3, r4
 8006716:	4607      	mov	r7, r0
 8006718:	f2c0 8081 	blt.w	800681e <quorem+0x112>
 800671c:	3c01      	subs	r4, #1
 800671e:	f101 0814 	add.w	r8, r1, #20
 8006722:	f100 0514 	add.w	r5, r0, #20
 8006726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800672a:	9301      	str	r3, [sp, #4]
 800672c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006734:	3301      	adds	r3, #1
 8006736:	429a      	cmp	r2, r3
 8006738:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800673c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006740:	fbb2 f6f3 	udiv	r6, r2, r3
 8006744:	d331      	bcc.n	80067aa <quorem+0x9e>
 8006746:	f04f 0e00 	mov.w	lr, #0
 800674a:	4640      	mov	r0, r8
 800674c:	46ac      	mov	ip, r5
 800674e:	46f2      	mov	sl, lr
 8006750:	f850 2b04 	ldr.w	r2, [r0], #4
 8006754:	b293      	uxth	r3, r2
 8006756:	fb06 e303 	mla	r3, r6, r3, lr
 800675a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800675e:	b29b      	uxth	r3, r3
 8006760:	ebaa 0303 	sub.w	r3, sl, r3
 8006764:	0c12      	lsrs	r2, r2, #16
 8006766:	f8dc a000 	ldr.w	sl, [ip]
 800676a:	fb06 e202 	mla	r2, r6, r2, lr
 800676e:	fa13 f38a 	uxtah	r3, r3, sl
 8006772:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006776:	fa1f fa82 	uxth.w	sl, r2
 800677a:	f8dc 2000 	ldr.w	r2, [ip]
 800677e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006782:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006786:	b29b      	uxth	r3, r3
 8006788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800678c:	4581      	cmp	r9, r0
 800678e:	f84c 3b04 	str.w	r3, [ip], #4
 8006792:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006796:	d2db      	bcs.n	8006750 <quorem+0x44>
 8006798:	f855 300b 	ldr.w	r3, [r5, fp]
 800679c:	b92b      	cbnz	r3, 80067aa <quorem+0x9e>
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	3b04      	subs	r3, #4
 80067a2:	429d      	cmp	r5, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	d32e      	bcc.n	8006806 <quorem+0xfa>
 80067a8:	613c      	str	r4, [r7, #16]
 80067aa:	4638      	mov	r0, r7
 80067ac:	f001 fc8c 	bl	80080c8 <__mcmp>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	db24      	blt.n	80067fe <quorem+0xf2>
 80067b4:	3601      	adds	r6, #1
 80067b6:	4628      	mov	r0, r5
 80067b8:	f04f 0c00 	mov.w	ip, #0
 80067bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80067c0:	f8d0 e000 	ldr.w	lr, [r0]
 80067c4:	b293      	uxth	r3, r2
 80067c6:	ebac 0303 	sub.w	r3, ip, r3
 80067ca:	0c12      	lsrs	r2, r2, #16
 80067cc:	fa13 f38e 	uxtah	r3, r3, lr
 80067d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067d8:	b29b      	uxth	r3, r3
 80067da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067de:	45c1      	cmp	r9, r8
 80067e0:	f840 3b04 	str.w	r3, [r0], #4
 80067e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067e8:	d2e8      	bcs.n	80067bc <quorem+0xb0>
 80067ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067f2:	b922      	cbnz	r2, 80067fe <quorem+0xf2>
 80067f4:	3b04      	subs	r3, #4
 80067f6:	429d      	cmp	r5, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	d30a      	bcc.n	8006812 <quorem+0x106>
 80067fc:	613c      	str	r4, [r7, #16]
 80067fe:	4630      	mov	r0, r6
 8006800:	b003      	add	sp, #12
 8006802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	3b04      	subs	r3, #4
 800680a:	2a00      	cmp	r2, #0
 800680c:	d1cc      	bne.n	80067a8 <quorem+0x9c>
 800680e:	3c01      	subs	r4, #1
 8006810:	e7c7      	b.n	80067a2 <quorem+0x96>
 8006812:	6812      	ldr	r2, [r2, #0]
 8006814:	3b04      	subs	r3, #4
 8006816:	2a00      	cmp	r2, #0
 8006818:	d1f0      	bne.n	80067fc <quorem+0xf0>
 800681a:	3c01      	subs	r4, #1
 800681c:	e7eb      	b.n	80067f6 <quorem+0xea>
 800681e:	2000      	movs	r0, #0
 8006820:	e7ee      	b.n	8006800 <quorem+0xf4>
 8006822:	0000      	movs	r0, r0
 8006824:	0000      	movs	r0, r0
	...

08006828 <_dtoa_r>:
 8006828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	ed2d 8b02 	vpush	{d8}
 8006830:	ec57 6b10 	vmov	r6, r7, d0
 8006834:	b095      	sub	sp, #84	; 0x54
 8006836:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006838:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800683c:	9105      	str	r1, [sp, #20]
 800683e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006842:	4604      	mov	r4, r0
 8006844:	9209      	str	r2, [sp, #36]	; 0x24
 8006846:	930f      	str	r3, [sp, #60]	; 0x3c
 8006848:	b975      	cbnz	r5, 8006868 <_dtoa_r+0x40>
 800684a:	2010      	movs	r0, #16
 800684c:	f001 f94c 	bl	8007ae8 <malloc>
 8006850:	4602      	mov	r2, r0
 8006852:	6260      	str	r0, [r4, #36]	; 0x24
 8006854:	b920      	cbnz	r0, 8006860 <_dtoa_r+0x38>
 8006856:	4bb2      	ldr	r3, [pc, #712]	; (8006b20 <_dtoa_r+0x2f8>)
 8006858:	21ea      	movs	r1, #234	; 0xea
 800685a:	48b2      	ldr	r0, [pc, #712]	; (8006b24 <_dtoa_r+0x2fc>)
 800685c:	f002 f874 	bl	8008948 <__assert_func>
 8006860:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006864:	6005      	str	r5, [r0, #0]
 8006866:	60c5      	str	r5, [r0, #12]
 8006868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800686a:	6819      	ldr	r1, [r3, #0]
 800686c:	b151      	cbz	r1, 8006884 <_dtoa_r+0x5c>
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	604a      	str	r2, [r1, #4]
 8006872:	2301      	movs	r3, #1
 8006874:	4093      	lsls	r3, r2
 8006876:	608b      	str	r3, [r1, #8]
 8006878:	4620      	mov	r0, r4
 800687a:	f001 f99d 	bl	8007bb8 <_Bfree>
 800687e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	1e3b      	subs	r3, r7, #0
 8006886:	bfb9      	ittee	lt
 8006888:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800688c:	9303      	strlt	r3, [sp, #12]
 800688e:	2300      	movge	r3, #0
 8006890:	f8c8 3000 	strge.w	r3, [r8]
 8006894:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006898:	4ba3      	ldr	r3, [pc, #652]	; (8006b28 <_dtoa_r+0x300>)
 800689a:	bfbc      	itt	lt
 800689c:	2201      	movlt	r2, #1
 800689e:	f8c8 2000 	strlt.w	r2, [r8]
 80068a2:	ea33 0309 	bics.w	r3, r3, r9
 80068a6:	d11b      	bne.n	80068e0 <_dtoa_r+0xb8>
 80068a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068b4:	4333      	orrs	r3, r6
 80068b6:	f000 857a 	beq.w	80073ae <_dtoa_r+0xb86>
 80068ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068bc:	b963      	cbnz	r3, 80068d8 <_dtoa_r+0xb0>
 80068be:	4b9b      	ldr	r3, [pc, #620]	; (8006b2c <_dtoa_r+0x304>)
 80068c0:	e024      	b.n	800690c <_dtoa_r+0xe4>
 80068c2:	4b9b      	ldr	r3, [pc, #620]	; (8006b30 <_dtoa_r+0x308>)
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	9800      	ldr	r0, [sp, #0]
 80068ce:	b015      	add	sp, #84	; 0x54
 80068d0:	ecbd 8b02 	vpop	{d8}
 80068d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d8:	4b94      	ldr	r3, [pc, #592]	; (8006b2c <_dtoa_r+0x304>)
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	3303      	adds	r3, #3
 80068de:	e7f3      	b.n	80068c8 <_dtoa_r+0xa0>
 80068e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068e4:	2200      	movs	r2, #0
 80068e6:	ec51 0b17 	vmov	r0, r1, d7
 80068ea:	2300      	movs	r3, #0
 80068ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80068f0:	f7fa f90a 	bl	8000b08 <__aeabi_dcmpeq>
 80068f4:	4680      	mov	r8, r0
 80068f6:	b158      	cbz	r0, 8006910 <_dtoa_r+0xe8>
 80068f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068fa:	2301      	movs	r3, #1
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8551 	beq.w	80073a8 <_dtoa_r+0xb80>
 8006906:	488b      	ldr	r0, [pc, #556]	; (8006b34 <_dtoa_r+0x30c>)
 8006908:	6018      	str	r0, [r3, #0]
 800690a:	1e43      	subs	r3, r0, #1
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	e7dd      	b.n	80068cc <_dtoa_r+0xa4>
 8006910:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006914:	aa12      	add	r2, sp, #72	; 0x48
 8006916:	a913      	add	r1, sp, #76	; 0x4c
 8006918:	4620      	mov	r0, r4
 800691a:	f001 fcf5 	bl	8008308 <__d2b>
 800691e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006922:	4683      	mov	fp, r0
 8006924:	2d00      	cmp	r5, #0
 8006926:	d07c      	beq.n	8006a22 <_dtoa_r+0x1fa>
 8006928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800692a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800692e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006932:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006936:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800693a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800693e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006942:	4b7d      	ldr	r3, [pc, #500]	; (8006b38 <_dtoa_r+0x310>)
 8006944:	2200      	movs	r2, #0
 8006946:	4630      	mov	r0, r6
 8006948:	4639      	mov	r1, r7
 800694a:	f7f9 fcbd 	bl	80002c8 <__aeabi_dsub>
 800694e:	a36e      	add	r3, pc, #440	; (adr r3, 8006b08 <_dtoa_r+0x2e0>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f7f9 fe70 	bl	8000638 <__aeabi_dmul>
 8006958:	a36d      	add	r3, pc, #436	; (adr r3, 8006b10 <_dtoa_r+0x2e8>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f7f9 fcb5 	bl	80002cc <__adddf3>
 8006962:	4606      	mov	r6, r0
 8006964:	4628      	mov	r0, r5
 8006966:	460f      	mov	r7, r1
 8006968:	f7f9 fdfc 	bl	8000564 <__aeabi_i2d>
 800696c:	a36a      	add	r3, pc, #424	; (adr r3, 8006b18 <_dtoa_r+0x2f0>)
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	f7f9 fe61 	bl	8000638 <__aeabi_dmul>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4630      	mov	r0, r6
 800697c:	4639      	mov	r1, r7
 800697e:	f7f9 fca5 	bl	80002cc <__adddf3>
 8006982:	4606      	mov	r6, r0
 8006984:	460f      	mov	r7, r1
 8006986:	f7fa f907 	bl	8000b98 <__aeabi_d2iz>
 800698a:	2200      	movs	r2, #0
 800698c:	4682      	mov	sl, r0
 800698e:	2300      	movs	r3, #0
 8006990:	4630      	mov	r0, r6
 8006992:	4639      	mov	r1, r7
 8006994:	f7fa f8c2 	bl	8000b1c <__aeabi_dcmplt>
 8006998:	b148      	cbz	r0, 80069ae <_dtoa_r+0x186>
 800699a:	4650      	mov	r0, sl
 800699c:	f7f9 fde2 	bl	8000564 <__aeabi_i2d>
 80069a0:	4632      	mov	r2, r6
 80069a2:	463b      	mov	r3, r7
 80069a4:	f7fa f8b0 	bl	8000b08 <__aeabi_dcmpeq>
 80069a8:	b908      	cbnz	r0, 80069ae <_dtoa_r+0x186>
 80069aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ae:	f1ba 0f16 	cmp.w	sl, #22
 80069b2:	d854      	bhi.n	8006a5e <_dtoa_r+0x236>
 80069b4:	4b61      	ldr	r3, [pc, #388]	; (8006b3c <_dtoa_r+0x314>)
 80069b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069c2:	f7fa f8ab 	bl	8000b1c <__aeabi_dcmplt>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d04b      	beq.n	8006a62 <_dtoa_r+0x23a>
 80069ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ce:	2300      	movs	r3, #0
 80069d0:	930e      	str	r3, [sp, #56]	; 0x38
 80069d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069d4:	1b5d      	subs	r5, r3, r5
 80069d6:	1e6b      	subs	r3, r5, #1
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	bf43      	ittte	mi
 80069dc:	2300      	movmi	r3, #0
 80069de:	f1c5 0801 	rsbmi	r8, r5, #1
 80069e2:	9304      	strmi	r3, [sp, #16]
 80069e4:	f04f 0800 	movpl.w	r8, #0
 80069e8:	f1ba 0f00 	cmp.w	sl, #0
 80069ec:	db3b      	blt.n	8006a66 <_dtoa_r+0x23e>
 80069ee:	9b04      	ldr	r3, [sp, #16]
 80069f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80069f4:	4453      	add	r3, sl
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	2300      	movs	r3, #0
 80069fa:	9306      	str	r3, [sp, #24]
 80069fc:	9b05      	ldr	r3, [sp, #20]
 80069fe:	2b09      	cmp	r3, #9
 8006a00:	d869      	bhi.n	8006ad6 <_dtoa_r+0x2ae>
 8006a02:	2b05      	cmp	r3, #5
 8006a04:	bfc4      	itt	gt
 8006a06:	3b04      	subgt	r3, #4
 8006a08:	9305      	strgt	r3, [sp, #20]
 8006a0a:	9b05      	ldr	r3, [sp, #20]
 8006a0c:	f1a3 0302 	sub.w	r3, r3, #2
 8006a10:	bfcc      	ite	gt
 8006a12:	2500      	movgt	r5, #0
 8006a14:	2501      	movle	r5, #1
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d869      	bhi.n	8006aee <_dtoa_r+0x2c6>
 8006a1a:	e8df f003 	tbb	[pc, r3]
 8006a1e:	4e2c      	.short	0x4e2c
 8006a20:	5a4c      	.short	0x5a4c
 8006a22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006a26:	441d      	add	r5, r3
 8006a28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	bfc1      	itttt	gt
 8006a30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006a38:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a40:	bfda      	itte	le
 8006a42:	f1c3 0320 	rsble	r3, r3, #32
 8006a46:	fa06 f003 	lslle.w	r0, r6, r3
 8006a4a:	4318      	orrgt	r0, r3
 8006a4c:	f7f9 fd7a 	bl	8000544 <__aeabi_ui2d>
 8006a50:	2301      	movs	r3, #1
 8006a52:	4606      	mov	r6, r0
 8006a54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006a58:	3d01      	subs	r5, #1
 8006a5a:	9310      	str	r3, [sp, #64]	; 0x40
 8006a5c:	e771      	b.n	8006942 <_dtoa_r+0x11a>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e7b6      	b.n	80069d0 <_dtoa_r+0x1a8>
 8006a62:	900e      	str	r0, [sp, #56]	; 0x38
 8006a64:	e7b5      	b.n	80069d2 <_dtoa_r+0x1aa>
 8006a66:	f1ca 0300 	rsb	r3, sl, #0
 8006a6a:	9306      	str	r3, [sp, #24]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	eba8 080a 	sub.w	r8, r8, sl
 8006a72:	930d      	str	r3, [sp, #52]	; 0x34
 8006a74:	e7c2      	b.n	80069fc <_dtoa_r+0x1d4>
 8006a76:	2300      	movs	r3, #0
 8006a78:	9308      	str	r3, [sp, #32]
 8006a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dc39      	bgt.n	8006af4 <_dtoa_r+0x2cc>
 8006a80:	f04f 0901 	mov.w	r9, #1
 8006a84:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a88:	464b      	mov	r3, r9
 8006a8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006a8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a90:	2200      	movs	r2, #0
 8006a92:	6042      	str	r2, [r0, #4]
 8006a94:	2204      	movs	r2, #4
 8006a96:	f102 0614 	add.w	r6, r2, #20
 8006a9a:	429e      	cmp	r6, r3
 8006a9c:	6841      	ldr	r1, [r0, #4]
 8006a9e:	d92f      	bls.n	8006b00 <_dtoa_r+0x2d8>
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f001 f849 	bl	8007b38 <_Balloc>
 8006aa6:	9000      	str	r0, [sp, #0]
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d14b      	bne.n	8006b44 <_dtoa_r+0x31c>
 8006aac:	4b24      	ldr	r3, [pc, #144]	; (8006b40 <_dtoa_r+0x318>)
 8006aae:	4602      	mov	r2, r0
 8006ab0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ab4:	e6d1      	b.n	800685a <_dtoa_r+0x32>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e7de      	b.n	8006a78 <_dtoa_r+0x250>
 8006aba:	2300      	movs	r3, #0
 8006abc:	9308      	str	r3, [sp, #32]
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	eb0a 0903 	add.w	r9, sl, r3
 8006ac4:	f109 0301 	add.w	r3, r9, #1
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	bfb8      	it	lt
 8006ace:	2301      	movlt	r3, #1
 8006ad0:	e7dd      	b.n	8006a8e <_dtoa_r+0x266>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e7f2      	b.n	8006abc <_dtoa_r+0x294>
 8006ad6:	2501      	movs	r5, #1
 8006ad8:	2300      	movs	r3, #0
 8006ada:	9305      	str	r3, [sp, #20]
 8006adc:	9508      	str	r5, [sp, #32]
 8006ade:	f04f 39ff 	mov.w	r9, #4294967295
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ae8:	2312      	movs	r3, #18
 8006aea:	9209      	str	r2, [sp, #36]	; 0x24
 8006aec:	e7cf      	b.n	8006a8e <_dtoa_r+0x266>
 8006aee:	2301      	movs	r3, #1
 8006af0:	9308      	str	r3, [sp, #32]
 8006af2:	e7f4      	b.n	8006ade <_dtoa_r+0x2b6>
 8006af4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006af8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006afc:	464b      	mov	r3, r9
 8006afe:	e7c6      	b.n	8006a8e <_dtoa_r+0x266>
 8006b00:	3101      	adds	r1, #1
 8006b02:	6041      	str	r1, [r0, #4]
 8006b04:	0052      	lsls	r2, r2, #1
 8006b06:	e7c6      	b.n	8006a96 <_dtoa_r+0x26e>
 8006b08:	636f4361 	.word	0x636f4361
 8006b0c:	3fd287a7 	.word	0x3fd287a7
 8006b10:	8b60c8b3 	.word	0x8b60c8b3
 8006b14:	3fc68a28 	.word	0x3fc68a28
 8006b18:	509f79fb 	.word	0x509f79fb
 8006b1c:	3fd34413 	.word	0x3fd34413
 8006b20:	08009686 	.word	0x08009686
 8006b24:	0800969d 	.word	0x0800969d
 8006b28:	7ff00000 	.word	0x7ff00000
 8006b2c:	08009682 	.word	0x08009682
 8006b30:	08009679 	.word	0x08009679
 8006b34:	080094fd 	.word	0x080094fd
 8006b38:	3ff80000 	.word	0x3ff80000
 8006b3c:	08009818 	.word	0x08009818
 8006b40:	080096fc 	.word	0x080096fc
 8006b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b46:	9a00      	ldr	r2, [sp, #0]
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	2b0e      	cmp	r3, #14
 8006b4e:	f200 80ad 	bhi.w	8006cac <_dtoa_r+0x484>
 8006b52:	2d00      	cmp	r5, #0
 8006b54:	f000 80aa 	beq.w	8006cac <_dtoa_r+0x484>
 8006b58:	f1ba 0f00 	cmp.w	sl, #0
 8006b5c:	dd36      	ble.n	8006bcc <_dtoa_r+0x3a4>
 8006b5e:	4ac3      	ldr	r2, [pc, #780]	; (8006e6c <_dtoa_r+0x644>)
 8006b60:	f00a 030f 	and.w	r3, sl, #15
 8006b64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b68:	ed93 7b00 	vldr	d7, [r3]
 8006b6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006b70:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006b74:	eeb0 8a47 	vmov.f32	s16, s14
 8006b78:	eef0 8a67 	vmov.f32	s17, s15
 8006b7c:	d016      	beq.n	8006bac <_dtoa_r+0x384>
 8006b7e:	4bbc      	ldr	r3, [pc, #752]	; (8006e70 <_dtoa_r+0x648>)
 8006b80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b88:	f7f9 fe80 	bl	800088c <__aeabi_ddiv>
 8006b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b90:	f007 070f 	and.w	r7, r7, #15
 8006b94:	2503      	movs	r5, #3
 8006b96:	4eb6      	ldr	r6, [pc, #728]	; (8006e70 <_dtoa_r+0x648>)
 8006b98:	b957      	cbnz	r7, 8006bb0 <_dtoa_r+0x388>
 8006b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b9e:	ec53 2b18 	vmov	r2, r3, d8
 8006ba2:	f7f9 fe73 	bl	800088c <__aeabi_ddiv>
 8006ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006baa:	e029      	b.n	8006c00 <_dtoa_r+0x3d8>
 8006bac:	2502      	movs	r5, #2
 8006bae:	e7f2      	b.n	8006b96 <_dtoa_r+0x36e>
 8006bb0:	07f9      	lsls	r1, r7, #31
 8006bb2:	d508      	bpl.n	8006bc6 <_dtoa_r+0x39e>
 8006bb4:	ec51 0b18 	vmov	r0, r1, d8
 8006bb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bbc:	f7f9 fd3c 	bl	8000638 <__aeabi_dmul>
 8006bc0:	ec41 0b18 	vmov	d8, r0, r1
 8006bc4:	3501      	adds	r5, #1
 8006bc6:	107f      	asrs	r7, r7, #1
 8006bc8:	3608      	adds	r6, #8
 8006bca:	e7e5      	b.n	8006b98 <_dtoa_r+0x370>
 8006bcc:	f000 80a6 	beq.w	8006d1c <_dtoa_r+0x4f4>
 8006bd0:	f1ca 0600 	rsb	r6, sl, #0
 8006bd4:	4ba5      	ldr	r3, [pc, #660]	; (8006e6c <_dtoa_r+0x644>)
 8006bd6:	4fa6      	ldr	r7, [pc, #664]	; (8006e70 <_dtoa_r+0x648>)
 8006bd8:	f006 020f 	and.w	r2, r6, #15
 8006bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006be8:	f7f9 fd26 	bl	8000638 <__aeabi_dmul>
 8006bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bf0:	1136      	asrs	r6, r6, #4
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2502      	movs	r5, #2
 8006bf6:	2e00      	cmp	r6, #0
 8006bf8:	f040 8085 	bne.w	8006d06 <_dtoa_r+0x4de>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1d2      	bne.n	8006ba6 <_dtoa_r+0x37e>
 8006c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 808c 	beq.w	8006d20 <_dtoa_r+0x4f8>
 8006c08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c0c:	4b99      	ldr	r3, [pc, #612]	; (8006e74 <_dtoa_r+0x64c>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	f7f9 ff82 	bl	8000b1c <__aeabi_dcmplt>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	f000 8081 	beq.w	8006d20 <_dtoa_r+0x4f8>
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d07d      	beq.n	8006d20 <_dtoa_r+0x4f8>
 8006c24:	f1b9 0f00 	cmp.w	r9, #0
 8006c28:	dd3c      	ble.n	8006ca4 <_dtoa_r+0x47c>
 8006c2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006c2e:	9307      	str	r3, [sp, #28]
 8006c30:	2200      	movs	r2, #0
 8006c32:	4b91      	ldr	r3, [pc, #580]	; (8006e78 <_dtoa_r+0x650>)
 8006c34:	4630      	mov	r0, r6
 8006c36:	4639      	mov	r1, r7
 8006c38:	f7f9 fcfe 	bl	8000638 <__aeabi_dmul>
 8006c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c40:	3501      	adds	r5, #1
 8006c42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006c46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f7f9 fc8a 	bl	8000564 <__aeabi_i2d>
 8006c50:	4632      	mov	r2, r6
 8006c52:	463b      	mov	r3, r7
 8006c54:	f7f9 fcf0 	bl	8000638 <__aeabi_dmul>
 8006c58:	4b88      	ldr	r3, [pc, #544]	; (8006e7c <_dtoa_r+0x654>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f7f9 fb36 	bl	80002cc <__adddf3>
 8006c60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c68:	9303      	str	r3, [sp, #12]
 8006c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d15c      	bne.n	8006d2a <_dtoa_r+0x502>
 8006c70:	4b83      	ldr	r3, [pc, #524]	; (8006e80 <_dtoa_r+0x658>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	4630      	mov	r0, r6
 8006c76:	4639      	mov	r1, r7
 8006c78:	f7f9 fb26 	bl	80002c8 <__aeabi_dsub>
 8006c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c80:	4606      	mov	r6, r0
 8006c82:	460f      	mov	r7, r1
 8006c84:	f7f9 ff68 	bl	8000b58 <__aeabi_dcmpgt>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f040 8296 	bne.w	80071ba <_dtoa_r+0x992>
 8006c8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006c92:	4630      	mov	r0, r6
 8006c94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c98:	4639      	mov	r1, r7
 8006c9a:	f7f9 ff3f 	bl	8000b1c <__aeabi_dcmplt>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f040 8288 	bne.w	80071b4 <_dtoa_r+0x98c>
 8006ca4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f2c0 8158 	blt.w	8006f64 <_dtoa_r+0x73c>
 8006cb4:	f1ba 0f0e 	cmp.w	sl, #14
 8006cb8:	f300 8154 	bgt.w	8006f64 <_dtoa_r+0x73c>
 8006cbc:	4b6b      	ldr	r3, [pc, #428]	; (8006e6c <_dtoa_r+0x644>)
 8006cbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006cc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f280 80e3 	bge.w	8006e94 <_dtoa_r+0x66c>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f300 80df 	bgt.w	8006e94 <_dtoa_r+0x66c>
 8006cd6:	f040 826d 	bne.w	80071b4 <_dtoa_r+0x98c>
 8006cda:	4b69      	ldr	r3, [pc, #420]	; (8006e80 <_dtoa_r+0x658>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4640      	mov	r0, r8
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	f7f9 fca9 	bl	8000638 <__aeabi_dmul>
 8006ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cea:	f7f9 ff2b 	bl	8000b44 <__aeabi_dcmpge>
 8006cee:	9e01      	ldr	r6, [sp, #4]
 8006cf0:	4637      	mov	r7, r6
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	f040 8243 	bne.w	800717e <_dtoa_r+0x956>
 8006cf8:	9d00      	ldr	r5, [sp, #0]
 8006cfa:	2331      	movs	r3, #49	; 0x31
 8006cfc:	f805 3b01 	strb.w	r3, [r5], #1
 8006d00:	f10a 0a01 	add.w	sl, sl, #1
 8006d04:	e23f      	b.n	8007186 <_dtoa_r+0x95e>
 8006d06:	07f2      	lsls	r2, r6, #31
 8006d08:	d505      	bpl.n	8006d16 <_dtoa_r+0x4ee>
 8006d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d0e:	f7f9 fc93 	bl	8000638 <__aeabi_dmul>
 8006d12:	3501      	adds	r5, #1
 8006d14:	2301      	movs	r3, #1
 8006d16:	1076      	asrs	r6, r6, #1
 8006d18:	3708      	adds	r7, #8
 8006d1a:	e76c      	b.n	8006bf6 <_dtoa_r+0x3ce>
 8006d1c:	2502      	movs	r5, #2
 8006d1e:	e76f      	b.n	8006c00 <_dtoa_r+0x3d8>
 8006d20:	9b01      	ldr	r3, [sp, #4]
 8006d22:	f8cd a01c 	str.w	sl, [sp, #28]
 8006d26:	930c      	str	r3, [sp, #48]	; 0x30
 8006d28:	e78d      	b.n	8006c46 <_dtoa_r+0x41e>
 8006d2a:	9900      	ldr	r1, [sp, #0]
 8006d2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d30:	4b4e      	ldr	r3, [pc, #312]	; (8006e6c <_dtoa_r+0x644>)
 8006d32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d36:	4401      	add	r1, r0
 8006d38:	9102      	str	r1, [sp, #8]
 8006d3a:	9908      	ldr	r1, [sp, #32]
 8006d3c:	eeb0 8a47 	vmov.f32	s16, s14
 8006d40:	eef0 8a67 	vmov.f32	s17, s15
 8006d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	d045      	beq.n	8006ddc <_dtoa_r+0x5b4>
 8006d50:	494c      	ldr	r1, [pc, #304]	; (8006e84 <_dtoa_r+0x65c>)
 8006d52:	2000      	movs	r0, #0
 8006d54:	f7f9 fd9a 	bl	800088c <__aeabi_ddiv>
 8006d58:	ec53 2b18 	vmov	r2, r3, d8
 8006d5c:	f7f9 fab4 	bl	80002c8 <__aeabi_dsub>
 8006d60:	9d00      	ldr	r5, [sp, #0]
 8006d62:	ec41 0b18 	vmov	d8, r0, r1
 8006d66:	4639      	mov	r1, r7
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f7f9 ff15 	bl	8000b98 <__aeabi_d2iz>
 8006d6e:	900c      	str	r0, [sp, #48]	; 0x30
 8006d70:	f7f9 fbf8 	bl	8000564 <__aeabi_i2d>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4630      	mov	r0, r6
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	f7f9 faa4 	bl	80002c8 <__aeabi_dsub>
 8006d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d82:	3330      	adds	r3, #48	; 0x30
 8006d84:	f805 3b01 	strb.w	r3, [r5], #1
 8006d88:	ec53 2b18 	vmov	r2, r3, d8
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	460f      	mov	r7, r1
 8006d90:	f7f9 fec4 	bl	8000b1c <__aeabi_dcmplt>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d165      	bne.n	8006e64 <_dtoa_r+0x63c>
 8006d98:	4632      	mov	r2, r6
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	4935      	ldr	r1, [pc, #212]	; (8006e74 <_dtoa_r+0x64c>)
 8006d9e:	2000      	movs	r0, #0
 8006da0:	f7f9 fa92 	bl	80002c8 <__aeabi_dsub>
 8006da4:	ec53 2b18 	vmov	r2, r3, d8
 8006da8:	f7f9 feb8 	bl	8000b1c <__aeabi_dcmplt>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	f040 80b9 	bne.w	8006f24 <_dtoa_r+0x6fc>
 8006db2:	9b02      	ldr	r3, [sp, #8]
 8006db4:	429d      	cmp	r5, r3
 8006db6:	f43f af75 	beq.w	8006ca4 <_dtoa_r+0x47c>
 8006dba:	4b2f      	ldr	r3, [pc, #188]	; (8006e78 <_dtoa_r+0x650>)
 8006dbc:	ec51 0b18 	vmov	r0, r1, d8
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f7f9 fc39 	bl	8000638 <__aeabi_dmul>
 8006dc6:	4b2c      	ldr	r3, [pc, #176]	; (8006e78 <_dtoa_r+0x650>)
 8006dc8:	ec41 0b18 	vmov	d8, r0, r1
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4630      	mov	r0, r6
 8006dd0:	4639      	mov	r1, r7
 8006dd2:	f7f9 fc31 	bl	8000638 <__aeabi_dmul>
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	460f      	mov	r7, r1
 8006dda:	e7c4      	b.n	8006d66 <_dtoa_r+0x53e>
 8006ddc:	ec51 0b17 	vmov	r0, r1, d7
 8006de0:	f7f9 fc2a 	bl	8000638 <__aeabi_dmul>
 8006de4:	9b02      	ldr	r3, [sp, #8]
 8006de6:	9d00      	ldr	r5, [sp, #0]
 8006de8:	930c      	str	r3, [sp, #48]	; 0x30
 8006dea:	ec41 0b18 	vmov	d8, r0, r1
 8006dee:	4639      	mov	r1, r7
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7f9 fed1 	bl	8000b98 <__aeabi_d2iz>
 8006df6:	9011      	str	r0, [sp, #68]	; 0x44
 8006df8:	f7f9 fbb4 	bl	8000564 <__aeabi_i2d>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4630      	mov	r0, r6
 8006e02:	4639      	mov	r1, r7
 8006e04:	f7f9 fa60 	bl	80002c8 <__aeabi_dsub>
 8006e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e0a:	3330      	adds	r3, #48	; 0x30
 8006e0c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	429d      	cmp	r5, r3
 8006e14:	4606      	mov	r6, r0
 8006e16:	460f      	mov	r7, r1
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	d134      	bne.n	8006e88 <_dtoa_r+0x660>
 8006e1e:	4b19      	ldr	r3, [pc, #100]	; (8006e84 <_dtoa_r+0x65c>)
 8006e20:	ec51 0b18 	vmov	r0, r1, d8
 8006e24:	f7f9 fa52 	bl	80002cc <__adddf3>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 fe92 	bl	8000b58 <__aeabi_dcmpgt>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d175      	bne.n	8006f24 <_dtoa_r+0x6fc>
 8006e38:	ec53 2b18 	vmov	r2, r3, d8
 8006e3c:	4911      	ldr	r1, [pc, #68]	; (8006e84 <_dtoa_r+0x65c>)
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f7f9 fa42 	bl	80002c8 <__aeabi_dsub>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fe66 	bl	8000b1c <__aeabi_dcmplt>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	f43f af27 	beq.w	8006ca4 <_dtoa_r+0x47c>
 8006e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e58:	1e6b      	subs	r3, r5, #1
 8006e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e60:	2b30      	cmp	r3, #48	; 0x30
 8006e62:	d0f8      	beq.n	8006e56 <_dtoa_r+0x62e>
 8006e64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006e68:	e04a      	b.n	8006f00 <_dtoa_r+0x6d8>
 8006e6a:	bf00      	nop
 8006e6c:	08009818 	.word	0x08009818
 8006e70:	080097f0 	.word	0x080097f0
 8006e74:	3ff00000 	.word	0x3ff00000
 8006e78:	40240000 	.word	0x40240000
 8006e7c:	401c0000 	.word	0x401c0000
 8006e80:	40140000 	.word	0x40140000
 8006e84:	3fe00000 	.word	0x3fe00000
 8006e88:	4baf      	ldr	r3, [pc, #700]	; (8007148 <_dtoa_r+0x920>)
 8006e8a:	f7f9 fbd5 	bl	8000638 <__aeabi_dmul>
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460f      	mov	r7, r1
 8006e92:	e7ac      	b.n	8006dee <_dtoa_r+0x5c6>
 8006e94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e98:	9d00      	ldr	r5, [sp, #0]
 8006e9a:	4642      	mov	r2, r8
 8006e9c:	464b      	mov	r3, r9
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	f7f9 fcf3 	bl	800088c <__aeabi_ddiv>
 8006ea6:	f7f9 fe77 	bl	8000b98 <__aeabi_d2iz>
 8006eaa:	9002      	str	r0, [sp, #8]
 8006eac:	f7f9 fb5a 	bl	8000564 <__aeabi_i2d>
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	f7f9 fbc0 	bl	8000638 <__aeabi_dmul>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	f7f9 fa02 	bl	80002c8 <__aeabi_dsub>
 8006ec4:	9e02      	ldr	r6, [sp, #8]
 8006ec6:	9f01      	ldr	r7, [sp, #4]
 8006ec8:	3630      	adds	r6, #48	; 0x30
 8006eca:	f805 6b01 	strb.w	r6, [r5], #1
 8006ece:	9e00      	ldr	r6, [sp, #0]
 8006ed0:	1bae      	subs	r6, r5, r6
 8006ed2:	42b7      	cmp	r7, r6
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	d137      	bne.n	8006f4a <_dtoa_r+0x722>
 8006eda:	f7f9 f9f7 	bl	80002cc <__adddf3>
 8006ede:	4642      	mov	r2, r8
 8006ee0:	464b      	mov	r3, r9
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	460f      	mov	r7, r1
 8006ee6:	f7f9 fe37 	bl	8000b58 <__aeabi_dcmpgt>
 8006eea:	b9c8      	cbnz	r0, 8006f20 <_dtoa_r+0x6f8>
 8006eec:	4642      	mov	r2, r8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	f7f9 fe08 	bl	8000b08 <__aeabi_dcmpeq>
 8006ef8:	b110      	cbz	r0, 8006f00 <_dtoa_r+0x6d8>
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	07d9      	lsls	r1, r3, #31
 8006efe:	d40f      	bmi.n	8006f20 <_dtoa_r+0x6f8>
 8006f00:	4620      	mov	r0, r4
 8006f02:	4659      	mov	r1, fp
 8006f04:	f000 fe58 	bl	8007bb8 <_Bfree>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	702b      	strb	r3, [r5, #0]
 8006f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f0e:	f10a 0001 	add.w	r0, sl, #1
 8006f12:	6018      	str	r0, [r3, #0]
 8006f14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f43f acd8 	beq.w	80068cc <_dtoa_r+0xa4>
 8006f1c:	601d      	str	r5, [r3, #0]
 8006f1e:	e4d5      	b.n	80068cc <_dtoa_r+0xa4>
 8006f20:	f8cd a01c 	str.w	sl, [sp, #28]
 8006f24:	462b      	mov	r3, r5
 8006f26:	461d      	mov	r5, r3
 8006f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f2c:	2a39      	cmp	r2, #57	; 0x39
 8006f2e:	d108      	bne.n	8006f42 <_dtoa_r+0x71a>
 8006f30:	9a00      	ldr	r2, [sp, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d1f7      	bne.n	8006f26 <_dtoa_r+0x6fe>
 8006f36:	9a07      	ldr	r2, [sp, #28]
 8006f38:	9900      	ldr	r1, [sp, #0]
 8006f3a:	3201      	adds	r2, #1
 8006f3c:	9207      	str	r2, [sp, #28]
 8006f3e:	2230      	movs	r2, #48	; 0x30
 8006f40:	700a      	strb	r2, [r1, #0]
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	3201      	adds	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	e78c      	b.n	8006e64 <_dtoa_r+0x63c>
 8006f4a:	4b7f      	ldr	r3, [pc, #508]	; (8007148 <_dtoa_r+0x920>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f7f9 fb73 	bl	8000638 <__aeabi_dmul>
 8006f52:	2200      	movs	r2, #0
 8006f54:	2300      	movs	r3, #0
 8006f56:	4606      	mov	r6, r0
 8006f58:	460f      	mov	r7, r1
 8006f5a:	f7f9 fdd5 	bl	8000b08 <__aeabi_dcmpeq>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d09b      	beq.n	8006e9a <_dtoa_r+0x672>
 8006f62:	e7cd      	b.n	8006f00 <_dtoa_r+0x6d8>
 8006f64:	9a08      	ldr	r2, [sp, #32]
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	f000 80c4 	beq.w	80070f4 <_dtoa_r+0x8cc>
 8006f6c:	9a05      	ldr	r2, [sp, #20]
 8006f6e:	2a01      	cmp	r2, #1
 8006f70:	f300 80a8 	bgt.w	80070c4 <_dtoa_r+0x89c>
 8006f74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f76:	2a00      	cmp	r2, #0
 8006f78:	f000 80a0 	beq.w	80070bc <_dtoa_r+0x894>
 8006f7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f80:	9e06      	ldr	r6, [sp, #24]
 8006f82:	4645      	mov	r5, r8
 8006f84:	9a04      	ldr	r2, [sp, #16]
 8006f86:	2101      	movs	r1, #1
 8006f88:	441a      	add	r2, r3
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	4498      	add	r8, r3
 8006f8e:	9204      	str	r2, [sp, #16]
 8006f90:	f000 ff18 	bl	8007dc4 <__i2b>
 8006f94:	4607      	mov	r7, r0
 8006f96:	2d00      	cmp	r5, #0
 8006f98:	dd0b      	ble.n	8006fb2 <_dtoa_r+0x78a>
 8006f9a:	9b04      	ldr	r3, [sp, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	dd08      	ble.n	8006fb2 <_dtoa_r+0x78a>
 8006fa0:	42ab      	cmp	r3, r5
 8006fa2:	9a04      	ldr	r2, [sp, #16]
 8006fa4:	bfa8      	it	ge
 8006fa6:	462b      	movge	r3, r5
 8006fa8:	eba8 0803 	sub.w	r8, r8, r3
 8006fac:	1aed      	subs	r5, r5, r3
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	9304      	str	r3, [sp, #16]
 8006fb2:	9b06      	ldr	r3, [sp, #24]
 8006fb4:	b1fb      	cbz	r3, 8006ff6 <_dtoa_r+0x7ce>
 8006fb6:	9b08      	ldr	r3, [sp, #32]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 809f 	beq.w	80070fc <_dtoa_r+0x8d4>
 8006fbe:	2e00      	cmp	r6, #0
 8006fc0:	dd11      	ble.n	8006fe6 <_dtoa_r+0x7be>
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 ffb8 	bl	8007f3c <__pow5mult>
 8006fcc:	465a      	mov	r2, fp
 8006fce:	4601      	mov	r1, r0
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f000 ff0c 	bl	8007df0 <__multiply>
 8006fd8:	4659      	mov	r1, fp
 8006fda:	9007      	str	r0, [sp, #28]
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fdeb 	bl	8007bb8 <_Bfree>
 8006fe2:	9b07      	ldr	r3, [sp, #28]
 8006fe4:	469b      	mov	fp, r3
 8006fe6:	9b06      	ldr	r3, [sp, #24]
 8006fe8:	1b9a      	subs	r2, r3, r6
 8006fea:	d004      	beq.n	8006ff6 <_dtoa_r+0x7ce>
 8006fec:	4659      	mov	r1, fp
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f000 ffa4 	bl	8007f3c <__pow5mult>
 8006ff4:	4683      	mov	fp, r0
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 fee3 	bl	8007dc4 <__i2b>
 8006ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007000:	2b00      	cmp	r3, #0
 8007002:	4606      	mov	r6, r0
 8007004:	dd7c      	ble.n	8007100 <_dtoa_r+0x8d8>
 8007006:	461a      	mov	r2, r3
 8007008:	4601      	mov	r1, r0
 800700a:	4620      	mov	r0, r4
 800700c:	f000 ff96 	bl	8007f3c <__pow5mult>
 8007010:	9b05      	ldr	r3, [sp, #20]
 8007012:	2b01      	cmp	r3, #1
 8007014:	4606      	mov	r6, r0
 8007016:	dd76      	ble.n	8007106 <_dtoa_r+0x8de>
 8007018:	2300      	movs	r3, #0
 800701a:	9306      	str	r3, [sp, #24]
 800701c:	6933      	ldr	r3, [r6, #16]
 800701e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007022:	6918      	ldr	r0, [r3, #16]
 8007024:	f000 fe7e 	bl	8007d24 <__hi0bits>
 8007028:	f1c0 0020 	rsb	r0, r0, #32
 800702c:	9b04      	ldr	r3, [sp, #16]
 800702e:	4418      	add	r0, r3
 8007030:	f010 001f 	ands.w	r0, r0, #31
 8007034:	f000 8086 	beq.w	8007144 <_dtoa_r+0x91c>
 8007038:	f1c0 0320 	rsb	r3, r0, #32
 800703c:	2b04      	cmp	r3, #4
 800703e:	dd7f      	ble.n	8007140 <_dtoa_r+0x918>
 8007040:	f1c0 001c 	rsb	r0, r0, #28
 8007044:	9b04      	ldr	r3, [sp, #16]
 8007046:	4403      	add	r3, r0
 8007048:	4480      	add	r8, r0
 800704a:	4405      	add	r5, r0
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	f1b8 0f00 	cmp.w	r8, #0
 8007052:	dd05      	ble.n	8007060 <_dtoa_r+0x838>
 8007054:	4659      	mov	r1, fp
 8007056:	4642      	mov	r2, r8
 8007058:	4620      	mov	r0, r4
 800705a:	f000 ffc9 	bl	8007ff0 <__lshift>
 800705e:	4683      	mov	fp, r0
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	dd05      	ble.n	8007072 <_dtoa_r+0x84a>
 8007066:	4631      	mov	r1, r6
 8007068:	461a      	mov	r2, r3
 800706a:	4620      	mov	r0, r4
 800706c:	f000 ffc0 	bl	8007ff0 <__lshift>
 8007070:	4606      	mov	r6, r0
 8007072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	d069      	beq.n	800714c <_dtoa_r+0x924>
 8007078:	4631      	mov	r1, r6
 800707a:	4658      	mov	r0, fp
 800707c:	f001 f824 	bl	80080c8 <__mcmp>
 8007080:	2800      	cmp	r0, #0
 8007082:	da63      	bge.n	800714c <_dtoa_r+0x924>
 8007084:	2300      	movs	r3, #0
 8007086:	4659      	mov	r1, fp
 8007088:	220a      	movs	r2, #10
 800708a:	4620      	mov	r0, r4
 800708c:	f000 fdb6 	bl	8007bfc <__multadd>
 8007090:	9b08      	ldr	r3, [sp, #32]
 8007092:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007096:	4683      	mov	fp, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 818f 	beq.w	80073bc <_dtoa_r+0xb94>
 800709e:	4639      	mov	r1, r7
 80070a0:	2300      	movs	r3, #0
 80070a2:	220a      	movs	r2, #10
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 fda9 	bl	8007bfc <__multadd>
 80070aa:	f1b9 0f00 	cmp.w	r9, #0
 80070ae:	4607      	mov	r7, r0
 80070b0:	f300 808e 	bgt.w	80071d0 <_dtoa_r+0x9a8>
 80070b4:	9b05      	ldr	r3, [sp, #20]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	dc50      	bgt.n	800715c <_dtoa_r+0x934>
 80070ba:	e089      	b.n	80071d0 <_dtoa_r+0x9a8>
 80070bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070c2:	e75d      	b.n	8006f80 <_dtoa_r+0x758>
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	1e5e      	subs	r6, r3, #1
 80070c8:	9b06      	ldr	r3, [sp, #24]
 80070ca:	42b3      	cmp	r3, r6
 80070cc:	bfbf      	itttt	lt
 80070ce:	9b06      	ldrlt	r3, [sp, #24]
 80070d0:	9606      	strlt	r6, [sp, #24]
 80070d2:	1af2      	sublt	r2, r6, r3
 80070d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80070d6:	bfb6      	itet	lt
 80070d8:	189b      	addlt	r3, r3, r2
 80070da:	1b9e      	subge	r6, r3, r6
 80070dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	bfb8      	it	lt
 80070e2:	2600      	movlt	r6, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	bfb5      	itete	lt
 80070e8:	eba8 0503 	sublt.w	r5, r8, r3
 80070ec:	9b01      	ldrge	r3, [sp, #4]
 80070ee:	2300      	movlt	r3, #0
 80070f0:	4645      	movge	r5, r8
 80070f2:	e747      	b.n	8006f84 <_dtoa_r+0x75c>
 80070f4:	9e06      	ldr	r6, [sp, #24]
 80070f6:	9f08      	ldr	r7, [sp, #32]
 80070f8:	4645      	mov	r5, r8
 80070fa:	e74c      	b.n	8006f96 <_dtoa_r+0x76e>
 80070fc:	9a06      	ldr	r2, [sp, #24]
 80070fe:	e775      	b.n	8006fec <_dtoa_r+0x7c4>
 8007100:	9b05      	ldr	r3, [sp, #20]
 8007102:	2b01      	cmp	r3, #1
 8007104:	dc18      	bgt.n	8007138 <_dtoa_r+0x910>
 8007106:	9b02      	ldr	r3, [sp, #8]
 8007108:	b9b3      	cbnz	r3, 8007138 <_dtoa_r+0x910>
 800710a:	9b03      	ldr	r3, [sp, #12]
 800710c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007110:	b9a3      	cbnz	r3, 800713c <_dtoa_r+0x914>
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007118:	0d1b      	lsrs	r3, r3, #20
 800711a:	051b      	lsls	r3, r3, #20
 800711c:	b12b      	cbz	r3, 800712a <_dtoa_r+0x902>
 800711e:	9b04      	ldr	r3, [sp, #16]
 8007120:	3301      	adds	r3, #1
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	f108 0801 	add.w	r8, r8, #1
 8007128:	2301      	movs	r3, #1
 800712a:	9306      	str	r3, [sp, #24]
 800712c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800712e:	2b00      	cmp	r3, #0
 8007130:	f47f af74 	bne.w	800701c <_dtoa_r+0x7f4>
 8007134:	2001      	movs	r0, #1
 8007136:	e779      	b.n	800702c <_dtoa_r+0x804>
 8007138:	2300      	movs	r3, #0
 800713a:	e7f6      	b.n	800712a <_dtoa_r+0x902>
 800713c:	9b02      	ldr	r3, [sp, #8]
 800713e:	e7f4      	b.n	800712a <_dtoa_r+0x902>
 8007140:	d085      	beq.n	800704e <_dtoa_r+0x826>
 8007142:	4618      	mov	r0, r3
 8007144:	301c      	adds	r0, #28
 8007146:	e77d      	b.n	8007044 <_dtoa_r+0x81c>
 8007148:	40240000 	.word	0x40240000
 800714c:	9b01      	ldr	r3, [sp, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	dc38      	bgt.n	80071c4 <_dtoa_r+0x99c>
 8007152:	9b05      	ldr	r3, [sp, #20]
 8007154:	2b02      	cmp	r3, #2
 8007156:	dd35      	ble.n	80071c4 <_dtoa_r+0x99c>
 8007158:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800715c:	f1b9 0f00 	cmp.w	r9, #0
 8007160:	d10d      	bne.n	800717e <_dtoa_r+0x956>
 8007162:	4631      	mov	r1, r6
 8007164:	464b      	mov	r3, r9
 8007166:	2205      	movs	r2, #5
 8007168:	4620      	mov	r0, r4
 800716a:	f000 fd47 	bl	8007bfc <__multadd>
 800716e:	4601      	mov	r1, r0
 8007170:	4606      	mov	r6, r0
 8007172:	4658      	mov	r0, fp
 8007174:	f000 ffa8 	bl	80080c8 <__mcmp>
 8007178:	2800      	cmp	r0, #0
 800717a:	f73f adbd 	bgt.w	8006cf8 <_dtoa_r+0x4d0>
 800717e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007180:	9d00      	ldr	r5, [sp, #0]
 8007182:	ea6f 0a03 	mvn.w	sl, r3
 8007186:	f04f 0800 	mov.w	r8, #0
 800718a:	4631      	mov	r1, r6
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fd13 	bl	8007bb8 <_Bfree>
 8007192:	2f00      	cmp	r7, #0
 8007194:	f43f aeb4 	beq.w	8006f00 <_dtoa_r+0x6d8>
 8007198:	f1b8 0f00 	cmp.w	r8, #0
 800719c:	d005      	beq.n	80071aa <_dtoa_r+0x982>
 800719e:	45b8      	cmp	r8, r7
 80071a0:	d003      	beq.n	80071aa <_dtoa_r+0x982>
 80071a2:	4641      	mov	r1, r8
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 fd07 	bl	8007bb8 <_Bfree>
 80071aa:	4639      	mov	r1, r7
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 fd03 	bl	8007bb8 <_Bfree>
 80071b2:	e6a5      	b.n	8006f00 <_dtoa_r+0x6d8>
 80071b4:	2600      	movs	r6, #0
 80071b6:	4637      	mov	r7, r6
 80071b8:	e7e1      	b.n	800717e <_dtoa_r+0x956>
 80071ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80071bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80071c0:	4637      	mov	r7, r6
 80071c2:	e599      	b.n	8006cf8 <_dtoa_r+0x4d0>
 80071c4:	9b08      	ldr	r3, [sp, #32]
 80071c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 80fd 	beq.w	80073ca <_dtoa_r+0xba2>
 80071d0:	2d00      	cmp	r5, #0
 80071d2:	dd05      	ble.n	80071e0 <_dtoa_r+0x9b8>
 80071d4:	4639      	mov	r1, r7
 80071d6:	462a      	mov	r2, r5
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 ff09 	bl	8007ff0 <__lshift>
 80071de:	4607      	mov	r7, r0
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d05c      	beq.n	80072a0 <_dtoa_r+0xa78>
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	4620      	mov	r0, r4
 80071ea:	f000 fca5 	bl	8007b38 <_Balloc>
 80071ee:	4605      	mov	r5, r0
 80071f0:	b928      	cbnz	r0, 80071fe <_dtoa_r+0x9d6>
 80071f2:	4b80      	ldr	r3, [pc, #512]	; (80073f4 <_dtoa_r+0xbcc>)
 80071f4:	4602      	mov	r2, r0
 80071f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80071fa:	f7ff bb2e 	b.w	800685a <_dtoa_r+0x32>
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	3202      	adds	r2, #2
 8007202:	0092      	lsls	r2, r2, #2
 8007204:	f107 010c 	add.w	r1, r7, #12
 8007208:	300c      	adds	r0, #12
 800720a:	f000 fc87 	bl	8007b1c <memcpy>
 800720e:	2201      	movs	r2, #1
 8007210:	4629      	mov	r1, r5
 8007212:	4620      	mov	r0, r4
 8007214:	f000 feec 	bl	8007ff0 <__lshift>
 8007218:	9b00      	ldr	r3, [sp, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	9b00      	ldr	r3, [sp, #0]
 8007220:	444b      	add	r3, r9
 8007222:	9307      	str	r3, [sp, #28]
 8007224:	9b02      	ldr	r3, [sp, #8]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	46b8      	mov	r8, r7
 800722c:	9306      	str	r3, [sp, #24]
 800722e:	4607      	mov	r7, r0
 8007230:	9b01      	ldr	r3, [sp, #4]
 8007232:	4631      	mov	r1, r6
 8007234:	3b01      	subs	r3, #1
 8007236:	4658      	mov	r0, fp
 8007238:	9302      	str	r3, [sp, #8]
 800723a:	f7ff fa67 	bl	800670c <quorem>
 800723e:	4603      	mov	r3, r0
 8007240:	3330      	adds	r3, #48	; 0x30
 8007242:	9004      	str	r0, [sp, #16]
 8007244:	4641      	mov	r1, r8
 8007246:	4658      	mov	r0, fp
 8007248:	9308      	str	r3, [sp, #32]
 800724a:	f000 ff3d 	bl	80080c8 <__mcmp>
 800724e:	463a      	mov	r2, r7
 8007250:	4681      	mov	r9, r0
 8007252:	4631      	mov	r1, r6
 8007254:	4620      	mov	r0, r4
 8007256:	f000 ff53 	bl	8008100 <__mdiff>
 800725a:	68c2      	ldr	r2, [r0, #12]
 800725c:	9b08      	ldr	r3, [sp, #32]
 800725e:	4605      	mov	r5, r0
 8007260:	bb02      	cbnz	r2, 80072a4 <_dtoa_r+0xa7c>
 8007262:	4601      	mov	r1, r0
 8007264:	4658      	mov	r0, fp
 8007266:	f000 ff2f 	bl	80080c8 <__mcmp>
 800726a:	9b08      	ldr	r3, [sp, #32]
 800726c:	4602      	mov	r2, r0
 800726e:	4629      	mov	r1, r5
 8007270:	4620      	mov	r0, r4
 8007272:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007276:	f000 fc9f 	bl	8007bb8 <_Bfree>
 800727a:	9b05      	ldr	r3, [sp, #20]
 800727c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800727e:	9d01      	ldr	r5, [sp, #4]
 8007280:	ea43 0102 	orr.w	r1, r3, r2
 8007284:	9b06      	ldr	r3, [sp, #24]
 8007286:	430b      	orrs	r3, r1
 8007288:	9b08      	ldr	r3, [sp, #32]
 800728a:	d10d      	bne.n	80072a8 <_dtoa_r+0xa80>
 800728c:	2b39      	cmp	r3, #57	; 0x39
 800728e:	d029      	beq.n	80072e4 <_dtoa_r+0xabc>
 8007290:	f1b9 0f00 	cmp.w	r9, #0
 8007294:	dd01      	ble.n	800729a <_dtoa_r+0xa72>
 8007296:	9b04      	ldr	r3, [sp, #16]
 8007298:	3331      	adds	r3, #49	; 0x31
 800729a:	9a02      	ldr	r2, [sp, #8]
 800729c:	7013      	strb	r3, [r2, #0]
 800729e:	e774      	b.n	800718a <_dtoa_r+0x962>
 80072a0:	4638      	mov	r0, r7
 80072a2:	e7b9      	b.n	8007218 <_dtoa_r+0x9f0>
 80072a4:	2201      	movs	r2, #1
 80072a6:	e7e2      	b.n	800726e <_dtoa_r+0xa46>
 80072a8:	f1b9 0f00 	cmp.w	r9, #0
 80072ac:	db06      	blt.n	80072bc <_dtoa_r+0xa94>
 80072ae:	9905      	ldr	r1, [sp, #20]
 80072b0:	ea41 0909 	orr.w	r9, r1, r9
 80072b4:	9906      	ldr	r1, [sp, #24]
 80072b6:	ea59 0101 	orrs.w	r1, r9, r1
 80072ba:	d120      	bne.n	80072fe <_dtoa_r+0xad6>
 80072bc:	2a00      	cmp	r2, #0
 80072be:	ddec      	ble.n	800729a <_dtoa_r+0xa72>
 80072c0:	4659      	mov	r1, fp
 80072c2:	2201      	movs	r2, #1
 80072c4:	4620      	mov	r0, r4
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	f000 fe92 	bl	8007ff0 <__lshift>
 80072cc:	4631      	mov	r1, r6
 80072ce:	4683      	mov	fp, r0
 80072d0:	f000 fefa 	bl	80080c8 <__mcmp>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	dc02      	bgt.n	80072e0 <_dtoa_r+0xab8>
 80072da:	d1de      	bne.n	800729a <_dtoa_r+0xa72>
 80072dc:	07da      	lsls	r2, r3, #31
 80072de:	d5dc      	bpl.n	800729a <_dtoa_r+0xa72>
 80072e0:	2b39      	cmp	r3, #57	; 0x39
 80072e2:	d1d8      	bne.n	8007296 <_dtoa_r+0xa6e>
 80072e4:	9a02      	ldr	r2, [sp, #8]
 80072e6:	2339      	movs	r3, #57	; 0x39
 80072e8:	7013      	strb	r3, [r2, #0]
 80072ea:	462b      	mov	r3, r5
 80072ec:	461d      	mov	r5, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80072f4:	2a39      	cmp	r2, #57	; 0x39
 80072f6:	d050      	beq.n	800739a <_dtoa_r+0xb72>
 80072f8:	3201      	adds	r2, #1
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	e745      	b.n	800718a <_dtoa_r+0x962>
 80072fe:	2a00      	cmp	r2, #0
 8007300:	dd03      	ble.n	800730a <_dtoa_r+0xae2>
 8007302:	2b39      	cmp	r3, #57	; 0x39
 8007304:	d0ee      	beq.n	80072e4 <_dtoa_r+0xabc>
 8007306:	3301      	adds	r3, #1
 8007308:	e7c7      	b.n	800729a <_dtoa_r+0xa72>
 800730a:	9a01      	ldr	r2, [sp, #4]
 800730c:	9907      	ldr	r1, [sp, #28]
 800730e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007312:	428a      	cmp	r2, r1
 8007314:	d02a      	beq.n	800736c <_dtoa_r+0xb44>
 8007316:	4659      	mov	r1, fp
 8007318:	2300      	movs	r3, #0
 800731a:	220a      	movs	r2, #10
 800731c:	4620      	mov	r0, r4
 800731e:	f000 fc6d 	bl	8007bfc <__multadd>
 8007322:	45b8      	cmp	r8, r7
 8007324:	4683      	mov	fp, r0
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	f04f 020a 	mov.w	r2, #10
 800732e:	4641      	mov	r1, r8
 8007330:	4620      	mov	r0, r4
 8007332:	d107      	bne.n	8007344 <_dtoa_r+0xb1c>
 8007334:	f000 fc62 	bl	8007bfc <__multadd>
 8007338:	4680      	mov	r8, r0
 800733a:	4607      	mov	r7, r0
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	3301      	adds	r3, #1
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	e775      	b.n	8007230 <_dtoa_r+0xa08>
 8007344:	f000 fc5a 	bl	8007bfc <__multadd>
 8007348:	4639      	mov	r1, r7
 800734a:	4680      	mov	r8, r0
 800734c:	2300      	movs	r3, #0
 800734e:	220a      	movs	r2, #10
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fc53 	bl	8007bfc <__multadd>
 8007356:	4607      	mov	r7, r0
 8007358:	e7f0      	b.n	800733c <_dtoa_r+0xb14>
 800735a:	f1b9 0f00 	cmp.w	r9, #0
 800735e:	9a00      	ldr	r2, [sp, #0]
 8007360:	bfcc      	ite	gt
 8007362:	464d      	movgt	r5, r9
 8007364:	2501      	movle	r5, #1
 8007366:	4415      	add	r5, r2
 8007368:	f04f 0800 	mov.w	r8, #0
 800736c:	4659      	mov	r1, fp
 800736e:	2201      	movs	r2, #1
 8007370:	4620      	mov	r0, r4
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	f000 fe3c 	bl	8007ff0 <__lshift>
 8007378:	4631      	mov	r1, r6
 800737a:	4683      	mov	fp, r0
 800737c:	f000 fea4 	bl	80080c8 <__mcmp>
 8007380:	2800      	cmp	r0, #0
 8007382:	dcb2      	bgt.n	80072ea <_dtoa_r+0xac2>
 8007384:	d102      	bne.n	800738c <_dtoa_r+0xb64>
 8007386:	9b01      	ldr	r3, [sp, #4]
 8007388:	07db      	lsls	r3, r3, #31
 800738a:	d4ae      	bmi.n	80072ea <_dtoa_r+0xac2>
 800738c:	462b      	mov	r3, r5
 800738e:	461d      	mov	r5, r3
 8007390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007394:	2a30      	cmp	r2, #48	; 0x30
 8007396:	d0fa      	beq.n	800738e <_dtoa_r+0xb66>
 8007398:	e6f7      	b.n	800718a <_dtoa_r+0x962>
 800739a:	9a00      	ldr	r2, [sp, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d1a5      	bne.n	80072ec <_dtoa_r+0xac4>
 80073a0:	f10a 0a01 	add.w	sl, sl, #1
 80073a4:	2331      	movs	r3, #49	; 0x31
 80073a6:	e779      	b.n	800729c <_dtoa_r+0xa74>
 80073a8:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <_dtoa_r+0xbd0>)
 80073aa:	f7ff baaf 	b.w	800690c <_dtoa_r+0xe4>
 80073ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f47f aa86 	bne.w	80068c2 <_dtoa_r+0x9a>
 80073b6:	4b11      	ldr	r3, [pc, #68]	; (80073fc <_dtoa_r+0xbd4>)
 80073b8:	f7ff baa8 	b.w	800690c <_dtoa_r+0xe4>
 80073bc:	f1b9 0f00 	cmp.w	r9, #0
 80073c0:	dc03      	bgt.n	80073ca <_dtoa_r+0xba2>
 80073c2:	9b05      	ldr	r3, [sp, #20]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	f73f aec9 	bgt.w	800715c <_dtoa_r+0x934>
 80073ca:	9d00      	ldr	r5, [sp, #0]
 80073cc:	4631      	mov	r1, r6
 80073ce:	4658      	mov	r0, fp
 80073d0:	f7ff f99c 	bl	800670c <quorem>
 80073d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80073d8:	f805 3b01 	strb.w	r3, [r5], #1
 80073dc:	9a00      	ldr	r2, [sp, #0]
 80073de:	1aaa      	subs	r2, r5, r2
 80073e0:	4591      	cmp	r9, r2
 80073e2:	ddba      	ble.n	800735a <_dtoa_r+0xb32>
 80073e4:	4659      	mov	r1, fp
 80073e6:	2300      	movs	r3, #0
 80073e8:	220a      	movs	r2, #10
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 fc06 	bl	8007bfc <__multadd>
 80073f0:	4683      	mov	fp, r0
 80073f2:	e7eb      	b.n	80073cc <_dtoa_r+0xba4>
 80073f4:	080096fc 	.word	0x080096fc
 80073f8:	080094fc 	.word	0x080094fc
 80073fc:	08009679 	.word	0x08009679

08007400 <rshift>:
 8007400:	6903      	ldr	r3, [r0, #16]
 8007402:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007406:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800740a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800740e:	f100 0414 	add.w	r4, r0, #20
 8007412:	dd45      	ble.n	80074a0 <rshift+0xa0>
 8007414:	f011 011f 	ands.w	r1, r1, #31
 8007418:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800741c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007420:	d10c      	bne.n	800743c <rshift+0x3c>
 8007422:	f100 0710 	add.w	r7, r0, #16
 8007426:	4629      	mov	r1, r5
 8007428:	42b1      	cmp	r1, r6
 800742a:	d334      	bcc.n	8007496 <rshift+0x96>
 800742c:	1a9b      	subs	r3, r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	1eea      	subs	r2, r5, #3
 8007432:	4296      	cmp	r6, r2
 8007434:	bf38      	it	cc
 8007436:	2300      	movcc	r3, #0
 8007438:	4423      	add	r3, r4
 800743a:	e015      	b.n	8007468 <rshift+0x68>
 800743c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007440:	f1c1 0820 	rsb	r8, r1, #32
 8007444:	40cf      	lsrs	r7, r1
 8007446:	f105 0e04 	add.w	lr, r5, #4
 800744a:	46a1      	mov	r9, r4
 800744c:	4576      	cmp	r6, lr
 800744e:	46f4      	mov	ip, lr
 8007450:	d815      	bhi.n	800747e <rshift+0x7e>
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	009a      	lsls	r2, r3, #2
 8007456:	3a04      	subs	r2, #4
 8007458:	3501      	adds	r5, #1
 800745a:	42ae      	cmp	r6, r5
 800745c:	bf38      	it	cc
 800745e:	2200      	movcc	r2, #0
 8007460:	18a3      	adds	r3, r4, r2
 8007462:	50a7      	str	r7, [r4, r2]
 8007464:	b107      	cbz	r7, 8007468 <rshift+0x68>
 8007466:	3304      	adds	r3, #4
 8007468:	1b1a      	subs	r2, r3, r4
 800746a:	42a3      	cmp	r3, r4
 800746c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007470:	bf08      	it	eq
 8007472:	2300      	moveq	r3, #0
 8007474:	6102      	str	r2, [r0, #16]
 8007476:	bf08      	it	eq
 8007478:	6143      	streq	r3, [r0, #20]
 800747a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800747e:	f8dc c000 	ldr.w	ip, [ip]
 8007482:	fa0c fc08 	lsl.w	ip, ip, r8
 8007486:	ea4c 0707 	orr.w	r7, ip, r7
 800748a:	f849 7b04 	str.w	r7, [r9], #4
 800748e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007492:	40cf      	lsrs	r7, r1
 8007494:	e7da      	b.n	800744c <rshift+0x4c>
 8007496:	f851 cb04 	ldr.w	ip, [r1], #4
 800749a:	f847 cf04 	str.w	ip, [r7, #4]!
 800749e:	e7c3      	b.n	8007428 <rshift+0x28>
 80074a0:	4623      	mov	r3, r4
 80074a2:	e7e1      	b.n	8007468 <rshift+0x68>

080074a4 <__hexdig_fun>:
 80074a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80074a8:	2b09      	cmp	r3, #9
 80074aa:	d802      	bhi.n	80074b2 <__hexdig_fun+0xe>
 80074ac:	3820      	subs	r0, #32
 80074ae:	b2c0      	uxtb	r0, r0
 80074b0:	4770      	bx	lr
 80074b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80074b6:	2b05      	cmp	r3, #5
 80074b8:	d801      	bhi.n	80074be <__hexdig_fun+0x1a>
 80074ba:	3847      	subs	r0, #71	; 0x47
 80074bc:	e7f7      	b.n	80074ae <__hexdig_fun+0xa>
 80074be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d801      	bhi.n	80074ca <__hexdig_fun+0x26>
 80074c6:	3827      	subs	r0, #39	; 0x27
 80074c8:	e7f1      	b.n	80074ae <__hexdig_fun+0xa>
 80074ca:	2000      	movs	r0, #0
 80074cc:	4770      	bx	lr
	...

080074d0 <__gethex>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	ed2d 8b02 	vpush	{d8}
 80074d8:	b089      	sub	sp, #36	; 0x24
 80074da:	ee08 0a10 	vmov	s16, r0
 80074de:	9304      	str	r3, [sp, #16]
 80074e0:	4bbc      	ldr	r3, [pc, #752]	; (80077d4 <__gethex+0x304>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	4618      	mov	r0, r3
 80074e8:	468b      	mov	fp, r1
 80074ea:	4690      	mov	r8, r2
 80074ec:	f7f8 fe90 	bl	8000210 <strlen>
 80074f0:	9b01      	ldr	r3, [sp, #4]
 80074f2:	f8db 2000 	ldr.w	r2, [fp]
 80074f6:	4403      	add	r3, r0
 80074f8:	4682      	mov	sl, r0
 80074fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	1c93      	adds	r3, r2, #2
 8007502:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007506:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800750a:	32fe      	adds	r2, #254	; 0xfe
 800750c:	18d1      	adds	r1, r2, r3
 800750e:	461f      	mov	r7, r3
 8007510:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007514:	9100      	str	r1, [sp, #0]
 8007516:	2830      	cmp	r0, #48	; 0x30
 8007518:	d0f8      	beq.n	800750c <__gethex+0x3c>
 800751a:	f7ff ffc3 	bl	80074a4 <__hexdig_fun>
 800751e:	4604      	mov	r4, r0
 8007520:	2800      	cmp	r0, #0
 8007522:	d13a      	bne.n	800759a <__gethex+0xca>
 8007524:	9901      	ldr	r1, [sp, #4]
 8007526:	4652      	mov	r2, sl
 8007528:	4638      	mov	r0, r7
 800752a:	f001 f9ed 	bl	8008908 <strncmp>
 800752e:	4605      	mov	r5, r0
 8007530:	2800      	cmp	r0, #0
 8007532:	d168      	bne.n	8007606 <__gethex+0x136>
 8007534:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007538:	eb07 060a 	add.w	r6, r7, sl
 800753c:	f7ff ffb2 	bl	80074a4 <__hexdig_fun>
 8007540:	2800      	cmp	r0, #0
 8007542:	d062      	beq.n	800760a <__gethex+0x13a>
 8007544:	4633      	mov	r3, r6
 8007546:	7818      	ldrb	r0, [r3, #0]
 8007548:	2830      	cmp	r0, #48	; 0x30
 800754a:	461f      	mov	r7, r3
 800754c:	f103 0301 	add.w	r3, r3, #1
 8007550:	d0f9      	beq.n	8007546 <__gethex+0x76>
 8007552:	f7ff ffa7 	bl	80074a4 <__hexdig_fun>
 8007556:	2301      	movs	r3, #1
 8007558:	fab0 f480 	clz	r4, r0
 800755c:	0964      	lsrs	r4, r4, #5
 800755e:	4635      	mov	r5, r6
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	463a      	mov	r2, r7
 8007564:	4616      	mov	r6, r2
 8007566:	3201      	adds	r2, #1
 8007568:	7830      	ldrb	r0, [r6, #0]
 800756a:	f7ff ff9b 	bl	80074a4 <__hexdig_fun>
 800756e:	2800      	cmp	r0, #0
 8007570:	d1f8      	bne.n	8007564 <__gethex+0x94>
 8007572:	9901      	ldr	r1, [sp, #4]
 8007574:	4652      	mov	r2, sl
 8007576:	4630      	mov	r0, r6
 8007578:	f001 f9c6 	bl	8008908 <strncmp>
 800757c:	b980      	cbnz	r0, 80075a0 <__gethex+0xd0>
 800757e:	b94d      	cbnz	r5, 8007594 <__gethex+0xc4>
 8007580:	eb06 050a 	add.w	r5, r6, sl
 8007584:	462a      	mov	r2, r5
 8007586:	4616      	mov	r6, r2
 8007588:	3201      	adds	r2, #1
 800758a:	7830      	ldrb	r0, [r6, #0]
 800758c:	f7ff ff8a 	bl	80074a4 <__hexdig_fun>
 8007590:	2800      	cmp	r0, #0
 8007592:	d1f8      	bne.n	8007586 <__gethex+0xb6>
 8007594:	1bad      	subs	r5, r5, r6
 8007596:	00ad      	lsls	r5, r5, #2
 8007598:	e004      	b.n	80075a4 <__gethex+0xd4>
 800759a:	2400      	movs	r4, #0
 800759c:	4625      	mov	r5, r4
 800759e:	e7e0      	b.n	8007562 <__gethex+0x92>
 80075a0:	2d00      	cmp	r5, #0
 80075a2:	d1f7      	bne.n	8007594 <__gethex+0xc4>
 80075a4:	7833      	ldrb	r3, [r6, #0]
 80075a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80075aa:	2b50      	cmp	r3, #80	; 0x50
 80075ac:	d13b      	bne.n	8007626 <__gethex+0x156>
 80075ae:	7873      	ldrb	r3, [r6, #1]
 80075b0:	2b2b      	cmp	r3, #43	; 0x2b
 80075b2:	d02c      	beq.n	800760e <__gethex+0x13e>
 80075b4:	2b2d      	cmp	r3, #45	; 0x2d
 80075b6:	d02e      	beq.n	8007616 <__gethex+0x146>
 80075b8:	1c71      	adds	r1, r6, #1
 80075ba:	f04f 0900 	mov.w	r9, #0
 80075be:	7808      	ldrb	r0, [r1, #0]
 80075c0:	f7ff ff70 	bl	80074a4 <__hexdig_fun>
 80075c4:	1e43      	subs	r3, r0, #1
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b18      	cmp	r3, #24
 80075ca:	d82c      	bhi.n	8007626 <__gethex+0x156>
 80075cc:	f1a0 0210 	sub.w	r2, r0, #16
 80075d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075d4:	f7ff ff66 	bl	80074a4 <__hexdig_fun>
 80075d8:	1e43      	subs	r3, r0, #1
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b18      	cmp	r3, #24
 80075de:	d91d      	bls.n	800761c <__gethex+0x14c>
 80075e0:	f1b9 0f00 	cmp.w	r9, #0
 80075e4:	d000      	beq.n	80075e8 <__gethex+0x118>
 80075e6:	4252      	negs	r2, r2
 80075e8:	4415      	add	r5, r2
 80075ea:	f8cb 1000 	str.w	r1, [fp]
 80075ee:	b1e4      	cbz	r4, 800762a <__gethex+0x15a>
 80075f0:	9b00      	ldr	r3, [sp, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bf14      	ite	ne
 80075f6:	2700      	movne	r7, #0
 80075f8:	2706      	moveq	r7, #6
 80075fa:	4638      	mov	r0, r7
 80075fc:	b009      	add	sp, #36	; 0x24
 80075fe:	ecbd 8b02 	vpop	{d8}
 8007602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007606:	463e      	mov	r6, r7
 8007608:	4625      	mov	r5, r4
 800760a:	2401      	movs	r4, #1
 800760c:	e7ca      	b.n	80075a4 <__gethex+0xd4>
 800760e:	f04f 0900 	mov.w	r9, #0
 8007612:	1cb1      	adds	r1, r6, #2
 8007614:	e7d3      	b.n	80075be <__gethex+0xee>
 8007616:	f04f 0901 	mov.w	r9, #1
 800761a:	e7fa      	b.n	8007612 <__gethex+0x142>
 800761c:	230a      	movs	r3, #10
 800761e:	fb03 0202 	mla	r2, r3, r2, r0
 8007622:	3a10      	subs	r2, #16
 8007624:	e7d4      	b.n	80075d0 <__gethex+0x100>
 8007626:	4631      	mov	r1, r6
 8007628:	e7df      	b.n	80075ea <__gethex+0x11a>
 800762a:	1bf3      	subs	r3, r6, r7
 800762c:	3b01      	subs	r3, #1
 800762e:	4621      	mov	r1, r4
 8007630:	2b07      	cmp	r3, #7
 8007632:	dc0b      	bgt.n	800764c <__gethex+0x17c>
 8007634:	ee18 0a10 	vmov	r0, s16
 8007638:	f000 fa7e 	bl	8007b38 <_Balloc>
 800763c:	4604      	mov	r4, r0
 800763e:	b940      	cbnz	r0, 8007652 <__gethex+0x182>
 8007640:	4b65      	ldr	r3, [pc, #404]	; (80077d8 <__gethex+0x308>)
 8007642:	4602      	mov	r2, r0
 8007644:	21de      	movs	r1, #222	; 0xde
 8007646:	4865      	ldr	r0, [pc, #404]	; (80077dc <__gethex+0x30c>)
 8007648:	f001 f97e 	bl	8008948 <__assert_func>
 800764c:	3101      	adds	r1, #1
 800764e:	105b      	asrs	r3, r3, #1
 8007650:	e7ee      	b.n	8007630 <__gethex+0x160>
 8007652:	f100 0914 	add.w	r9, r0, #20
 8007656:	f04f 0b00 	mov.w	fp, #0
 800765a:	f1ca 0301 	rsb	r3, sl, #1
 800765e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007662:	f8cd b000 	str.w	fp, [sp]
 8007666:	9306      	str	r3, [sp, #24]
 8007668:	42b7      	cmp	r7, r6
 800766a:	d340      	bcc.n	80076ee <__gethex+0x21e>
 800766c:	9802      	ldr	r0, [sp, #8]
 800766e:	9b00      	ldr	r3, [sp, #0]
 8007670:	f840 3b04 	str.w	r3, [r0], #4
 8007674:	eba0 0009 	sub.w	r0, r0, r9
 8007678:	1080      	asrs	r0, r0, #2
 800767a:	0146      	lsls	r6, r0, #5
 800767c:	6120      	str	r0, [r4, #16]
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fb50 	bl	8007d24 <__hi0bits>
 8007684:	1a30      	subs	r0, r6, r0
 8007686:	f8d8 6000 	ldr.w	r6, [r8]
 800768a:	42b0      	cmp	r0, r6
 800768c:	dd63      	ble.n	8007756 <__gethex+0x286>
 800768e:	1b87      	subs	r7, r0, r6
 8007690:	4639      	mov	r1, r7
 8007692:	4620      	mov	r0, r4
 8007694:	f000 feea 	bl	800846c <__any_on>
 8007698:	4682      	mov	sl, r0
 800769a:	b1a8      	cbz	r0, 80076c8 <__gethex+0x1f8>
 800769c:	1e7b      	subs	r3, r7, #1
 800769e:	1159      	asrs	r1, r3, #5
 80076a0:	f003 021f 	and.w	r2, r3, #31
 80076a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80076a8:	f04f 0a01 	mov.w	sl, #1
 80076ac:	fa0a f202 	lsl.w	r2, sl, r2
 80076b0:	420a      	tst	r2, r1
 80076b2:	d009      	beq.n	80076c8 <__gethex+0x1f8>
 80076b4:	4553      	cmp	r3, sl
 80076b6:	dd05      	ble.n	80076c4 <__gethex+0x1f4>
 80076b8:	1eb9      	subs	r1, r7, #2
 80076ba:	4620      	mov	r0, r4
 80076bc:	f000 fed6 	bl	800846c <__any_on>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d145      	bne.n	8007750 <__gethex+0x280>
 80076c4:	f04f 0a02 	mov.w	sl, #2
 80076c8:	4639      	mov	r1, r7
 80076ca:	4620      	mov	r0, r4
 80076cc:	f7ff fe98 	bl	8007400 <rshift>
 80076d0:	443d      	add	r5, r7
 80076d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076d6:	42ab      	cmp	r3, r5
 80076d8:	da4c      	bge.n	8007774 <__gethex+0x2a4>
 80076da:	ee18 0a10 	vmov	r0, s16
 80076de:	4621      	mov	r1, r4
 80076e0:	f000 fa6a 	bl	8007bb8 <_Bfree>
 80076e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076e6:	2300      	movs	r3, #0
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	27a3      	movs	r7, #163	; 0xa3
 80076ec:	e785      	b.n	80075fa <__gethex+0x12a>
 80076ee:	1e73      	subs	r3, r6, #1
 80076f0:	9a05      	ldr	r2, [sp, #20]
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d019      	beq.n	8007730 <__gethex+0x260>
 80076fc:	f1bb 0f20 	cmp.w	fp, #32
 8007700:	d107      	bne.n	8007712 <__gethex+0x242>
 8007702:	9b02      	ldr	r3, [sp, #8]
 8007704:	9a00      	ldr	r2, [sp, #0]
 8007706:	f843 2b04 	str.w	r2, [r3], #4
 800770a:	9302      	str	r3, [sp, #8]
 800770c:	2300      	movs	r3, #0
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	469b      	mov	fp, r3
 8007712:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007716:	f7ff fec5 	bl	80074a4 <__hexdig_fun>
 800771a:	9b00      	ldr	r3, [sp, #0]
 800771c:	f000 000f 	and.w	r0, r0, #15
 8007720:	fa00 f00b 	lsl.w	r0, r0, fp
 8007724:	4303      	orrs	r3, r0
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	f10b 0b04 	add.w	fp, fp, #4
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	e00d      	b.n	800774c <__gethex+0x27c>
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	9a06      	ldr	r2, [sp, #24]
 8007734:	4413      	add	r3, r2
 8007736:	42bb      	cmp	r3, r7
 8007738:	d3e0      	bcc.n	80076fc <__gethex+0x22c>
 800773a:	4618      	mov	r0, r3
 800773c:	9901      	ldr	r1, [sp, #4]
 800773e:	9307      	str	r3, [sp, #28]
 8007740:	4652      	mov	r2, sl
 8007742:	f001 f8e1 	bl	8008908 <strncmp>
 8007746:	9b07      	ldr	r3, [sp, #28]
 8007748:	2800      	cmp	r0, #0
 800774a:	d1d7      	bne.n	80076fc <__gethex+0x22c>
 800774c:	461e      	mov	r6, r3
 800774e:	e78b      	b.n	8007668 <__gethex+0x198>
 8007750:	f04f 0a03 	mov.w	sl, #3
 8007754:	e7b8      	b.n	80076c8 <__gethex+0x1f8>
 8007756:	da0a      	bge.n	800776e <__gethex+0x29e>
 8007758:	1a37      	subs	r7, r6, r0
 800775a:	4621      	mov	r1, r4
 800775c:	ee18 0a10 	vmov	r0, s16
 8007760:	463a      	mov	r2, r7
 8007762:	f000 fc45 	bl	8007ff0 <__lshift>
 8007766:	1bed      	subs	r5, r5, r7
 8007768:	4604      	mov	r4, r0
 800776a:	f100 0914 	add.w	r9, r0, #20
 800776e:	f04f 0a00 	mov.w	sl, #0
 8007772:	e7ae      	b.n	80076d2 <__gethex+0x202>
 8007774:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007778:	42a8      	cmp	r0, r5
 800777a:	dd72      	ble.n	8007862 <__gethex+0x392>
 800777c:	1b45      	subs	r5, r0, r5
 800777e:	42ae      	cmp	r6, r5
 8007780:	dc36      	bgt.n	80077f0 <__gethex+0x320>
 8007782:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d02a      	beq.n	80077e0 <__gethex+0x310>
 800778a:	2b03      	cmp	r3, #3
 800778c:	d02c      	beq.n	80077e8 <__gethex+0x318>
 800778e:	2b01      	cmp	r3, #1
 8007790:	d115      	bne.n	80077be <__gethex+0x2ee>
 8007792:	42ae      	cmp	r6, r5
 8007794:	d113      	bne.n	80077be <__gethex+0x2ee>
 8007796:	2e01      	cmp	r6, #1
 8007798:	d10b      	bne.n	80077b2 <__gethex+0x2e2>
 800779a:	9a04      	ldr	r2, [sp, #16]
 800779c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	2301      	movs	r3, #1
 80077a4:	6123      	str	r3, [r4, #16]
 80077a6:	f8c9 3000 	str.w	r3, [r9]
 80077aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077ac:	2762      	movs	r7, #98	; 0x62
 80077ae:	601c      	str	r4, [r3, #0]
 80077b0:	e723      	b.n	80075fa <__gethex+0x12a>
 80077b2:	1e71      	subs	r1, r6, #1
 80077b4:	4620      	mov	r0, r4
 80077b6:	f000 fe59 	bl	800846c <__any_on>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d1ed      	bne.n	800779a <__gethex+0x2ca>
 80077be:	ee18 0a10 	vmov	r0, s16
 80077c2:	4621      	mov	r1, r4
 80077c4:	f000 f9f8 	bl	8007bb8 <_Bfree>
 80077c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077ca:	2300      	movs	r3, #0
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	2750      	movs	r7, #80	; 0x50
 80077d0:	e713      	b.n	80075fa <__gethex+0x12a>
 80077d2:	bf00      	nop
 80077d4:	08009778 	.word	0x08009778
 80077d8:	080096fc 	.word	0x080096fc
 80077dc:	0800970d 	.word	0x0800970d
 80077e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1eb      	bne.n	80077be <__gethex+0x2ee>
 80077e6:	e7d8      	b.n	800779a <__gethex+0x2ca>
 80077e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1d5      	bne.n	800779a <__gethex+0x2ca>
 80077ee:	e7e6      	b.n	80077be <__gethex+0x2ee>
 80077f0:	1e6f      	subs	r7, r5, #1
 80077f2:	f1ba 0f00 	cmp.w	sl, #0
 80077f6:	d131      	bne.n	800785c <__gethex+0x38c>
 80077f8:	b127      	cbz	r7, 8007804 <__gethex+0x334>
 80077fa:	4639      	mov	r1, r7
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fe35 	bl	800846c <__any_on>
 8007802:	4682      	mov	sl, r0
 8007804:	117b      	asrs	r3, r7, #5
 8007806:	2101      	movs	r1, #1
 8007808:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800780c:	f007 071f 	and.w	r7, r7, #31
 8007810:	fa01 f707 	lsl.w	r7, r1, r7
 8007814:	421f      	tst	r7, r3
 8007816:	4629      	mov	r1, r5
 8007818:	4620      	mov	r0, r4
 800781a:	bf18      	it	ne
 800781c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007820:	1b76      	subs	r6, r6, r5
 8007822:	f7ff fded 	bl	8007400 <rshift>
 8007826:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800782a:	2702      	movs	r7, #2
 800782c:	f1ba 0f00 	cmp.w	sl, #0
 8007830:	d048      	beq.n	80078c4 <__gethex+0x3f4>
 8007832:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007836:	2b02      	cmp	r3, #2
 8007838:	d015      	beq.n	8007866 <__gethex+0x396>
 800783a:	2b03      	cmp	r3, #3
 800783c:	d017      	beq.n	800786e <__gethex+0x39e>
 800783e:	2b01      	cmp	r3, #1
 8007840:	d109      	bne.n	8007856 <__gethex+0x386>
 8007842:	f01a 0f02 	tst.w	sl, #2
 8007846:	d006      	beq.n	8007856 <__gethex+0x386>
 8007848:	f8d9 0000 	ldr.w	r0, [r9]
 800784c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007850:	f01a 0f01 	tst.w	sl, #1
 8007854:	d10e      	bne.n	8007874 <__gethex+0x3a4>
 8007856:	f047 0710 	orr.w	r7, r7, #16
 800785a:	e033      	b.n	80078c4 <__gethex+0x3f4>
 800785c:	f04f 0a01 	mov.w	sl, #1
 8007860:	e7d0      	b.n	8007804 <__gethex+0x334>
 8007862:	2701      	movs	r7, #1
 8007864:	e7e2      	b.n	800782c <__gethex+0x35c>
 8007866:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007868:	f1c3 0301 	rsb	r3, r3, #1
 800786c:	9315      	str	r3, [sp, #84]	; 0x54
 800786e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007870:	2b00      	cmp	r3, #0
 8007872:	d0f0      	beq.n	8007856 <__gethex+0x386>
 8007874:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007878:	f104 0314 	add.w	r3, r4, #20
 800787c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007880:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007884:	f04f 0c00 	mov.w	ip, #0
 8007888:	4618      	mov	r0, r3
 800788a:	f853 2b04 	ldr.w	r2, [r3], #4
 800788e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007892:	d01c      	beq.n	80078ce <__gethex+0x3fe>
 8007894:	3201      	adds	r2, #1
 8007896:	6002      	str	r2, [r0, #0]
 8007898:	2f02      	cmp	r7, #2
 800789a:	f104 0314 	add.w	r3, r4, #20
 800789e:	d13f      	bne.n	8007920 <__gethex+0x450>
 80078a0:	f8d8 2000 	ldr.w	r2, [r8]
 80078a4:	3a01      	subs	r2, #1
 80078a6:	42b2      	cmp	r2, r6
 80078a8:	d10a      	bne.n	80078c0 <__gethex+0x3f0>
 80078aa:	1171      	asrs	r1, r6, #5
 80078ac:	2201      	movs	r2, #1
 80078ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078b2:	f006 061f 	and.w	r6, r6, #31
 80078b6:	fa02 f606 	lsl.w	r6, r2, r6
 80078ba:	421e      	tst	r6, r3
 80078bc:	bf18      	it	ne
 80078be:	4617      	movne	r7, r2
 80078c0:	f047 0720 	orr.w	r7, r7, #32
 80078c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078c6:	601c      	str	r4, [r3, #0]
 80078c8:	9b04      	ldr	r3, [sp, #16]
 80078ca:	601d      	str	r5, [r3, #0]
 80078cc:	e695      	b.n	80075fa <__gethex+0x12a>
 80078ce:	4299      	cmp	r1, r3
 80078d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80078d4:	d8d8      	bhi.n	8007888 <__gethex+0x3b8>
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	459b      	cmp	fp, r3
 80078da:	db19      	blt.n	8007910 <__gethex+0x440>
 80078dc:	6861      	ldr	r1, [r4, #4]
 80078de:	ee18 0a10 	vmov	r0, s16
 80078e2:	3101      	adds	r1, #1
 80078e4:	f000 f928 	bl	8007b38 <_Balloc>
 80078e8:	4681      	mov	r9, r0
 80078ea:	b918      	cbnz	r0, 80078f4 <__gethex+0x424>
 80078ec:	4b1a      	ldr	r3, [pc, #104]	; (8007958 <__gethex+0x488>)
 80078ee:	4602      	mov	r2, r0
 80078f0:	2184      	movs	r1, #132	; 0x84
 80078f2:	e6a8      	b.n	8007646 <__gethex+0x176>
 80078f4:	6922      	ldr	r2, [r4, #16]
 80078f6:	3202      	adds	r2, #2
 80078f8:	f104 010c 	add.w	r1, r4, #12
 80078fc:	0092      	lsls	r2, r2, #2
 80078fe:	300c      	adds	r0, #12
 8007900:	f000 f90c 	bl	8007b1c <memcpy>
 8007904:	4621      	mov	r1, r4
 8007906:	ee18 0a10 	vmov	r0, s16
 800790a:	f000 f955 	bl	8007bb8 <_Bfree>
 800790e:	464c      	mov	r4, r9
 8007910:	6923      	ldr	r3, [r4, #16]
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007918:	6122      	str	r2, [r4, #16]
 800791a:	2201      	movs	r2, #1
 800791c:	615a      	str	r2, [r3, #20]
 800791e:	e7bb      	b.n	8007898 <__gethex+0x3c8>
 8007920:	6922      	ldr	r2, [r4, #16]
 8007922:	455a      	cmp	r2, fp
 8007924:	dd0b      	ble.n	800793e <__gethex+0x46e>
 8007926:	2101      	movs	r1, #1
 8007928:	4620      	mov	r0, r4
 800792a:	f7ff fd69 	bl	8007400 <rshift>
 800792e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007932:	3501      	adds	r5, #1
 8007934:	42ab      	cmp	r3, r5
 8007936:	f6ff aed0 	blt.w	80076da <__gethex+0x20a>
 800793a:	2701      	movs	r7, #1
 800793c:	e7c0      	b.n	80078c0 <__gethex+0x3f0>
 800793e:	f016 061f 	ands.w	r6, r6, #31
 8007942:	d0fa      	beq.n	800793a <__gethex+0x46a>
 8007944:	449a      	add	sl, r3
 8007946:	f1c6 0620 	rsb	r6, r6, #32
 800794a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800794e:	f000 f9e9 	bl	8007d24 <__hi0bits>
 8007952:	42b0      	cmp	r0, r6
 8007954:	dbe7      	blt.n	8007926 <__gethex+0x456>
 8007956:	e7f0      	b.n	800793a <__gethex+0x46a>
 8007958:	080096fc 	.word	0x080096fc

0800795c <L_shift>:
 800795c:	f1c2 0208 	rsb	r2, r2, #8
 8007960:	0092      	lsls	r2, r2, #2
 8007962:	b570      	push	{r4, r5, r6, lr}
 8007964:	f1c2 0620 	rsb	r6, r2, #32
 8007968:	6843      	ldr	r3, [r0, #4]
 800796a:	6804      	ldr	r4, [r0, #0]
 800796c:	fa03 f506 	lsl.w	r5, r3, r6
 8007970:	432c      	orrs	r4, r5
 8007972:	40d3      	lsrs	r3, r2
 8007974:	6004      	str	r4, [r0, #0]
 8007976:	f840 3f04 	str.w	r3, [r0, #4]!
 800797a:	4288      	cmp	r0, r1
 800797c:	d3f4      	bcc.n	8007968 <L_shift+0xc>
 800797e:	bd70      	pop	{r4, r5, r6, pc}

08007980 <__match>:
 8007980:	b530      	push	{r4, r5, lr}
 8007982:	6803      	ldr	r3, [r0, #0]
 8007984:	3301      	adds	r3, #1
 8007986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800798a:	b914      	cbnz	r4, 8007992 <__match+0x12>
 800798c:	6003      	str	r3, [r0, #0]
 800798e:	2001      	movs	r0, #1
 8007990:	bd30      	pop	{r4, r5, pc}
 8007992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007996:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800799a:	2d19      	cmp	r5, #25
 800799c:	bf98      	it	ls
 800799e:	3220      	addls	r2, #32
 80079a0:	42a2      	cmp	r2, r4
 80079a2:	d0f0      	beq.n	8007986 <__match+0x6>
 80079a4:	2000      	movs	r0, #0
 80079a6:	e7f3      	b.n	8007990 <__match+0x10>

080079a8 <__hexnan>:
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	680b      	ldr	r3, [r1, #0]
 80079ae:	6801      	ldr	r1, [r0, #0]
 80079b0:	115e      	asrs	r6, r3, #5
 80079b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079b6:	f013 031f 	ands.w	r3, r3, #31
 80079ba:	b087      	sub	sp, #28
 80079bc:	bf18      	it	ne
 80079be:	3604      	addne	r6, #4
 80079c0:	2500      	movs	r5, #0
 80079c2:	1f37      	subs	r7, r6, #4
 80079c4:	4682      	mov	sl, r0
 80079c6:	4690      	mov	r8, r2
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80079ce:	46b9      	mov	r9, r7
 80079d0:	463c      	mov	r4, r7
 80079d2:	9502      	str	r5, [sp, #8]
 80079d4:	46ab      	mov	fp, r5
 80079d6:	784a      	ldrb	r2, [r1, #1]
 80079d8:	1c4b      	adds	r3, r1, #1
 80079da:	9303      	str	r3, [sp, #12]
 80079dc:	b342      	cbz	r2, 8007a30 <__hexnan+0x88>
 80079de:	4610      	mov	r0, r2
 80079e0:	9105      	str	r1, [sp, #20]
 80079e2:	9204      	str	r2, [sp, #16]
 80079e4:	f7ff fd5e 	bl	80074a4 <__hexdig_fun>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d14f      	bne.n	8007a8c <__hexnan+0xe4>
 80079ec:	9a04      	ldr	r2, [sp, #16]
 80079ee:	9905      	ldr	r1, [sp, #20]
 80079f0:	2a20      	cmp	r2, #32
 80079f2:	d818      	bhi.n	8007a26 <__hexnan+0x7e>
 80079f4:	9b02      	ldr	r3, [sp, #8]
 80079f6:	459b      	cmp	fp, r3
 80079f8:	dd13      	ble.n	8007a22 <__hexnan+0x7a>
 80079fa:	454c      	cmp	r4, r9
 80079fc:	d206      	bcs.n	8007a0c <__hexnan+0x64>
 80079fe:	2d07      	cmp	r5, #7
 8007a00:	dc04      	bgt.n	8007a0c <__hexnan+0x64>
 8007a02:	462a      	mov	r2, r5
 8007a04:	4649      	mov	r1, r9
 8007a06:	4620      	mov	r0, r4
 8007a08:	f7ff ffa8 	bl	800795c <L_shift>
 8007a0c:	4544      	cmp	r4, r8
 8007a0e:	d950      	bls.n	8007ab2 <__hexnan+0x10a>
 8007a10:	2300      	movs	r3, #0
 8007a12:	f1a4 0904 	sub.w	r9, r4, #4
 8007a16:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a1a:	f8cd b008 	str.w	fp, [sp, #8]
 8007a1e:	464c      	mov	r4, r9
 8007a20:	461d      	mov	r5, r3
 8007a22:	9903      	ldr	r1, [sp, #12]
 8007a24:	e7d7      	b.n	80079d6 <__hexnan+0x2e>
 8007a26:	2a29      	cmp	r2, #41	; 0x29
 8007a28:	d156      	bne.n	8007ad8 <__hexnan+0x130>
 8007a2a:	3102      	adds	r1, #2
 8007a2c:	f8ca 1000 	str.w	r1, [sl]
 8007a30:	f1bb 0f00 	cmp.w	fp, #0
 8007a34:	d050      	beq.n	8007ad8 <__hexnan+0x130>
 8007a36:	454c      	cmp	r4, r9
 8007a38:	d206      	bcs.n	8007a48 <__hexnan+0xa0>
 8007a3a:	2d07      	cmp	r5, #7
 8007a3c:	dc04      	bgt.n	8007a48 <__hexnan+0xa0>
 8007a3e:	462a      	mov	r2, r5
 8007a40:	4649      	mov	r1, r9
 8007a42:	4620      	mov	r0, r4
 8007a44:	f7ff ff8a 	bl	800795c <L_shift>
 8007a48:	4544      	cmp	r4, r8
 8007a4a:	d934      	bls.n	8007ab6 <__hexnan+0x10e>
 8007a4c:	f1a8 0204 	sub.w	r2, r8, #4
 8007a50:	4623      	mov	r3, r4
 8007a52:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a56:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a5a:	429f      	cmp	r7, r3
 8007a5c:	d2f9      	bcs.n	8007a52 <__hexnan+0xaa>
 8007a5e:	1b3b      	subs	r3, r7, r4
 8007a60:	f023 0303 	bic.w	r3, r3, #3
 8007a64:	3304      	adds	r3, #4
 8007a66:	3401      	adds	r4, #1
 8007a68:	3e03      	subs	r6, #3
 8007a6a:	42b4      	cmp	r4, r6
 8007a6c:	bf88      	it	hi
 8007a6e:	2304      	movhi	r3, #4
 8007a70:	4443      	add	r3, r8
 8007a72:	2200      	movs	r2, #0
 8007a74:	f843 2b04 	str.w	r2, [r3], #4
 8007a78:	429f      	cmp	r7, r3
 8007a7a:	d2fb      	bcs.n	8007a74 <__hexnan+0xcc>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	b91b      	cbnz	r3, 8007a88 <__hexnan+0xe0>
 8007a80:	4547      	cmp	r7, r8
 8007a82:	d127      	bne.n	8007ad4 <__hexnan+0x12c>
 8007a84:	2301      	movs	r3, #1
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	2005      	movs	r0, #5
 8007a8a:	e026      	b.n	8007ada <__hexnan+0x132>
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	2d08      	cmp	r5, #8
 8007a90:	f10b 0b01 	add.w	fp, fp, #1
 8007a94:	dd06      	ble.n	8007aa4 <__hexnan+0xfc>
 8007a96:	4544      	cmp	r4, r8
 8007a98:	d9c3      	bls.n	8007a22 <__hexnan+0x7a>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007aa0:	2501      	movs	r5, #1
 8007aa2:	3c04      	subs	r4, #4
 8007aa4:	6822      	ldr	r2, [r4, #0]
 8007aa6:	f000 000f 	and.w	r0, r0, #15
 8007aaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007aae:	6022      	str	r2, [r4, #0]
 8007ab0:	e7b7      	b.n	8007a22 <__hexnan+0x7a>
 8007ab2:	2508      	movs	r5, #8
 8007ab4:	e7b5      	b.n	8007a22 <__hexnan+0x7a>
 8007ab6:	9b01      	ldr	r3, [sp, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0df      	beq.n	8007a7c <__hexnan+0xd4>
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac0:	f1c3 0320 	rsb	r3, r3, #32
 8007ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007acc:	401a      	ands	r2, r3
 8007ace:	f846 2c04 	str.w	r2, [r6, #-4]
 8007ad2:	e7d3      	b.n	8007a7c <__hexnan+0xd4>
 8007ad4:	3f04      	subs	r7, #4
 8007ad6:	e7d1      	b.n	8007a7c <__hexnan+0xd4>
 8007ad8:	2004      	movs	r0, #4
 8007ada:	b007      	add	sp, #28
 8007adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ae0 <_localeconv_r>:
 8007ae0:	4800      	ldr	r0, [pc, #0]	; (8007ae4 <_localeconv_r+0x4>)
 8007ae2:	4770      	bx	lr
 8007ae4:	20000168 	.word	0x20000168

08007ae8 <malloc>:
 8007ae8:	4b02      	ldr	r3, [pc, #8]	; (8007af4 <malloc+0xc>)
 8007aea:	4601      	mov	r1, r0
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	f000 bd3d 	b.w	800856c <_malloc_r>
 8007af2:	bf00      	nop
 8007af4:	20000010 	.word	0x20000010

08007af8 <__ascii_mbtowc>:
 8007af8:	b082      	sub	sp, #8
 8007afa:	b901      	cbnz	r1, 8007afe <__ascii_mbtowc+0x6>
 8007afc:	a901      	add	r1, sp, #4
 8007afe:	b142      	cbz	r2, 8007b12 <__ascii_mbtowc+0x1a>
 8007b00:	b14b      	cbz	r3, 8007b16 <__ascii_mbtowc+0x1e>
 8007b02:	7813      	ldrb	r3, [r2, #0]
 8007b04:	600b      	str	r3, [r1, #0]
 8007b06:	7812      	ldrb	r2, [r2, #0]
 8007b08:	1e10      	subs	r0, r2, #0
 8007b0a:	bf18      	it	ne
 8007b0c:	2001      	movne	r0, #1
 8007b0e:	b002      	add	sp, #8
 8007b10:	4770      	bx	lr
 8007b12:	4610      	mov	r0, r2
 8007b14:	e7fb      	b.n	8007b0e <__ascii_mbtowc+0x16>
 8007b16:	f06f 0001 	mvn.w	r0, #1
 8007b1a:	e7f8      	b.n	8007b0e <__ascii_mbtowc+0x16>

08007b1c <memcpy>:
 8007b1c:	440a      	add	r2, r1
 8007b1e:	4291      	cmp	r1, r2
 8007b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b24:	d100      	bne.n	8007b28 <memcpy+0xc>
 8007b26:	4770      	bx	lr
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b32:	4291      	cmp	r1, r2
 8007b34:	d1f9      	bne.n	8007b2a <memcpy+0xe>
 8007b36:	bd10      	pop	{r4, pc}

08007b38 <_Balloc>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	460d      	mov	r5, r1
 8007b40:	b976      	cbnz	r6, 8007b60 <_Balloc+0x28>
 8007b42:	2010      	movs	r0, #16
 8007b44:	f7ff ffd0 	bl	8007ae8 <malloc>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b4c:	b920      	cbnz	r0, 8007b58 <_Balloc+0x20>
 8007b4e:	4b18      	ldr	r3, [pc, #96]	; (8007bb0 <_Balloc+0x78>)
 8007b50:	4818      	ldr	r0, [pc, #96]	; (8007bb4 <_Balloc+0x7c>)
 8007b52:	2166      	movs	r1, #102	; 0x66
 8007b54:	f000 fef8 	bl	8008948 <__assert_func>
 8007b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b5c:	6006      	str	r6, [r0, #0]
 8007b5e:	60c6      	str	r6, [r0, #12]
 8007b60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b62:	68f3      	ldr	r3, [r6, #12]
 8007b64:	b183      	cbz	r3, 8007b88 <_Balloc+0x50>
 8007b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b6e:	b9b8      	cbnz	r0, 8007ba0 <_Balloc+0x68>
 8007b70:	2101      	movs	r1, #1
 8007b72:	fa01 f605 	lsl.w	r6, r1, r5
 8007b76:	1d72      	adds	r2, r6, #5
 8007b78:	0092      	lsls	r2, r2, #2
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 fc97 	bl	80084ae <_calloc_r>
 8007b80:	b160      	cbz	r0, 8007b9c <_Balloc+0x64>
 8007b82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b86:	e00e      	b.n	8007ba6 <_Balloc+0x6e>
 8007b88:	2221      	movs	r2, #33	; 0x21
 8007b8a:	2104      	movs	r1, #4
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 fc8e 	bl	80084ae <_calloc_r>
 8007b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b94:	60f0      	str	r0, [r6, #12]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e4      	bne.n	8007b66 <_Balloc+0x2e>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	6802      	ldr	r2, [r0, #0]
 8007ba2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bac:	e7f7      	b.n	8007b9e <_Balloc+0x66>
 8007bae:	bf00      	nop
 8007bb0:	08009686 	.word	0x08009686
 8007bb4:	0800978c 	.word	0x0800978c

08007bb8 <_Bfree>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	b976      	cbnz	r6, 8007be0 <_Bfree+0x28>
 8007bc2:	2010      	movs	r0, #16
 8007bc4:	f7ff ff90 	bl	8007ae8 <malloc>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6268      	str	r0, [r5, #36]	; 0x24
 8007bcc:	b920      	cbnz	r0, 8007bd8 <_Bfree+0x20>
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <_Bfree+0x3c>)
 8007bd0:	4809      	ldr	r0, [pc, #36]	; (8007bf8 <_Bfree+0x40>)
 8007bd2:	218a      	movs	r1, #138	; 0x8a
 8007bd4:	f000 feb8 	bl	8008948 <__assert_func>
 8007bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bdc:	6006      	str	r6, [r0, #0]
 8007bde:	60c6      	str	r6, [r0, #12]
 8007be0:	b13c      	cbz	r4, 8007bf2 <_Bfree+0x3a>
 8007be2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007be4:	6862      	ldr	r2, [r4, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bec:	6021      	str	r1, [r4, #0]
 8007bee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	08009686 	.word	0x08009686
 8007bf8:	0800978c 	.word	0x0800978c

08007bfc <__multadd>:
 8007bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c00:	690e      	ldr	r6, [r1, #16]
 8007c02:	4607      	mov	r7, r0
 8007c04:	4698      	mov	r8, r3
 8007c06:	460c      	mov	r4, r1
 8007c08:	f101 0014 	add.w	r0, r1, #20
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	6805      	ldr	r5, [r0, #0]
 8007c10:	b2a9      	uxth	r1, r5
 8007c12:	fb02 8101 	mla	r1, r2, r1, r8
 8007c16:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007c1a:	0c2d      	lsrs	r5, r5, #16
 8007c1c:	fb02 c505 	mla	r5, r2, r5, ip
 8007c20:	b289      	uxth	r1, r1
 8007c22:	3301      	adds	r3, #1
 8007c24:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007c28:	429e      	cmp	r6, r3
 8007c2a:	f840 1b04 	str.w	r1, [r0], #4
 8007c2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007c32:	dcec      	bgt.n	8007c0e <__multadd+0x12>
 8007c34:	f1b8 0f00 	cmp.w	r8, #0
 8007c38:	d022      	beq.n	8007c80 <__multadd+0x84>
 8007c3a:	68a3      	ldr	r3, [r4, #8]
 8007c3c:	42b3      	cmp	r3, r6
 8007c3e:	dc19      	bgt.n	8007c74 <__multadd+0x78>
 8007c40:	6861      	ldr	r1, [r4, #4]
 8007c42:	4638      	mov	r0, r7
 8007c44:	3101      	adds	r1, #1
 8007c46:	f7ff ff77 	bl	8007b38 <_Balloc>
 8007c4a:	4605      	mov	r5, r0
 8007c4c:	b928      	cbnz	r0, 8007c5a <__multadd+0x5e>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <__multadd+0x8c>)
 8007c52:	480e      	ldr	r0, [pc, #56]	; (8007c8c <__multadd+0x90>)
 8007c54:	21b5      	movs	r1, #181	; 0xb5
 8007c56:	f000 fe77 	bl	8008948 <__assert_func>
 8007c5a:	6922      	ldr	r2, [r4, #16]
 8007c5c:	3202      	adds	r2, #2
 8007c5e:	f104 010c 	add.w	r1, r4, #12
 8007c62:	0092      	lsls	r2, r2, #2
 8007c64:	300c      	adds	r0, #12
 8007c66:	f7ff ff59 	bl	8007b1c <memcpy>
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	f7ff ffa3 	bl	8007bb8 <_Bfree>
 8007c72:	462c      	mov	r4, r5
 8007c74:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007c78:	3601      	adds	r6, #1
 8007c7a:	f8c3 8014 	str.w	r8, [r3, #20]
 8007c7e:	6126      	str	r6, [r4, #16]
 8007c80:	4620      	mov	r0, r4
 8007c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c86:	bf00      	nop
 8007c88:	080096fc 	.word	0x080096fc
 8007c8c:	0800978c 	.word	0x0800978c

08007c90 <__s2b>:
 8007c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c94:	460c      	mov	r4, r1
 8007c96:	4615      	mov	r5, r2
 8007c98:	461f      	mov	r7, r3
 8007c9a:	2209      	movs	r2, #9
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	db09      	blt.n	8007cc0 <__s2b+0x30>
 8007cac:	4630      	mov	r0, r6
 8007cae:	f7ff ff43 	bl	8007b38 <_Balloc>
 8007cb2:	b940      	cbnz	r0, 8007cc6 <__s2b+0x36>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	4b19      	ldr	r3, [pc, #100]	; (8007d1c <__s2b+0x8c>)
 8007cb8:	4819      	ldr	r0, [pc, #100]	; (8007d20 <__s2b+0x90>)
 8007cba:	21ce      	movs	r1, #206	; 0xce
 8007cbc:	f000 fe44 	bl	8008948 <__assert_func>
 8007cc0:	0052      	lsls	r2, r2, #1
 8007cc2:	3101      	adds	r1, #1
 8007cc4:	e7f0      	b.n	8007ca8 <__s2b+0x18>
 8007cc6:	9b08      	ldr	r3, [sp, #32]
 8007cc8:	6143      	str	r3, [r0, #20]
 8007cca:	2d09      	cmp	r5, #9
 8007ccc:	f04f 0301 	mov.w	r3, #1
 8007cd0:	6103      	str	r3, [r0, #16]
 8007cd2:	dd16      	ble.n	8007d02 <__s2b+0x72>
 8007cd4:	f104 0909 	add.w	r9, r4, #9
 8007cd8:	46c8      	mov	r8, r9
 8007cda:	442c      	add	r4, r5
 8007cdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ce0:	4601      	mov	r1, r0
 8007ce2:	3b30      	subs	r3, #48	; 0x30
 8007ce4:	220a      	movs	r2, #10
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7ff ff88 	bl	8007bfc <__multadd>
 8007cec:	45a0      	cmp	r8, r4
 8007cee:	d1f5      	bne.n	8007cdc <__s2b+0x4c>
 8007cf0:	f1a5 0408 	sub.w	r4, r5, #8
 8007cf4:	444c      	add	r4, r9
 8007cf6:	1b2d      	subs	r5, r5, r4
 8007cf8:	1963      	adds	r3, r4, r5
 8007cfa:	42bb      	cmp	r3, r7
 8007cfc:	db04      	blt.n	8007d08 <__s2b+0x78>
 8007cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d02:	340a      	adds	r4, #10
 8007d04:	2509      	movs	r5, #9
 8007d06:	e7f6      	b.n	8007cf6 <__s2b+0x66>
 8007d08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	3b30      	subs	r3, #48	; 0x30
 8007d10:	220a      	movs	r2, #10
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7ff ff72 	bl	8007bfc <__multadd>
 8007d18:	e7ee      	b.n	8007cf8 <__s2b+0x68>
 8007d1a:	bf00      	nop
 8007d1c:	080096fc 	.word	0x080096fc
 8007d20:	0800978c 	.word	0x0800978c

08007d24 <__hi0bits>:
 8007d24:	0c03      	lsrs	r3, r0, #16
 8007d26:	041b      	lsls	r3, r3, #16
 8007d28:	b9d3      	cbnz	r3, 8007d60 <__hi0bits+0x3c>
 8007d2a:	0400      	lsls	r0, r0, #16
 8007d2c:	2310      	movs	r3, #16
 8007d2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d32:	bf04      	itt	eq
 8007d34:	0200      	lsleq	r0, r0, #8
 8007d36:	3308      	addeq	r3, #8
 8007d38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d3c:	bf04      	itt	eq
 8007d3e:	0100      	lsleq	r0, r0, #4
 8007d40:	3304      	addeq	r3, #4
 8007d42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d46:	bf04      	itt	eq
 8007d48:	0080      	lsleq	r0, r0, #2
 8007d4a:	3302      	addeq	r3, #2
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	db05      	blt.n	8007d5c <__hi0bits+0x38>
 8007d50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d54:	f103 0301 	add.w	r3, r3, #1
 8007d58:	bf08      	it	eq
 8007d5a:	2320      	moveq	r3, #32
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	4770      	bx	lr
 8007d60:	2300      	movs	r3, #0
 8007d62:	e7e4      	b.n	8007d2e <__hi0bits+0xa>

08007d64 <__lo0bits>:
 8007d64:	6803      	ldr	r3, [r0, #0]
 8007d66:	f013 0207 	ands.w	r2, r3, #7
 8007d6a:	4601      	mov	r1, r0
 8007d6c:	d00b      	beq.n	8007d86 <__lo0bits+0x22>
 8007d6e:	07da      	lsls	r2, r3, #31
 8007d70:	d424      	bmi.n	8007dbc <__lo0bits+0x58>
 8007d72:	0798      	lsls	r0, r3, #30
 8007d74:	bf49      	itett	mi
 8007d76:	085b      	lsrmi	r3, r3, #1
 8007d78:	089b      	lsrpl	r3, r3, #2
 8007d7a:	2001      	movmi	r0, #1
 8007d7c:	600b      	strmi	r3, [r1, #0]
 8007d7e:	bf5c      	itt	pl
 8007d80:	600b      	strpl	r3, [r1, #0]
 8007d82:	2002      	movpl	r0, #2
 8007d84:	4770      	bx	lr
 8007d86:	b298      	uxth	r0, r3
 8007d88:	b9b0      	cbnz	r0, 8007db8 <__lo0bits+0x54>
 8007d8a:	0c1b      	lsrs	r3, r3, #16
 8007d8c:	2010      	movs	r0, #16
 8007d8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d92:	bf04      	itt	eq
 8007d94:	0a1b      	lsreq	r3, r3, #8
 8007d96:	3008      	addeq	r0, #8
 8007d98:	071a      	lsls	r2, r3, #28
 8007d9a:	bf04      	itt	eq
 8007d9c:	091b      	lsreq	r3, r3, #4
 8007d9e:	3004      	addeq	r0, #4
 8007da0:	079a      	lsls	r2, r3, #30
 8007da2:	bf04      	itt	eq
 8007da4:	089b      	lsreq	r3, r3, #2
 8007da6:	3002      	addeq	r0, #2
 8007da8:	07da      	lsls	r2, r3, #31
 8007daa:	d403      	bmi.n	8007db4 <__lo0bits+0x50>
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	f100 0001 	add.w	r0, r0, #1
 8007db2:	d005      	beq.n	8007dc0 <__lo0bits+0x5c>
 8007db4:	600b      	str	r3, [r1, #0]
 8007db6:	4770      	bx	lr
 8007db8:	4610      	mov	r0, r2
 8007dba:	e7e8      	b.n	8007d8e <__lo0bits+0x2a>
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	4770      	bx	lr
 8007dc0:	2020      	movs	r0, #32
 8007dc2:	4770      	bx	lr

08007dc4 <__i2b>:
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	2101      	movs	r1, #1
 8007dca:	f7ff feb5 	bl	8007b38 <_Balloc>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	b928      	cbnz	r0, 8007dde <__i2b+0x1a>
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <__i2b+0x24>)
 8007dd4:	4805      	ldr	r0, [pc, #20]	; (8007dec <__i2b+0x28>)
 8007dd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007dda:	f000 fdb5 	bl	8008948 <__assert_func>
 8007dde:	2301      	movs	r3, #1
 8007de0:	6144      	str	r4, [r0, #20]
 8007de2:	6103      	str	r3, [r0, #16]
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	bf00      	nop
 8007de8:	080096fc 	.word	0x080096fc
 8007dec:	0800978c 	.word	0x0800978c

08007df0 <__multiply>:
 8007df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df4:	4614      	mov	r4, r2
 8007df6:	690a      	ldr	r2, [r1, #16]
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	bfb8      	it	lt
 8007dfe:	460b      	movlt	r3, r1
 8007e00:	460d      	mov	r5, r1
 8007e02:	bfbc      	itt	lt
 8007e04:	4625      	movlt	r5, r4
 8007e06:	461c      	movlt	r4, r3
 8007e08:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007e0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007e10:	68ab      	ldr	r3, [r5, #8]
 8007e12:	6869      	ldr	r1, [r5, #4]
 8007e14:	eb0a 0709 	add.w	r7, sl, r9
 8007e18:	42bb      	cmp	r3, r7
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	bfb8      	it	lt
 8007e1e:	3101      	addlt	r1, #1
 8007e20:	f7ff fe8a 	bl	8007b38 <_Balloc>
 8007e24:	b930      	cbnz	r0, 8007e34 <__multiply+0x44>
 8007e26:	4602      	mov	r2, r0
 8007e28:	4b42      	ldr	r3, [pc, #264]	; (8007f34 <__multiply+0x144>)
 8007e2a:	4843      	ldr	r0, [pc, #268]	; (8007f38 <__multiply+0x148>)
 8007e2c:	f240 115d 	movw	r1, #349	; 0x15d
 8007e30:	f000 fd8a 	bl	8008948 <__assert_func>
 8007e34:	f100 0614 	add.w	r6, r0, #20
 8007e38:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007e3c:	4633      	mov	r3, r6
 8007e3e:	2200      	movs	r2, #0
 8007e40:	4543      	cmp	r3, r8
 8007e42:	d31e      	bcc.n	8007e82 <__multiply+0x92>
 8007e44:	f105 0c14 	add.w	ip, r5, #20
 8007e48:	f104 0314 	add.w	r3, r4, #20
 8007e4c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007e50:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007e54:	9202      	str	r2, [sp, #8]
 8007e56:	ebac 0205 	sub.w	r2, ip, r5
 8007e5a:	3a15      	subs	r2, #21
 8007e5c:	f022 0203 	bic.w	r2, r2, #3
 8007e60:	3204      	adds	r2, #4
 8007e62:	f105 0115 	add.w	r1, r5, #21
 8007e66:	458c      	cmp	ip, r1
 8007e68:	bf38      	it	cc
 8007e6a:	2204      	movcc	r2, #4
 8007e6c:	9201      	str	r2, [sp, #4]
 8007e6e:	9a02      	ldr	r2, [sp, #8]
 8007e70:	9303      	str	r3, [sp, #12]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d808      	bhi.n	8007e88 <__multiply+0x98>
 8007e76:	2f00      	cmp	r7, #0
 8007e78:	dc55      	bgt.n	8007f26 <__multiply+0x136>
 8007e7a:	6107      	str	r7, [r0, #16]
 8007e7c:	b005      	add	sp, #20
 8007e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e82:	f843 2b04 	str.w	r2, [r3], #4
 8007e86:	e7db      	b.n	8007e40 <__multiply+0x50>
 8007e88:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e8c:	f1ba 0f00 	cmp.w	sl, #0
 8007e90:	d020      	beq.n	8007ed4 <__multiply+0xe4>
 8007e92:	f105 0e14 	add.w	lr, r5, #20
 8007e96:	46b1      	mov	r9, r6
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007e9e:	f8d9 b000 	ldr.w	fp, [r9]
 8007ea2:	b2a1      	uxth	r1, r4
 8007ea4:	fa1f fb8b 	uxth.w	fp, fp
 8007ea8:	fb0a b101 	mla	r1, sl, r1, fp
 8007eac:	4411      	add	r1, r2
 8007eae:	f8d9 2000 	ldr.w	r2, [r9]
 8007eb2:	0c24      	lsrs	r4, r4, #16
 8007eb4:	0c12      	lsrs	r2, r2, #16
 8007eb6:	fb0a 2404 	mla	r4, sl, r4, r2
 8007eba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007ebe:	b289      	uxth	r1, r1
 8007ec0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ec4:	45f4      	cmp	ip, lr
 8007ec6:	f849 1b04 	str.w	r1, [r9], #4
 8007eca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007ece:	d8e4      	bhi.n	8007e9a <__multiply+0xaa>
 8007ed0:	9901      	ldr	r1, [sp, #4]
 8007ed2:	5072      	str	r2, [r6, r1]
 8007ed4:	9a03      	ldr	r2, [sp, #12]
 8007ed6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007eda:	3304      	adds	r3, #4
 8007edc:	f1b9 0f00 	cmp.w	r9, #0
 8007ee0:	d01f      	beq.n	8007f22 <__multiply+0x132>
 8007ee2:	6834      	ldr	r4, [r6, #0]
 8007ee4:	f105 0114 	add.w	r1, r5, #20
 8007ee8:	46b6      	mov	lr, r6
 8007eea:	f04f 0a00 	mov.w	sl, #0
 8007eee:	880a      	ldrh	r2, [r1, #0]
 8007ef0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ef4:	fb09 b202 	mla	r2, r9, r2, fp
 8007ef8:	4492      	add	sl, r2
 8007efa:	b2a4      	uxth	r4, r4
 8007efc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007f00:	f84e 4b04 	str.w	r4, [lr], #4
 8007f04:	f851 4b04 	ldr.w	r4, [r1], #4
 8007f08:	f8be 2000 	ldrh.w	r2, [lr]
 8007f0c:	0c24      	lsrs	r4, r4, #16
 8007f0e:	fb09 2404 	mla	r4, r9, r4, r2
 8007f12:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007f16:	458c      	cmp	ip, r1
 8007f18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007f1c:	d8e7      	bhi.n	8007eee <__multiply+0xfe>
 8007f1e:	9a01      	ldr	r2, [sp, #4]
 8007f20:	50b4      	str	r4, [r6, r2]
 8007f22:	3604      	adds	r6, #4
 8007f24:	e7a3      	b.n	8007e6e <__multiply+0x7e>
 8007f26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1a5      	bne.n	8007e7a <__multiply+0x8a>
 8007f2e:	3f01      	subs	r7, #1
 8007f30:	e7a1      	b.n	8007e76 <__multiply+0x86>
 8007f32:	bf00      	nop
 8007f34:	080096fc 	.word	0x080096fc
 8007f38:	0800978c 	.word	0x0800978c

08007f3c <__pow5mult>:
 8007f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f40:	4615      	mov	r5, r2
 8007f42:	f012 0203 	ands.w	r2, r2, #3
 8007f46:	4606      	mov	r6, r0
 8007f48:	460f      	mov	r7, r1
 8007f4a:	d007      	beq.n	8007f5c <__pow5mult+0x20>
 8007f4c:	4c25      	ldr	r4, [pc, #148]	; (8007fe4 <__pow5mult+0xa8>)
 8007f4e:	3a01      	subs	r2, #1
 8007f50:	2300      	movs	r3, #0
 8007f52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f56:	f7ff fe51 	bl	8007bfc <__multadd>
 8007f5a:	4607      	mov	r7, r0
 8007f5c:	10ad      	asrs	r5, r5, #2
 8007f5e:	d03d      	beq.n	8007fdc <__pow5mult+0xa0>
 8007f60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f62:	b97c      	cbnz	r4, 8007f84 <__pow5mult+0x48>
 8007f64:	2010      	movs	r0, #16
 8007f66:	f7ff fdbf 	bl	8007ae8 <malloc>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	6270      	str	r0, [r6, #36]	; 0x24
 8007f6e:	b928      	cbnz	r0, 8007f7c <__pow5mult+0x40>
 8007f70:	4b1d      	ldr	r3, [pc, #116]	; (8007fe8 <__pow5mult+0xac>)
 8007f72:	481e      	ldr	r0, [pc, #120]	; (8007fec <__pow5mult+0xb0>)
 8007f74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f78:	f000 fce6 	bl	8008948 <__assert_func>
 8007f7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f80:	6004      	str	r4, [r0, #0]
 8007f82:	60c4      	str	r4, [r0, #12]
 8007f84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f8c:	b94c      	cbnz	r4, 8007fa2 <__pow5mult+0x66>
 8007f8e:	f240 2171 	movw	r1, #625	; 0x271
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7ff ff16 	bl	8007dc4 <__i2b>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	6003      	str	r3, [r0, #0]
 8007fa2:	f04f 0900 	mov.w	r9, #0
 8007fa6:	07eb      	lsls	r3, r5, #31
 8007fa8:	d50a      	bpl.n	8007fc0 <__pow5mult+0x84>
 8007faa:	4639      	mov	r1, r7
 8007fac:	4622      	mov	r2, r4
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff ff1e 	bl	8007df0 <__multiply>
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	4680      	mov	r8, r0
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7ff fdfd 	bl	8007bb8 <_Bfree>
 8007fbe:	4647      	mov	r7, r8
 8007fc0:	106d      	asrs	r5, r5, #1
 8007fc2:	d00b      	beq.n	8007fdc <__pow5mult+0xa0>
 8007fc4:	6820      	ldr	r0, [r4, #0]
 8007fc6:	b938      	cbnz	r0, 8007fd8 <__pow5mult+0x9c>
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4621      	mov	r1, r4
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7ff ff0f 	bl	8007df0 <__multiply>
 8007fd2:	6020      	str	r0, [r4, #0]
 8007fd4:	f8c0 9000 	str.w	r9, [r0]
 8007fd8:	4604      	mov	r4, r0
 8007fda:	e7e4      	b.n	8007fa6 <__pow5mult+0x6a>
 8007fdc:	4638      	mov	r0, r7
 8007fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe2:	bf00      	nop
 8007fe4:	080098e0 	.word	0x080098e0
 8007fe8:	08009686 	.word	0x08009686
 8007fec:	0800978c 	.word	0x0800978c

08007ff0 <__lshift>:
 8007ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	6849      	ldr	r1, [r1, #4]
 8007ff8:	6923      	ldr	r3, [r4, #16]
 8007ffa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ffe:	68a3      	ldr	r3, [r4, #8]
 8008000:	4607      	mov	r7, r0
 8008002:	4691      	mov	r9, r2
 8008004:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008008:	f108 0601 	add.w	r6, r8, #1
 800800c:	42b3      	cmp	r3, r6
 800800e:	db0b      	blt.n	8008028 <__lshift+0x38>
 8008010:	4638      	mov	r0, r7
 8008012:	f7ff fd91 	bl	8007b38 <_Balloc>
 8008016:	4605      	mov	r5, r0
 8008018:	b948      	cbnz	r0, 800802e <__lshift+0x3e>
 800801a:	4602      	mov	r2, r0
 800801c:	4b28      	ldr	r3, [pc, #160]	; (80080c0 <__lshift+0xd0>)
 800801e:	4829      	ldr	r0, [pc, #164]	; (80080c4 <__lshift+0xd4>)
 8008020:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008024:	f000 fc90 	bl	8008948 <__assert_func>
 8008028:	3101      	adds	r1, #1
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	e7ee      	b.n	800800c <__lshift+0x1c>
 800802e:	2300      	movs	r3, #0
 8008030:	f100 0114 	add.w	r1, r0, #20
 8008034:	f100 0210 	add.w	r2, r0, #16
 8008038:	4618      	mov	r0, r3
 800803a:	4553      	cmp	r3, sl
 800803c:	db33      	blt.n	80080a6 <__lshift+0xb6>
 800803e:	6920      	ldr	r0, [r4, #16]
 8008040:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008044:	f104 0314 	add.w	r3, r4, #20
 8008048:	f019 091f 	ands.w	r9, r9, #31
 800804c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008050:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008054:	d02b      	beq.n	80080ae <__lshift+0xbe>
 8008056:	f1c9 0e20 	rsb	lr, r9, #32
 800805a:	468a      	mov	sl, r1
 800805c:	2200      	movs	r2, #0
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	fa00 f009 	lsl.w	r0, r0, r9
 8008064:	4302      	orrs	r2, r0
 8008066:	f84a 2b04 	str.w	r2, [sl], #4
 800806a:	f853 2b04 	ldr.w	r2, [r3], #4
 800806e:	459c      	cmp	ip, r3
 8008070:	fa22 f20e 	lsr.w	r2, r2, lr
 8008074:	d8f3      	bhi.n	800805e <__lshift+0x6e>
 8008076:	ebac 0304 	sub.w	r3, ip, r4
 800807a:	3b15      	subs	r3, #21
 800807c:	f023 0303 	bic.w	r3, r3, #3
 8008080:	3304      	adds	r3, #4
 8008082:	f104 0015 	add.w	r0, r4, #21
 8008086:	4584      	cmp	ip, r0
 8008088:	bf38      	it	cc
 800808a:	2304      	movcc	r3, #4
 800808c:	50ca      	str	r2, [r1, r3]
 800808e:	b10a      	cbz	r2, 8008094 <__lshift+0xa4>
 8008090:	f108 0602 	add.w	r6, r8, #2
 8008094:	3e01      	subs	r6, #1
 8008096:	4638      	mov	r0, r7
 8008098:	612e      	str	r6, [r5, #16]
 800809a:	4621      	mov	r1, r4
 800809c:	f7ff fd8c 	bl	8007bb8 <_Bfree>
 80080a0:	4628      	mov	r0, r5
 80080a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80080aa:	3301      	adds	r3, #1
 80080ac:	e7c5      	b.n	800803a <__lshift+0x4a>
 80080ae:	3904      	subs	r1, #4
 80080b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80080b8:	459c      	cmp	ip, r3
 80080ba:	d8f9      	bhi.n	80080b0 <__lshift+0xc0>
 80080bc:	e7ea      	b.n	8008094 <__lshift+0xa4>
 80080be:	bf00      	nop
 80080c0:	080096fc 	.word	0x080096fc
 80080c4:	0800978c 	.word	0x0800978c

080080c8 <__mcmp>:
 80080c8:	b530      	push	{r4, r5, lr}
 80080ca:	6902      	ldr	r2, [r0, #16]
 80080cc:	690c      	ldr	r4, [r1, #16]
 80080ce:	1b12      	subs	r2, r2, r4
 80080d0:	d10e      	bne.n	80080f0 <__mcmp+0x28>
 80080d2:	f100 0314 	add.w	r3, r0, #20
 80080d6:	3114      	adds	r1, #20
 80080d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80080dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80080e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80080e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80080e8:	42a5      	cmp	r5, r4
 80080ea:	d003      	beq.n	80080f4 <__mcmp+0x2c>
 80080ec:	d305      	bcc.n	80080fa <__mcmp+0x32>
 80080ee:	2201      	movs	r2, #1
 80080f0:	4610      	mov	r0, r2
 80080f2:	bd30      	pop	{r4, r5, pc}
 80080f4:	4283      	cmp	r3, r0
 80080f6:	d3f3      	bcc.n	80080e0 <__mcmp+0x18>
 80080f8:	e7fa      	b.n	80080f0 <__mcmp+0x28>
 80080fa:	f04f 32ff 	mov.w	r2, #4294967295
 80080fe:	e7f7      	b.n	80080f0 <__mcmp+0x28>

08008100 <__mdiff>:
 8008100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	460c      	mov	r4, r1
 8008106:	4606      	mov	r6, r0
 8008108:	4611      	mov	r1, r2
 800810a:	4620      	mov	r0, r4
 800810c:	4617      	mov	r7, r2
 800810e:	f7ff ffdb 	bl	80080c8 <__mcmp>
 8008112:	1e05      	subs	r5, r0, #0
 8008114:	d110      	bne.n	8008138 <__mdiff+0x38>
 8008116:	4629      	mov	r1, r5
 8008118:	4630      	mov	r0, r6
 800811a:	f7ff fd0d 	bl	8007b38 <_Balloc>
 800811e:	b930      	cbnz	r0, 800812e <__mdiff+0x2e>
 8008120:	4b39      	ldr	r3, [pc, #228]	; (8008208 <__mdiff+0x108>)
 8008122:	4602      	mov	r2, r0
 8008124:	f240 2132 	movw	r1, #562	; 0x232
 8008128:	4838      	ldr	r0, [pc, #224]	; (800820c <__mdiff+0x10c>)
 800812a:	f000 fc0d 	bl	8008948 <__assert_func>
 800812e:	2301      	movs	r3, #1
 8008130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008138:	bfa4      	itt	ge
 800813a:	463b      	movge	r3, r7
 800813c:	4627      	movge	r7, r4
 800813e:	4630      	mov	r0, r6
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	bfa6      	itte	ge
 8008144:	461c      	movge	r4, r3
 8008146:	2500      	movge	r5, #0
 8008148:	2501      	movlt	r5, #1
 800814a:	f7ff fcf5 	bl	8007b38 <_Balloc>
 800814e:	b920      	cbnz	r0, 800815a <__mdiff+0x5a>
 8008150:	4b2d      	ldr	r3, [pc, #180]	; (8008208 <__mdiff+0x108>)
 8008152:	4602      	mov	r2, r0
 8008154:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008158:	e7e6      	b.n	8008128 <__mdiff+0x28>
 800815a:	693e      	ldr	r6, [r7, #16]
 800815c:	60c5      	str	r5, [r0, #12]
 800815e:	6925      	ldr	r5, [r4, #16]
 8008160:	f107 0114 	add.w	r1, r7, #20
 8008164:	f104 0914 	add.w	r9, r4, #20
 8008168:	f100 0e14 	add.w	lr, r0, #20
 800816c:	f107 0210 	add.w	r2, r7, #16
 8008170:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008174:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008178:	46f2      	mov	sl, lr
 800817a:	2700      	movs	r7, #0
 800817c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008180:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008184:	fa1f f883 	uxth.w	r8, r3
 8008188:	fa17 f78b 	uxtah	r7, r7, fp
 800818c:	0c1b      	lsrs	r3, r3, #16
 800818e:	eba7 0808 	sub.w	r8, r7, r8
 8008192:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008196:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800819a:	fa1f f888 	uxth.w	r8, r8
 800819e:	141f      	asrs	r7, r3, #16
 80081a0:	454d      	cmp	r5, r9
 80081a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80081a6:	f84a 3b04 	str.w	r3, [sl], #4
 80081aa:	d8e7      	bhi.n	800817c <__mdiff+0x7c>
 80081ac:	1b2b      	subs	r3, r5, r4
 80081ae:	3b15      	subs	r3, #21
 80081b0:	f023 0303 	bic.w	r3, r3, #3
 80081b4:	3304      	adds	r3, #4
 80081b6:	3415      	adds	r4, #21
 80081b8:	42a5      	cmp	r5, r4
 80081ba:	bf38      	it	cc
 80081bc:	2304      	movcc	r3, #4
 80081be:	4419      	add	r1, r3
 80081c0:	4473      	add	r3, lr
 80081c2:	469e      	mov	lr, r3
 80081c4:	460d      	mov	r5, r1
 80081c6:	4565      	cmp	r5, ip
 80081c8:	d30e      	bcc.n	80081e8 <__mdiff+0xe8>
 80081ca:	f10c 0203 	add.w	r2, ip, #3
 80081ce:	1a52      	subs	r2, r2, r1
 80081d0:	f022 0203 	bic.w	r2, r2, #3
 80081d4:	3903      	subs	r1, #3
 80081d6:	458c      	cmp	ip, r1
 80081d8:	bf38      	it	cc
 80081da:	2200      	movcc	r2, #0
 80081dc:	441a      	add	r2, r3
 80081de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80081e2:	b17b      	cbz	r3, 8008204 <__mdiff+0x104>
 80081e4:	6106      	str	r6, [r0, #16]
 80081e6:	e7a5      	b.n	8008134 <__mdiff+0x34>
 80081e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80081ec:	fa17 f488 	uxtah	r4, r7, r8
 80081f0:	1422      	asrs	r2, r4, #16
 80081f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80081f6:	b2a4      	uxth	r4, r4
 80081f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80081fc:	f84e 4b04 	str.w	r4, [lr], #4
 8008200:	1417      	asrs	r7, r2, #16
 8008202:	e7e0      	b.n	80081c6 <__mdiff+0xc6>
 8008204:	3e01      	subs	r6, #1
 8008206:	e7ea      	b.n	80081de <__mdiff+0xde>
 8008208:	080096fc 	.word	0x080096fc
 800820c:	0800978c 	.word	0x0800978c

08008210 <__ulp>:
 8008210:	b082      	sub	sp, #8
 8008212:	ed8d 0b00 	vstr	d0, [sp]
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	4912      	ldr	r1, [pc, #72]	; (8008264 <__ulp+0x54>)
 800821a:	4019      	ands	r1, r3
 800821c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008220:	2900      	cmp	r1, #0
 8008222:	dd05      	ble.n	8008230 <__ulp+0x20>
 8008224:	2200      	movs	r2, #0
 8008226:	460b      	mov	r3, r1
 8008228:	ec43 2b10 	vmov	d0, r2, r3
 800822c:	b002      	add	sp, #8
 800822e:	4770      	bx	lr
 8008230:	4249      	negs	r1, r1
 8008232:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008236:	ea4f 5021 	mov.w	r0, r1, asr #20
 800823a:	f04f 0200 	mov.w	r2, #0
 800823e:	f04f 0300 	mov.w	r3, #0
 8008242:	da04      	bge.n	800824e <__ulp+0x3e>
 8008244:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008248:	fa41 f300 	asr.w	r3, r1, r0
 800824c:	e7ec      	b.n	8008228 <__ulp+0x18>
 800824e:	f1a0 0114 	sub.w	r1, r0, #20
 8008252:	291e      	cmp	r1, #30
 8008254:	bfda      	itte	le
 8008256:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800825a:	fa20 f101 	lsrle.w	r1, r0, r1
 800825e:	2101      	movgt	r1, #1
 8008260:	460a      	mov	r2, r1
 8008262:	e7e1      	b.n	8008228 <__ulp+0x18>
 8008264:	7ff00000 	.word	0x7ff00000

08008268 <__b2d>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	6905      	ldr	r5, [r0, #16]
 800826c:	f100 0714 	add.w	r7, r0, #20
 8008270:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008274:	1f2e      	subs	r6, r5, #4
 8008276:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800827a:	4620      	mov	r0, r4
 800827c:	f7ff fd52 	bl	8007d24 <__hi0bits>
 8008280:	f1c0 0320 	rsb	r3, r0, #32
 8008284:	280a      	cmp	r0, #10
 8008286:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008304 <__b2d+0x9c>
 800828a:	600b      	str	r3, [r1, #0]
 800828c:	dc14      	bgt.n	80082b8 <__b2d+0x50>
 800828e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008292:	fa24 f10e 	lsr.w	r1, r4, lr
 8008296:	42b7      	cmp	r7, r6
 8008298:	ea41 030c 	orr.w	r3, r1, ip
 800829c:	bf34      	ite	cc
 800829e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80082a2:	2100      	movcs	r1, #0
 80082a4:	3015      	adds	r0, #21
 80082a6:	fa04 f000 	lsl.w	r0, r4, r0
 80082aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80082ae:	ea40 0201 	orr.w	r2, r0, r1
 80082b2:	ec43 2b10 	vmov	d0, r2, r3
 80082b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b8:	42b7      	cmp	r7, r6
 80082ba:	bf3a      	itte	cc
 80082bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80082c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80082c4:	2100      	movcs	r1, #0
 80082c6:	380b      	subs	r0, #11
 80082c8:	d017      	beq.n	80082fa <__b2d+0x92>
 80082ca:	f1c0 0c20 	rsb	ip, r0, #32
 80082ce:	fa04 f500 	lsl.w	r5, r4, r0
 80082d2:	42be      	cmp	r6, r7
 80082d4:	fa21 f40c 	lsr.w	r4, r1, ip
 80082d8:	ea45 0504 	orr.w	r5, r5, r4
 80082dc:	bf8c      	ite	hi
 80082de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80082e2:	2400      	movls	r4, #0
 80082e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80082e8:	fa01 f000 	lsl.w	r0, r1, r0
 80082ec:	fa24 f40c 	lsr.w	r4, r4, ip
 80082f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082f4:	ea40 0204 	orr.w	r2, r0, r4
 80082f8:	e7db      	b.n	80082b2 <__b2d+0x4a>
 80082fa:	ea44 030c 	orr.w	r3, r4, ip
 80082fe:	460a      	mov	r2, r1
 8008300:	e7d7      	b.n	80082b2 <__b2d+0x4a>
 8008302:	bf00      	nop
 8008304:	3ff00000 	.word	0x3ff00000

08008308 <__d2b>:
 8008308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800830c:	4689      	mov	r9, r1
 800830e:	2101      	movs	r1, #1
 8008310:	ec57 6b10 	vmov	r6, r7, d0
 8008314:	4690      	mov	r8, r2
 8008316:	f7ff fc0f 	bl	8007b38 <_Balloc>
 800831a:	4604      	mov	r4, r0
 800831c:	b930      	cbnz	r0, 800832c <__d2b+0x24>
 800831e:	4602      	mov	r2, r0
 8008320:	4b25      	ldr	r3, [pc, #148]	; (80083b8 <__d2b+0xb0>)
 8008322:	4826      	ldr	r0, [pc, #152]	; (80083bc <__d2b+0xb4>)
 8008324:	f240 310a 	movw	r1, #778	; 0x30a
 8008328:	f000 fb0e 	bl	8008948 <__assert_func>
 800832c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008334:	bb35      	cbnz	r5, 8008384 <__d2b+0x7c>
 8008336:	2e00      	cmp	r6, #0
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	d028      	beq.n	800838e <__d2b+0x86>
 800833c:	4668      	mov	r0, sp
 800833e:	9600      	str	r6, [sp, #0]
 8008340:	f7ff fd10 	bl	8007d64 <__lo0bits>
 8008344:	9900      	ldr	r1, [sp, #0]
 8008346:	b300      	cbz	r0, 800838a <__d2b+0x82>
 8008348:	9a01      	ldr	r2, [sp, #4]
 800834a:	f1c0 0320 	rsb	r3, r0, #32
 800834e:	fa02 f303 	lsl.w	r3, r2, r3
 8008352:	430b      	orrs	r3, r1
 8008354:	40c2      	lsrs	r2, r0
 8008356:	6163      	str	r3, [r4, #20]
 8008358:	9201      	str	r2, [sp, #4]
 800835a:	9b01      	ldr	r3, [sp, #4]
 800835c:	61a3      	str	r3, [r4, #24]
 800835e:	2b00      	cmp	r3, #0
 8008360:	bf14      	ite	ne
 8008362:	2202      	movne	r2, #2
 8008364:	2201      	moveq	r2, #1
 8008366:	6122      	str	r2, [r4, #16]
 8008368:	b1d5      	cbz	r5, 80083a0 <__d2b+0x98>
 800836a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800836e:	4405      	add	r5, r0
 8008370:	f8c9 5000 	str.w	r5, [r9]
 8008374:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008378:	f8c8 0000 	str.w	r0, [r8]
 800837c:	4620      	mov	r0, r4
 800837e:	b003      	add	sp, #12
 8008380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008388:	e7d5      	b.n	8008336 <__d2b+0x2e>
 800838a:	6161      	str	r1, [r4, #20]
 800838c:	e7e5      	b.n	800835a <__d2b+0x52>
 800838e:	a801      	add	r0, sp, #4
 8008390:	f7ff fce8 	bl	8007d64 <__lo0bits>
 8008394:	9b01      	ldr	r3, [sp, #4]
 8008396:	6163      	str	r3, [r4, #20]
 8008398:	2201      	movs	r2, #1
 800839a:	6122      	str	r2, [r4, #16]
 800839c:	3020      	adds	r0, #32
 800839e:	e7e3      	b.n	8008368 <__d2b+0x60>
 80083a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083a8:	f8c9 0000 	str.w	r0, [r9]
 80083ac:	6918      	ldr	r0, [r3, #16]
 80083ae:	f7ff fcb9 	bl	8007d24 <__hi0bits>
 80083b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083b6:	e7df      	b.n	8008378 <__d2b+0x70>
 80083b8:	080096fc 	.word	0x080096fc
 80083bc:	0800978c 	.word	0x0800978c

080083c0 <__ratio>:
 80083c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	4688      	mov	r8, r1
 80083c6:	4669      	mov	r1, sp
 80083c8:	4681      	mov	r9, r0
 80083ca:	f7ff ff4d 	bl	8008268 <__b2d>
 80083ce:	a901      	add	r1, sp, #4
 80083d0:	4640      	mov	r0, r8
 80083d2:	ec55 4b10 	vmov	r4, r5, d0
 80083d6:	f7ff ff47 	bl	8008268 <__b2d>
 80083da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80083e2:	eba3 0c02 	sub.w	ip, r3, r2
 80083e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80083f0:	ec51 0b10 	vmov	r0, r1, d0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfd6      	itet	le
 80083f8:	460a      	movle	r2, r1
 80083fa:	462a      	movgt	r2, r5
 80083fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008400:	468b      	mov	fp, r1
 8008402:	462f      	mov	r7, r5
 8008404:	bfd4      	ite	le
 8008406:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800840a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800840e:	4620      	mov	r0, r4
 8008410:	ee10 2a10 	vmov	r2, s0
 8008414:	465b      	mov	r3, fp
 8008416:	4639      	mov	r1, r7
 8008418:	f7f8 fa38 	bl	800088c <__aeabi_ddiv>
 800841c:	ec41 0b10 	vmov	d0, r0, r1
 8008420:	b003      	add	sp, #12
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008426 <__copybits>:
 8008426:	3901      	subs	r1, #1
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	1149      	asrs	r1, r1, #5
 800842c:	6914      	ldr	r4, [r2, #16]
 800842e:	3101      	adds	r1, #1
 8008430:	f102 0314 	add.w	r3, r2, #20
 8008434:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008438:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800843c:	1f05      	subs	r5, r0, #4
 800843e:	42a3      	cmp	r3, r4
 8008440:	d30c      	bcc.n	800845c <__copybits+0x36>
 8008442:	1aa3      	subs	r3, r4, r2
 8008444:	3b11      	subs	r3, #17
 8008446:	f023 0303 	bic.w	r3, r3, #3
 800844a:	3211      	adds	r2, #17
 800844c:	42a2      	cmp	r2, r4
 800844e:	bf88      	it	hi
 8008450:	2300      	movhi	r3, #0
 8008452:	4418      	add	r0, r3
 8008454:	2300      	movs	r3, #0
 8008456:	4288      	cmp	r0, r1
 8008458:	d305      	bcc.n	8008466 <__copybits+0x40>
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008460:	f845 6f04 	str.w	r6, [r5, #4]!
 8008464:	e7eb      	b.n	800843e <__copybits+0x18>
 8008466:	f840 3b04 	str.w	r3, [r0], #4
 800846a:	e7f4      	b.n	8008456 <__copybits+0x30>

0800846c <__any_on>:
 800846c:	f100 0214 	add.w	r2, r0, #20
 8008470:	6900      	ldr	r0, [r0, #16]
 8008472:	114b      	asrs	r3, r1, #5
 8008474:	4298      	cmp	r0, r3
 8008476:	b510      	push	{r4, lr}
 8008478:	db11      	blt.n	800849e <__any_on+0x32>
 800847a:	dd0a      	ble.n	8008492 <__any_on+0x26>
 800847c:	f011 011f 	ands.w	r1, r1, #31
 8008480:	d007      	beq.n	8008492 <__any_on+0x26>
 8008482:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008486:	fa24 f001 	lsr.w	r0, r4, r1
 800848a:	fa00 f101 	lsl.w	r1, r0, r1
 800848e:	428c      	cmp	r4, r1
 8008490:	d10b      	bne.n	80084aa <__any_on+0x3e>
 8008492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008496:	4293      	cmp	r3, r2
 8008498:	d803      	bhi.n	80084a2 <__any_on+0x36>
 800849a:	2000      	movs	r0, #0
 800849c:	bd10      	pop	{r4, pc}
 800849e:	4603      	mov	r3, r0
 80084a0:	e7f7      	b.n	8008492 <__any_on+0x26>
 80084a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084a6:	2900      	cmp	r1, #0
 80084a8:	d0f5      	beq.n	8008496 <__any_on+0x2a>
 80084aa:	2001      	movs	r0, #1
 80084ac:	e7f6      	b.n	800849c <__any_on+0x30>

080084ae <_calloc_r>:
 80084ae:	b513      	push	{r0, r1, r4, lr}
 80084b0:	434a      	muls	r2, r1
 80084b2:	4611      	mov	r1, r2
 80084b4:	9201      	str	r2, [sp, #4]
 80084b6:	f000 f859 	bl	800856c <_malloc_r>
 80084ba:	4604      	mov	r4, r0
 80084bc:	b118      	cbz	r0, 80084c6 <_calloc_r+0x18>
 80084be:	9a01      	ldr	r2, [sp, #4]
 80084c0:	2100      	movs	r1, #0
 80084c2:	f7fc fbc7 	bl	8004c54 <memset>
 80084c6:	4620      	mov	r0, r4
 80084c8:	b002      	add	sp, #8
 80084ca:	bd10      	pop	{r4, pc}

080084cc <_free_r>:
 80084cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ce:	2900      	cmp	r1, #0
 80084d0:	d048      	beq.n	8008564 <_free_r+0x98>
 80084d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d6:	9001      	str	r0, [sp, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f1a1 0404 	sub.w	r4, r1, #4
 80084de:	bfb8      	it	lt
 80084e0:	18e4      	addlt	r4, r4, r3
 80084e2:	f000 fa7b 	bl	80089dc <__malloc_lock>
 80084e6:	4a20      	ldr	r2, [pc, #128]	; (8008568 <_free_r+0x9c>)
 80084e8:	9801      	ldr	r0, [sp, #4]
 80084ea:	6813      	ldr	r3, [r2, #0]
 80084ec:	4615      	mov	r5, r2
 80084ee:	b933      	cbnz	r3, 80084fe <_free_r+0x32>
 80084f0:	6063      	str	r3, [r4, #4]
 80084f2:	6014      	str	r4, [r2, #0]
 80084f4:	b003      	add	sp, #12
 80084f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084fa:	f000 ba75 	b.w	80089e8 <__malloc_unlock>
 80084fe:	42a3      	cmp	r3, r4
 8008500:	d90b      	bls.n	800851a <_free_r+0x4e>
 8008502:	6821      	ldr	r1, [r4, #0]
 8008504:	1862      	adds	r2, r4, r1
 8008506:	4293      	cmp	r3, r2
 8008508:	bf04      	itt	eq
 800850a:	681a      	ldreq	r2, [r3, #0]
 800850c:	685b      	ldreq	r3, [r3, #4]
 800850e:	6063      	str	r3, [r4, #4]
 8008510:	bf04      	itt	eq
 8008512:	1852      	addeq	r2, r2, r1
 8008514:	6022      	streq	r2, [r4, #0]
 8008516:	602c      	str	r4, [r5, #0]
 8008518:	e7ec      	b.n	80084f4 <_free_r+0x28>
 800851a:	461a      	mov	r2, r3
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	b10b      	cbz	r3, 8008524 <_free_r+0x58>
 8008520:	42a3      	cmp	r3, r4
 8008522:	d9fa      	bls.n	800851a <_free_r+0x4e>
 8008524:	6811      	ldr	r1, [r2, #0]
 8008526:	1855      	adds	r5, r2, r1
 8008528:	42a5      	cmp	r5, r4
 800852a:	d10b      	bne.n	8008544 <_free_r+0x78>
 800852c:	6824      	ldr	r4, [r4, #0]
 800852e:	4421      	add	r1, r4
 8008530:	1854      	adds	r4, r2, r1
 8008532:	42a3      	cmp	r3, r4
 8008534:	6011      	str	r1, [r2, #0]
 8008536:	d1dd      	bne.n	80084f4 <_free_r+0x28>
 8008538:	681c      	ldr	r4, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	6053      	str	r3, [r2, #4]
 800853e:	4421      	add	r1, r4
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	e7d7      	b.n	80084f4 <_free_r+0x28>
 8008544:	d902      	bls.n	800854c <_free_r+0x80>
 8008546:	230c      	movs	r3, #12
 8008548:	6003      	str	r3, [r0, #0]
 800854a:	e7d3      	b.n	80084f4 <_free_r+0x28>
 800854c:	6825      	ldr	r5, [r4, #0]
 800854e:	1961      	adds	r1, r4, r5
 8008550:	428b      	cmp	r3, r1
 8008552:	bf04      	itt	eq
 8008554:	6819      	ldreq	r1, [r3, #0]
 8008556:	685b      	ldreq	r3, [r3, #4]
 8008558:	6063      	str	r3, [r4, #4]
 800855a:	bf04      	itt	eq
 800855c:	1949      	addeq	r1, r1, r5
 800855e:	6021      	streq	r1, [r4, #0]
 8008560:	6054      	str	r4, [r2, #4]
 8008562:	e7c7      	b.n	80084f4 <_free_r+0x28>
 8008564:	b003      	add	sp, #12
 8008566:	bd30      	pop	{r4, r5, pc}
 8008568:	20000218 	.word	0x20000218

0800856c <_malloc_r>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	1ccd      	adds	r5, r1, #3
 8008570:	f025 0503 	bic.w	r5, r5, #3
 8008574:	3508      	adds	r5, #8
 8008576:	2d0c      	cmp	r5, #12
 8008578:	bf38      	it	cc
 800857a:	250c      	movcc	r5, #12
 800857c:	2d00      	cmp	r5, #0
 800857e:	4606      	mov	r6, r0
 8008580:	db01      	blt.n	8008586 <_malloc_r+0x1a>
 8008582:	42a9      	cmp	r1, r5
 8008584:	d903      	bls.n	800858e <_malloc_r+0x22>
 8008586:	230c      	movs	r3, #12
 8008588:	6033      	str	r3, [r6, #0]
 800858a:	2000      	movs	r0, #0
 800858c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800858e:	f000 fa25 	bl	80089dc <__malloc_lock>
 8008592:	4921      	ldr	r1, [pc, #132]	; (8008618 <_malloc_r+0xac>)
 8008594:	680a      	ldr	r2, [r1, #0]
 8008596:	4614      	mov	r4, r2
 8008598:	b99c      	cbnz	r4, 80085c2 <_malloc_r+0x56>
 800859a:	4f20      	ldr	r7, [pc, #128]	; (800861c <_malloc_r+0xb0>)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	b923      	cbnz	r3, 80085aa <_malloc_r+0x3e>
 80085a0:	4621      	mov	r1, r4
 80085a2:	4630      	mov	r0, r6
 80085a4:	f000 f9a0 	bl	80088e8 <_sbrk_r>
 80085a8:	6038      	str	r0, [r7, #0]
 80085aa:	4629      	mov	r1, r5
 80085ac:	4630      	mov	r0, r6
 80085ae:	f000 f99b 	bl	80088e8 <_sbrk_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	d123      	bne.n	80085fe <_malloc_r+0x92>
 80085b6:	230c      	movs	r3, #12
 80085b8:	6033      	str	r3, [r6, #0]
 80085ba:	4630      	mov	r0, r6
 80085bc:	f000 fa14 	bl	80089e8 <__malloc_unlock>
 80085c0:	e7e3      	b.n	800858a <_malloc_r+0x1e>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	1b5b      	subs	r3, r3, r5
 80085c6:	d417      	bmi.n	80085f8 <_malloc_r+0x8c>
 80085c8:	2b0b      	cmp	r3, #11
 80085ca:	d903      	bls.n	80085d4 <_malloc_r+0x68>
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	441c      	add	r4, r3
 80085d0:	6025      	str	r5, [r4, #0]
 80085d2:	e004      	b.n	80085de <_malloc_r+0x72>
 80085d4:	6863      	ldr	r3, [r4, #4]
 80085d6:	42a2      	cmp	r2, r4
 80085d8:	bf0c      	ite	eq
 80085da:	600b      	streq	r3, [r1, #0]
 80085dc:	6053      	strne	r3, [r2, #4]
 80085de:	4630      	mov	r0, r6
 80085e0:	f000 fa02 	bl	80089e8 <__malloc_unlock>
 80085e4:	f104 000b 	add.w	r0, r4, #11
 80085e8:	1d23      	adds	r3, r4, #4
 80085ea:	f020 0007 	bic.w	r0, r0, #7
 80085ee:	1ac2      	subs	r2, r0, r3
 80085f0:	d0cc      	beq.n	800858c <_malloc_r+0x20>
 80085f2:	1a1b      	subs	r3, r3, r0
 80085f4:	50a3      	str	r3, [r4, r2]
 80085f6:	e7c9      	b.n	800858c <_malloc_r+0x20>
 80085f8:	4622      	mov	r2, r4
 80085fa:	6864      	ldr	r4, [r4, #4]
 80085fc:	e7cc      	b.n	8008598 <_malloc_r+0x2c>
 80085fe:	1cc4      	adds	r4, r0, #3
 8008600:	f024 0403 	bic.w	r4, r4, #3
 8008604:	42a0      	cmp	r0, r4
 8008606:	d0e3      	beq.n	80085d0 <_malloc_r+0x64>
 8008608:	1a21      	subs	r1, r4, r0
 800860a:	4630      	mov	r0, r6
 800860c:	f000 f96c 	bl	80088e8 <_sbrk_r>
 8008610:	3001      	adds	r0, #1
 8008612:	d1dd      	bne.n	80085d0 <_malloc_r+0x64>
 8008614:	e7cf      	b.n	80085b6 <_malloc_r+0x4a>
 8008616:	bf00      	nop
 8008618:	20000218 	.word	0x20000218
 800861c:	2000021c 	.word	0x2000021c

08008620 <__ssputs_r>:
 8008620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008624:	688e      	ldr	r6, [r1, #8]
 8008626:	429e      	cmp	r6, r3
 8008628:	4682      	mov	sl, r0
 800862a:	460c      	mov	r4, r1
 800862c:	4690      	mov	r8, r2
 800862e:	461f      	mov	r7, r3
 8008630:	d838      	bhi.n	80086a4 <__ssputs_r+0x84>
 8008632:	898a      	ldrh	r2, [r1, #12]
 8008634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008638:	d032      	beq.n	80086a0 <__ssputs_r+0x80>
 800863a:	6825      	ldr	r5, [r4, #0]
 800863c:	6909      	ldr	r1, [r1, #16]
 800863e:	eba5 0901 	sub.w	r9, r5, r1
 8008642:	6965      	ldr	r5, [r4, #20]
 8008644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800864c:	3301      	adds	r3, #1
 800864e:	444b      	add	r3, r9
 8008650:	106d      	asrs	r5, r5, #1
 8008652:	429d      	cmp	r5, r3
 8008654:	bf38      	it	cc
 8008656:	461d      	movcc	r5, r3
 8008658:	0553      	lsls	r3, r2, #21
 800865a:	d531      	bpl.n	80086c0 <__ssputs_r+0xa0>
 800865c:	4629      	mov	r1, r5
 800865e:	f7ff ff85 	bl	800856c <_malloc_r>
 8008662:	4606      	mov	r6, r0
 8008664:	b950      	cbnz	r0, 800867c <__ssputs_r+0x5c>
 8008666:	230c      	movs	r3, #12
 8008668:	f8ca 3000 	str.w	r3, [sl]
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	f04f 30ff 	mov.w	r0, #4294967295
 8008678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867c:	6921      	ldr	r1, [r4, #16]
 800867e:	464a      	mov	r2, r9
 8008680:	f7ff fa4c 	bl	8007b1c <memcpy>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800868a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	6126      	str	r6, [r4, #16]
 8008692:	6165      	str	r5, [r4, #20]
 8008694:	444e      	add	r6, r9
 8008696:	eba5 0509 	sub.w	r5, r5, r9
 800869a:	6026      	str	r6, [r4, #0]
 800869c:	60a5      	str	r5, [r4, #8]
 800869e:	463e      	mov	r6, r7
 80086a0:	42be      	cmp	r6, r7
 80086a2:	d900      	bls.n	80086a6 <__ssputs_r+0x86>
 80086a4:	463e      	mov	r6, r7
 80086a6:	4632      	mov	r2, r6
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	4641      	mov	r1, r8
 80086ac:	f000 f97c 	bl	80089a8 <memmove>
 80086b0:	68a3      	ldr	r3, [r4, #8]
 80086b2:	6822      	ldr	r2, [r4, #0]
 80086b4:	1b9b      	subs	r3, r3, r6
 80086b6:	4432      	add	r2, r6
 80086b8:	60a3      	str	r3, [r4, #8]
 80086ba:	6022      	str	r2, [r4, #0]
 80086bc:	2000      	movs	r0, #0
 80086be:	e7db      	b.n	8008678 <__ssputs_r+0x58>
 80086c0:	462a      	mov	r2, r5
 80086c2:	f000 f997 	bl	80089f4 <_realloc_r>
 80086c6:	4606      	mov	r6, r0
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d1e1      	bne.n	8008690 <__ssputs_r+0x70>
 80086cc:	6921      	ldr	r1, [r4, #16]
 80086ce:	4650      	mov	r0, sl
 80086d0:	f7ff fefc 	bl	80084cc <_free_r>
 80086d4:	e7c7      	b.n	8008666 <__ssputs_r+0x46>
	...

080086d8 <_svfiprintf_r>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	4698      	mov	r8, r3
 80086de:	898b      	ldrh	r3, [r1, #12]
 80086e0:	061b      	lsls	r3, r3, #24
 80086e2:	b09d      	sub	sp, #116	; 0x74
 80086e4:	4607      	mov	r7, r0
 80086e6:	460d      	mov	r5, r1
 80086e8:	4614      	mov	r4, r2
 80086ea:	d50e      	bpl.n	800870a <_svfiprintf_r+0x32>
 80086ec:	690b      	ldr	r3, [r1, #16]
 80086ee:	b963      	cbnz	r3, 800870a <_svfiprintf_r+0x32>
 80086f0:	2140      	movs	r1, #64	; 0x40
 80086f2:	f7ff ff3b 	bl	800856c <_malloc_r>
 80086f6:	6028      	str	r0, [r5, #0]
 80086f8:	6128      	str	r0, [r5, #16]
 80086fa:	b920      	cbnz	r0, 8008706 <_svfiprintf_r+0x2e>
 80086fc:	230c      	movs	r3, #12
 80086fe:	603b      	str	r3, [r7, #0]
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	e0d1      	b.n	80088aa <_svfiprintf_r+0x1d2>
 8008706:	2340      	movs	r3, #64	; 0x40
 8008708:	616b      	str	r3, [r5, #20]
 800870a:	2300      	movs	r3, #0
 800870c:	9309      	str	r3, [sp, #36]	; 0x24
 800870e:	2320      	movs	r3, #32
 8008710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008714:	f8cd 800c 	str.w	r8, [sp, #12]
 8008718:	2330      	movs	r3, #48	; 0x30
 800871a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80088c4 <_svfiprintf_r+0x1ec>
 800871e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008722:	f04f 0901 	mov.w	r9, #1
 8008726:	4623      	mov	r3, r4
 8008728:	469a      	mov	sl, r3
 800872a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800872e:	b10a      	cbz	r2, 8008734 <_svfiprintf_r+0x5c>
 8008730:	2a25      	cmp	r2, #37	; 0x25
 8008732:	d1f9      	bne.n	8008728 <_svfiprintf_r+0x50>
 8008734:	ebba 0b04 	subs.w	fp, sl, r4
 8008738:	d00b      	beq.n	8008752 <_svfiprintf_r+0x7a>
 800873a:	465b      	mov	r3, fp
 800873c:	4622      	mov	r2, r4
 800873e:	4629      	mov	r1, r5
 8008740:	4638      	mov	r0, r7
 8008742:	f7ff ff6d 	bl	8008620 <__ssputs_r>
 8008746:	3001      	adds	r0, #1
 8008748:	f000 80aa 	beq.w	80088a0 <_svfiprintf_r+0x1c8>
 800874c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800874e:	445a      	add	r2, fp
 8008750:	9209      	str	r2, [sp, #36]	; 0x24
 8008752:	f89a 3000 	ldrb.w	r3, [sl]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 80a2 	beq.w	80088a0 <_svfiprintf_r+0x1c8>
 800875c:	2300      	movs	r3, #0
 800875e:	f04f 32ff 	mov.w	r2, #4294967295
 8008762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008766:	f10a 0a01 	add.w	sl, sl, #1
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	9307      	str	r3, [sp, #28]
 800876e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008772:	931a      	str	r3, [sp, #104]	; 0x68
 8008774:	4654      	mov	r4, sl
 8008776:	2205      	movs	r2, #5
 8008778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800877c:	4851      	ldr	r0, [pc, #324]	; (80088c4 <_svfiprintf_r+0x1ec>)
 800877e:	f7f7 fd4f 	bl	8000220 <memchr>
 8008782:	9a04      	ldr	r2, [sp, #16]
 8008784:	b9d8      	cbnz	r0, 80087be <_svfiprintf_r+0xe6>
 8008786:	06d0      	lsls	r0, r2, #27
 8008788:	bf44      	itt	mi
 800878a:	2320      	movmi	r3, #32
 800878c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008790:	0711      	lsls	r1, r2, #28
 8008792:	bf44      	itt	mi
 8008794:	232b      	movmi	r3, #43	; 0x2b
 8008796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800879a:	f89a 3000 	ldrb.w	r3, [sl]
 800879e:	2b2a      	cmp	r3, #42	; 0x2a
 80087a0:	d015      	beq.n	80087ce <_svfiprintf_r+0xf6>
 80087a2:	9a07      	ldr	r2, [sp, #28]
 80087a4:	4654      	mov	r4, sl
 80087a6:	2000      	movs	r0, #0
 80087a8:	f04f 0c0a 	mov.w	ip, #10
 80087ac:	4621      	mov	r1, r4
 80087ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087b2:	3b30      	subs	r3, #48	; 0x30
 80087b4:	2b09      	cmp	r3, #9
 80087b6:	d94e      	bls.n	8008856 <_svfiprintf_r+0x17e>
 80087b8:	b1b0      	cbz	r0, 80087e8 <_svfiprintf_r+0x110>
 80087ba:	9207      	str	r2, [sp, #28]
 80087bc:	e014      	b.n	80087e8 <_svfiprintf_r+0x110>
 80087be:	eba0 0308 	sub.w	r3, r0, r8
 80087c2:	fa09 f303 	lsl.w	r3, r9, r3
 80087c6:	4313      	orrs	r3, r2
 80087c8:	9304      	str	r3, [sp, #16]
 80087ca:	46a2      	mov	sl, r4
 80087cc:	e7d2      	b.n	8008774 <_svfiprintf_r+0x9c>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	1d19      	adds	r1, r3, #4
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	9103      	str	r1, [sp, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfbb      	ittet	lt
 80087da:	425b      	neglt	r3, r3
 80087dc:	f042 0202 	orrlt.w	r2, r2, #2
 80087e0:	9307      	strge	r3, [sp, #28]
 80087e2:	9307      	strlt	r3, [sp, #28]
 80087e4:	bfb8      	it	lt
 80087e6:	9204      	strlt	r2, [sp, #16]
 80087e8:	7823      	ldrb	r3, [r4, #0]
 80087ea:	2b2e      	cmp	r3, #46	; 0x2e
 80087ec:	d10c      	bne.n	8008808 <_svfiprintf_r+0x130>
 80087ee:	7863      	ldrb	r3, [r4, #1]
 80087f0:	2b2a      	cmp	r3, #42	; 0x2a
 80087f2:	d135      	bne.n	8008860 <_svfiprintf_r+0x188>
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	1d1a      	adds	r2, r3, #4
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	9203      	str	r2, [sp, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bfb8      	it	lt
 8008800:	f04f 33ff 	movlt.w	r3, #4294967295
 8008804:	3402      	adds	r4, #2
 8008806:	9305      	str	r3, [sp, #20]
 8008808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088d4 <_svfiprintf_r+0x1fc>
 800880c:	7821      	ldrb	r1, [r4, #0]
 800880e:	2203      	movs	r2, #3
 8008810:	4650      	mov	r0, sl
 8008812:	f7f7 fd05 	bl	8000220 <memchr>
 8008816:	b140      	cbz	r0, 800882a <_svfiprintf_r+0x152>
 8008818:	2340      	movs	r3, #64	; 0x40
 800881a:	eba0 000a 	sub.w	r0, r0, sl
 800881e:	fa03 f000 	lsl.w	r0, r3, r0
 8008822:	9b04      	ldr	r3, [sp, #16]
 8008824:	4303      	orrs	r3, r0
 8008826:	3401      	adds	r4, #1
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882e:	4826      	ldr	r0, [pc, #152]	; (80088c8 <_svfiprintf_r+0x1f0>)
 8008830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008834:	2206      	movs	r2, #6
 8008836:	f7f7 fcf3 	bl	8000220 <memchr>
 800883a:	2800      	cmp	r0, #0
 800883c:	d038      	beq.n	80088b0 <_svfiprintf_r+0x1d8>
 800883e:	4b23      	ldr	r3, [pc, #140]	; (80088cc <_svfiprintf_r+0x1f4>)
 8008840:	bb1b      	cbnz	r3, 800888a <_svfiprintf_r+0x1b2>
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	3307      	adds	r3, #7
 8008846:	f023 0307 	bic.w	r3, r3, #7
 800884a:	3308      	adds	r3, #8
 800884c:	9303      	str	r3, [sp, #12]
 800884e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008850:	4433      	add	r3, r6
 8008852:	9309      	str	r3, [sp, #36]	; 0x24
 8008854:	e767      	b.n	8008726 <_svfiprintf_r+0x4e>
 8008856:	fb0c 3202 	mla	r2, ip, r2, r3
 800885a:	460c      	mov	r4, r1
 800885c:	2001      	movs	r0, #1
 800885e:	e7a5      	b.n	80087ac <_svfiprintf_r+0xd4>
 8008860:	2300      	movs	r3, #0
 8008862:	3401      	adds	r4, #1
 8008864:	9305      	str	r3, [sp, #20]
 8008866:	4619      	mov	r1, r3
 8008868:	f04f 0c0a 	mov.w	ip, #10
 800886c:	4620      	mov	r0, r4
 800886e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008872:	3a30      	subs	r2, #48	; 0x30
 8008874:	2a09      	cmp	r2, #9
 8008876:	d903      	bls.n	8008880 <_svfiprintf_r+0x1a8>
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0c5      	beq.n	8008808 <_svfiprintf_r+0x130>
 800887c:	9105      	str	r1, [sp, #20]
 800887e:	e7c3      	b.n	8008808 <_svfiprintf_r+0x130>
 8008880:	fb0c 2101 	mla	r1, ip, r1, r2
 8008884:	4604      	mov	r4, r0
 8008886:	2301      	movs	r3, #1
 8008888:	e7f0      	b.n	800886c <_svfiprintf_r+0x194>
 800888a:	ab03      	add	r3, sp, #12
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	462a      	mov	r2, r5
 8008890:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <_svfiprintf_r+0x1f8>)
 8008892:	a904      	add	r1, sp, #16
 8008894:	4638      	mov	r0, r7
 8008896:	f7fc fa85 	bl	8004da4 <_printf_float>
 800889a:	1c42      	adds	r2, r0, #1
 800889c:	4606      	mov	r6, r0
 800889e:	d1d6      	bne.n	800884e <_svfiprintf_r+0x176>
 80088a0:	89ab      	ldrh	r3, [r5, #12]
 80088a2:	065b      	lsls	r3, r3, #25
 80088a4:	f53f af2c 	bmi.w	8008700 <_svfiprintf_r+0x28>
 80088a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088aa:	b01d      	add	sp, #116	; 0x74
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	ab03      	add	r3, sp, #12
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	462a      	mov	r2, r5
 80088b6:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <_svfiprintf_r+0x1f8>)
 80088b8:	a904      	add	r1, sp, #16
 80088ba:	4638      	mov	r0, r7
 80088bc:	f7fc fd16 	bl	80052ec <_printf_i>
 80088c0:	e7eb      	b.n	800889a <_svfiprintf_r+0x1c2>
 80088c2:	bf00      	nop
 80088c4:	080098ec 	.word	0x080098ec
 80088c8:	080098f6 	.word	0x080098f6
 80088cc:	08004da5 	.word	0x08004da5
 80088d0:	08008621 	.word	0x08008621
 80088d4:	080098f2 	.word	0x080098f2

080088d8 <nan>:
 80088d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80088e0 <nan+0x8>
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	00000000 	.word	0x00000000
 80088e4:	7ff80000 	.word	0x7ff80000

080088e8 <_sbrk_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4d06      	ldr	r5, [pc, #24]	; (8008904 <_sbrk_r+0x1c>)
 80088ec:	2300      	movs	r3, #0
 80088ee:	4604      	mov	r4, r0
 80088f0:	4608      	mov	r0, r1
 80088f2:	602b      	str	r3, [r5, #0]
 80088f4:	f7f9 fbfa 	bl	80020ec <_sbrk>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d102      	bne.n	8008902 <_sbrk_r+0x1a>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	b103      	cbz	r3, 8008902 <_sbrk_r+0x1a>
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	200003bc 	.word	0x200003bc

08008908 <strncmp>:
 8008908:	b510      	push	{r4, lr}
 800890a:	b16a      	cbz	r2, 8008928 <strncmp+0x20>
 800890c:	3901      	subs	r1, #1
 800890e:	1884      	adds	r4, r0, r2
 8008910:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008914:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008918:	4293      	cmp	r3, r2
 800891a:	d103      	bne.n	8008924 <strncmp+0x1c>
 800891c:	42a0      	cmp	r0, r4
 800891e:	d001      	beq.n	8008924 <strncmp+0x1c>
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1f5      	bne.n	8008910 <strncmp+0x8>
 8008924:	1a98      	subs	r0, r3, r2
 8008926:	bd10      	pop	{r4, pc}
 8008928:	4610      	mov	r0, r2
 800892a:	e7fc      	b.n	8008926 <strncmp+0x1e>

0800892c <__ascii_wctomb>:
 800892c:	b149      	cbz	r1, 8008942 <__ascii_wctomb+0x16>
 800892e:	2aff      	cmp	r2, #255	; 0xff
 8008930:	bf85      	ittet	hi
 8008932:	238a      	movhi	r3, #138	; 0x8a
 8008934:	6003      	strhi	r3, [r0, #0]
 8008936:	700a      	strbls	r2, [r1, #0]
 8008938:	f04f 30ff 	movhi.w	r0, #4294967295
 800893c:	bf98      	it	ls
 800893e:	2001      	movls	r0, #1
 8008940:	4770      	bx	lr
 8008942:	4608      	mov	r0, r1
 8008944:	4770      	bx	lr
	...

08008948 <__assert_func>:
 8008948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800894a:	4614      	mov	r4, r2
 800894c:	461a      	mov	r2, r3
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <__assert_func+0x2c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4605      	mov	r5, r0
 8008954:	68d8      	ldr	r0, [r3, #12]
 8008956:	b14c      	cbz	r4, 800896c <__assert_func+0x24>
 8008958:	4b07      	ldr	r3, [pc, #28]	; (8008978 <__assert_func+0x30>)
 800895a:	9100      	str	r1, [sp, #0]
 800895c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008960:	4906      	ldr	r1, [pc, #24]	; (800897c <__assert_func+0x34>)
 8008962:	462b      	mov	r3, r5
 8008964:	f000 f80e 	bl	8008984 <fiprintf>
 8008968:	f000 fa84 	bl	8008e74 <abort>
 800896c:	4b04      	ldr	r3, [pc, #16]	; (8008980 <__assert_func+0x38>)
 800896e:	461c      	mov	r4, r3
 8008970:	e7f3      	b.n	800895a <__assert_func+0x12>
 8008972:	bf00      	nop
 8008974:	20000010 	.word	0x20000010
 8008978:	080098fd 	.word	0x080098fd
 800897c:	0800990a 	.word	0x0800990a
 8008980:	08009938 	.word	0x08009938

08008984 <fiprintf>:
 8008984:	b40e      	push	{r1, r2, r3}
 8008986:	b503      	push	{r0, r1, lr}
 8008988:	4601      	mov	r1, r0
 800898a:	ab03      	add	r3, sp, #12
 800898c:	4805      	ldr	r0, [pc, #20]	; (80089a4 <fiprintf+0x20>)
 800898e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008992:	6800      	ldr	r0, [r0, #0]
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	f000 f87d 	bl	8008a94 <_vfiprintf_r>
 800899a:	b002      	add	sp, #8
 800899c:	f85d eb04 	ldr.w	lr, [sp], #4
 80089a0:	b003      	add	sp, #12
 80089a2:	4770      	bx	lr
 80089a4:	20000010 	.word	0x20000010

080089a8 <memmove>:
 80089a8:	4288      	cmp	r0, r1
 80089aa:	b510      	push	{r4, lr}
 80089ac:	eb01 0402 	add.w	r4, r1, r2
 80089b0:	d902      	bls.n	80089b8 <memmove+0x10>
 80089b2:	4284      	cmp	r4, r0
 80089b4:	4623      	mov	r3, r4
 80089b6:	d807      	bhi.n	80089c8 <memmove+0x20>
 80089b8:	1e43      	subs	r3, r0, #1
 80089ba:	42a1      	cmp	r1, r4
 80089bc:	d008      	beq.n	80089d0 <memmove+0x28>
 80089be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089c6:	e7f8      	b.n	80089ba <memmove+0x12>
 80089c8:	4402      	add	r2, r0
 80089ca:	4601      	mov	r1, r0
 80089cc:	428a      	cmp	r2, r1
 80089ce:	d100      	bne.n	80089d2 <memmove+0x2a>
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089da:	e7f7      	b.n	80089cc <memmove+0x24>

080089dc <__malloc_lock>:
 80089dc:	4801      	ldr	r0, [pc, #4]	; (80089e4 <__malloc_lock+0x8>)
 80089de:	f000 bc09 	b.w	80091f4 <__retarget_lock_acquire_recursive>
 80089e2:	bf00      	nop
 80089e4:	200003c4 	.word	0x200003c4

080089e8 <__malloc_unlock>:
 80089e8:	4801      	ldr	r0, [pc, #4]	; (80089f0 <__malloc_unlock+0x8>)
 80089ea:	f000 bc04 	b.w	80091f6 <__retarget_lock_release_recursive>
 80089ee:	bf00      	nop
 80089f0:	200003c4 	.word	0x200003c4

080089f4 <_realloc_r>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	4607      	mov	r7, r0
 80089f8:	4614      	mov	r4, r2
 80089fa:	460e      	mov	r6, r1
 80089fc:	b921      	cbnz	r1, 8008a08 <_realloc_r+0x14>
 80089fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a02:	4611      	mov	r1, r2
 8008a04:	f7ff bdb2 	b.w	800856c <_malloc_r>
 8008a08:	b922      	cbnz	r2, 8008a14 <_realloc_r+0x20>
 8008a0a:	f7ff fd5f 	bl	80084cc <_free_r>
 8008a0e:	4625      	mov	r5, r4
 8008a10:	4628      	mov	r0, r5
 8008a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a14:	f000 fc54 	bl	80092c0 <_malloc_usable_size_r>
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d20f      	bcs.n	8008a3c <_realloc_r+0x48>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4638      	mov	r0, r7
 8008a20:	f7ff fda4 	bl	800856c <_malloc_r>
 8008a24:	4605      	mov	r5, r0
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d0f2      	beq.n	8008a10 <_realloc_r+0x1c>
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	f7ff f875 	bl	8007b1c <memcpy>
 8008a32:	4631      	mov	r1, r6
 8008a34:	4638      	mov	r0, r7
 8008a36:	f7ff fd49 	bl	80084cc <_free_r>
 8008a3a:	e7e9      	b.n	8008a10 <_realloc_r+0x1c>
 8008a3c:	4635      	mov	r5, r6
 8008a3e:	e7e7      	b.n	8008a10 <_realloc_r+0x1c>

08008a40 <__sfputc_r>:
 8008a40:	6893      	ldr	r3, [r2, #8]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	b410      	push	{r4}
 8008a48:	6093      	str	r3, [r2, #8]
 8008a4a:	da08      	bge.n	8008a5e <__sfputc_r+0x1e>
 8008a4c:	6994      	ldr	r4, [r2, #24]
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	db01      	blt.n	8008a56 <__sfputc_r+0x16>
 8008a52:	290a      	cmp	r1, #10
 8008a54:	d103      	bne.n	8008a5e <__sfputc_r+0x1e>
 8008a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a5a:	f000 b94b 	b.w	8008cf4 <__swbuf_r>
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	1c58      	adds	r0, r3, #1
 8008a62:	6010      	str	r0, [r2, #0]
 8008a64:	7019      	strb	r1, [r3, #0]
 8008a66:	4608      	mov	r0, r1
 8008a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <__sfputs_r>:
 8008a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a70:	4606      	mov	r6, r0
 8008a72:	460f      	mov	r7, r1
 8008a74:	4614      	mov	r4, r2
 8008a76:	18d5      	adds	r5, r2, r3
 8008a78:	42ac      	cmp	r4, r5
 8008a7a:	d101      	bne.n	8008a80 <__sfputs_r+0x12>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	e007      	b.n	8008a90 <__sfputs_r+0x22>
 8008a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a84:	463a      	mov	r2, r7
 8008a86:	4630      	mov	r0, r6
 8008a88:	f7ff ffda 	bl	8008a40 <__sfputc_r>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d1f3      	bne.n	8008a78 <__sfputs_r+0xa>
 8008a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a94 <_vfiprintf_r>:
 8008a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	460d      	mov	r5, r1
 8008a9a:	b09d      	sub	sp, #116	; 0x74
 8008a9c:	4614      	mov	r4, r2
 8008a9e:	4698      	mov	r8, r3
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	b118      	cbz	r0, 8008aac <_vfiprintf_r+0x18>
 8008aa4:	6983      	ldr	r3, [r0, #24]
 8008aa6:	b90b      	cbnz	r3, 8008aac <_vfiprintf_r+0x18>
 8008aa8:	f000 fb06 	bl	80090b8 <__sinit>
 8008aac:	4b89      	ldr	r3, [pc, #548]	; (8008cd4 <_vfiprintf_r+0x240>)
 8008aae:	429d      	cmp	r5, r3
 8008ab0:	d11b      	bne.n	8008aea <_vfiprintf_r+0x56>
 8008ab2:	6875      	ldr	r5, [r6, #4]
 8008ab4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ab6:	07d9      	lsls	r1, r3, #31
 8008ab8:	d405      	bmi.n	8008ac6 <_vfiprintf_r+0x32>
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	059a      	lsls	r2, r3, #22
 8008abe:	d402      	bmi.n	8008ac6 <_vfiprintf_r+0x32>
 8008ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ac2:	f000 fb97 	bl	80091f4 <__retarget_lock_acquire_recursive>
 8008ac6:	89ab      	ldrh	r3, [r5, #12]
 8008ac8:	071b      	lsls	r3, r3, #28
 8008aca:	d501      	bpl.n	8008ad0 <_vfiprintf_r+0x3c>
 8008acc:	692b      	ldr	r3, [r5, #16]
 8008ace:	b9eb      	cbnz	r3, 8008b0c <_vfiprintf_r+0x78>
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f000 f960 	bl	8008d98 <__swsetup_r>
 8008ad8:	b1c0      	cbz	r0, 8008b0c <_vfiprintf_r+0x78>
 8008ada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008adc:	07dc      	lsls	r4, r3, #31
 8008ade:	d50e      	bpl.n	8008afe <_vfiprintf_r+0x6a>
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae4:	b01d      	add	sp, #116	; 0x74
 8008ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aea:	4b7b      	ldr	r3, [pc, #492]	; (8008cd8 <_vfiprintf_r+0x244>)
 8008aec:	429d      	cmp	r5, r3
 8008aee:	d101      	bne.n	8008af4 <_vfiprintf_r+0x60>
 8008af0:	68b5      	ldr	r5, [r6, #8]
 8008af2:	e7df      	b.n	8008ab4 <_vfiprintf_r+0x20>
 8008af4:	4b79      	ldr	r3, [pc, #484]	; (8008cdc <_vfiprintf_r+0x248>)
 8008af6:	429d      	cmp	r5, r3
 8008af8:	bf08      	it	eq
 8008afa:	68f5      	ldreq	r5, [r6, #12]
 8008afc:	e7da      	b.n	8008ab4 <_vfiprintf_r+0x20>
 8008afe:	89ab      	ldrh	r3, [r5, #12]
 8008b00:	0598      	lsls	r0, r3, #22
 8008b02:	d4ed      	bmi.n	8008ae0 <_vfiprintf_r+0x4c>
 8008b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b06:	f000 fb76 	bl	80091f6 <__retarget_lock_release_recursive>
 8008b0a:	e7e9      	b.n	8008ae0 <_vfiprintf_r+0x4c>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b10:	2320      	movs	r3, #32
 8008b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b1a:	2330      	movs	r3, #48	; 0x30
 8008b1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ce0 <_vfiprintf_r+0x24c>
 8008b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b24:	f04f 0901 	mov.w	r9, #1
 8008b28:	4623      	mov	r3, r4
 8008b2a:	469a      	mov	sl, r3
 8008b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b30:	b10a      	cbz	r2, 8008b36 <_vfiprintf_r+0xa2>
 8008b32:	2a25      	cmp	r2, #37	; 0x25
 8008b34:	d1f9      	bne.n	8008b2a <_vfiprintf_r+0x96>
 8008b36:	ebba 0b04 	subs.w	fp, sl, r4
 8008b3a:	d00b      	beq.n	8008b54 <_vfiprintf_r+0xc0>
 8008b3c:	465b      	mov	r3, fp
 8008b3e:	4622      	mov	r2, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	4630      	mov	r0, r6
 8008b44:	f7ff ff93 	bl	8008a6e <__sfputs_r>
 8008b48:	3001      	adds	r0, #1
 8008b4a:	f000 80aa 	beq.w	8008ca2 <_vfiprintf_r+0x20e>
 8008b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b50:	445a      	add	r2, fp
 8008b52:	9209      	str	r2, [sp, #36]	; 0x24
 8008b54:	f89a 3000 	ldrb.w	r3, [sl]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 80a2 	beq.w	8008ca2 <_vfiprintf_r+0x20e>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f04f 32ff 	mov.w	r2, #4294967295
 8008b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b68:	f10a 0a01 	add.w	sl, sl, #1
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	9307      	str	r3, [sp, #28]
 8008b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b74:	931a      	str	r3, [sp, #104]	; 0x68
 8008b76:	4654      	mov	r4, sl
 8008b78:	2205      	movs	r2, #5
 8008b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b7e:	4858      	ldr	r0, [pc, #352]	; (8008ce0 <_vfiprintf_r+0x24c>)
 8008b80:	f7f7 fb4e 	bl	8000220 <memchr>
 8008b84:	9a04      	ldr	r2, [sp, #16]
 8008b86:	b9d8      	cbnz	r0, 8008bc0 <_vfiprintf_r+0x12c>
 8008b88:	06d1      	lsls	r1, r2, #27
 8008b8a:	bf44      	itt	mi
 8008b8c:	2320      	movmi	r3, #32
 8008b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b92:	0713      	lsls	r3, r2, #28
 8008b94:	bf44      	itt	mi
 8008b96:	232b      	movmi	r3, #43	; 0x2b
 8008b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ba2:	d015      	beq.n	8008bd0 <_vfiprintf_r+0x13c>
 8008ba4:	9a07      	ldr	r2, [sp, #28]
 8008ba6:	4654      	mov	r4, sl
 8008ba8:	2000      	movs	r0, #0
 8008baa:	f04f 0c0a 	mov.w	ip, #10
 8008bae:	4621      	mov	r1, r4
 8008bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bb4:	3b30      	subs	r3, #48	; 0x30
 8008bb6:	2b09      	cmp	r3, #9
 8008bb8:	d94e      	bls.n	8008c58 <_vfiprintf_r+0x1c4>
 8008bba:	b1b0      	cbz	r0, 8008bea <_vfiprintf_r+0x156>
 8008bbc:	9207      	str	r2, [sp, #28]
 8008bbe:	e014      	b.n	8008bea <_vfiprintf_r+0x156>
 8008bc0:	eba0 0308 	sub.w	r3, r0, r8
 8008bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	9304      	str	r3, [sp, #16]
 8008bcc:	46a2      	mov	sl, r4
 8008bce:	e7d2      	b.n	8008b76 <_vfiprintf_r+0xe2>
 8008bd0:	9b03      	ldr	r3, [sp, #12]
 8008bd2:	1d19      	adds	r1, r3, #4
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	9103      	str	r1, [sp, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	bfbb      	ittet	lt
 8008bdc:	425b      	neglt	r3, r3
 8008bde:	f042 0202 	orrlt.w	r2, r2, #2
 8008be2:	9307      	strge	r3, [sp, #28]
 8008be4:	9307      	strlt	r3, [sp, #28]
 8008be6:	bfb8      	it	lt
 8008be8:	9204      	strlt	r2, [sp, #16]
 8008bea:	7823      	ldrb	r3, [r4, #0]
 8008bec:	2b2e      	cmp	r3, #46	; 0x2e
 8008bee:	d10c      	bne.n	8008c0a <_vfiprintf_r+0x176>
 8008bf0:	7863      	ldrb	r3, [r4, #1]
 8008bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf4:	d135      	bne.n	8008c62 <_vfiprintf_r+0x1ce>
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	1d1a      	adds	r2, r3, #4
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	9203      	str	r2, [sp, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	bfb8      	it	lt
 8008c02:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c06:	3402      	adds	r4, #2
 8008c08:	9305      	str	r3, [sp, #20]
 8008c0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cf0 <_vfiprintf_r+0x25c>
 8008c0e:	7821      	ldrb	r1, [r4, #0]
 8008c10:	2203      	movs	r2, #3
 8008c12:	4650      	mov	r0, sl
 8008c14:	f7f7 fb04 	bl	8000220 <memchr>
 8008c18:	b140      	cbz	r0, 8008c2c <_vfiprintf_r+0x198>
 8008c1a:	2340      	movs	r3, #64	; 0x40
 8008c1c:	eba0 000a 	sub.w	r0, r0, sl
 8008c20:	fa03 f000 	lsl.w	r0, r3, r0
 8008c24:	9b04      	ldr	r3, [sp, #16]
 8008c26:	4303      	orrs	r3, r0
 8008c28:	3401      	adds	r4, #1
 8008c2a:	9304      	str	r3, [sp, #16]
 8008c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c30:	482c      	ldr	r0, [pc, #176]	; (8008ce4 <_vfiprintf_r+0x250>)
 8008c32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c36:	2206      	movs	r2, #6
 8008c38:	f7f7 faf2 	bl	8000220 <memchr>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d03f      	beq.n	8008cc0 <_vfiprintf_r+0x22c>
 8008c40:	4b29      	ldr	r3, [pc, #164]	; (8008ce8 <_vfiprintf_r+0x254>)
 8008c42:	bb1b      	cbnz	r3, 8008c8c <_vfiprintf_r+0x1f8>
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	3307      	adds	r3, #7
 8008c48:	f023 0307 	bic.w	r3, r3, #7
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	9303      	str	r3, [sp, #12]
 8008c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c52:	443b      	add	r3, r7
 8008c54:	9309      	str	r3, [sp, #36]	; 0x24
 8008c56:	e767      	b.n	8008b28 <_vfiprintf_r+0x94>
 8008c58:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	2001      	movs	r0, #1
 8008c60:	e7a5      	b.n	8008bae <_vfiprintf_r+0x11a>
 8008c62:	2300      	movs	r3, #0
 8008c64:	3401      	adds	r4, #1
 8008c66:	9305      	str	r3, [sp, #20]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	f04f 0c0a 	mov.w	ip, #10
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c74:	3a30      	subs	r2, #48	; 0x30
 8008c76:	2a09      	cmp	r2, #9
 8008c78:	d903      	bls.n	8008c82 <_vfiprintf_r+0x1ee>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0c5      	beq.n	8008c0a <_vfiprintf_r+0x176>
 8008c7e:	9105      	str	r1, [sp, #20]
 8008c80:	e7c3      	b.n	8008c0a <_vfiprintf_r+0x176>
 8008c82:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c86:	4604      	mov	r4, r0
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e7f0      	b.n	8008c6e <_vfiprintf_r+0x1da>
 8008c8c:	ab03      	add	r3, sp, #12
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	462a      	mov	r2, r5
 8008c92:	4b16      	ldr	r3, [pc, #88]	; (8008cec <_vfiprintf_r+0x258>)
 8008c94:	a904      	add	r1, sp, #16
 8008c96:	4630      	mov	r0, r6
 8008c98:	f7fc f884 	bl	8004da4 <_printf_float>
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	1c78      	adds	r0, r7, #1
 8008ca0:	d1d6      	bne.n	8008c50 <_vfiprintf_r+0x1bc>
 8008ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ca4:	07d9      	lsls	r1, r3, #31
 8008ca6:	d405      	bmi.n	8008cb4 <_vfiprintf_r+0x220>
 8008ca8:	89ab      	ldrh	r3, [r5, #12]
 8008caa:	059a      	lsls	r2, r3, #22
 8008cac:	d402      	bmi.n	8008cb4 <_vfiprintf_r+0x220>
 8008cae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cb0:	f000 faa1 	bl	80091f6 <__retarget_lock_release_recursive>
 8008cb4:	89ab      	ldrh	r3, [r5, #12]
 8008cb6:	065b      	lsls	r3, r3, #25
 8008cb8:	f53f af12 	bmi.w	8008ae0 <_vfiprintf_r+0x4c>
 8008cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cbe:	e711      	b.n	8008ae4 <_vfiprintf_r+0x50>
 8008cc0:	ab03      	add	r3, sp, #12
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	462a      	mov	r2, r5
 8008cc6:	4b09      	ldr	r3, [pc, #36]	; (8008cec <_vfiprintf_r+0x258>)
 8008cc8:	a904      	add	r1, sp, #16
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7fc fb0e 	bl	80052ec <_printf_i>
 8008cd0:	e7e4      	b.n	8008c9c <_vfiprintf_r+0x208>
 8008cd2:	bf00      	nop
 8008cd4:	0800995c 	.word	0x0800995c
 8008cd8:	0800997c 	.word	0x0800997c
 8008cdc:	0800993c 	.word	0x0800993c
 8008ce0:	080098ec 	.word	0x080098ec
 8008ce4:	080098f6 	.word	0x080098f6
 8008ce8:	08004da5 	.word	0x08004da5
 8008cec:	08008a6f 	.word	0x08008a6f
 8008cf0:	080098f2 	.word	0x080098f2

08008cf4 <__swbuf_r>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	460e      	mov	r6, r1
 8008cf8:	4614      	mov	r4, r2
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	b118      	cbz	r0, 8008d06 <__swbuf_r+0x12>
 8008cfe:	6983      	ldr	r3, [r0, #24]
 8008d00:	b90b      	cbnz	r3, 8008d06 <__swbuf_r+0x12>
 8008d02:	f000 f9d9 	bl	80090b8 <__sinit>
 8008d06:	4b21      	ldr	r3, [pc, #132]	; (8008d8c <__swbuf_r+0x98>)
 8008d08:	429c      	cmp	r4, r3
 8008d0a:	d12b      	bne.n	8008d64 <__swbuf_r+0x70>
 8008d0c:	686c      	ldr	r4, [r5, #4]
 8008d0e:	69a3      	ldr	r3, [r4, #24]
 8008d10:	60a3      	str	r3, [r4, #8]
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	071a      	lsls	r2, r3, #28
 8008d16:	d52f      	bpl.n	8008d78 <__swbuf_r+0x84>
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	b36b      	cbz	r3, 8008d78 <__swbuf_r+0x84>
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	6820      	ldr	r0, [r4, #0]
 8008d20:	1ac0      	subs	r0, r0, r3
 8008d22:	6963      	ldr	r3, [r4, #20]
 8008d24:	b2f6      	uxtb	r6, r6
 8008d26:	4283      	cmp	r3, r0
 8008d28:	4637      	mov	r7, r6
 8008d2a:	dc04      	bgt.n	8008d36 <__swbuf_r+0x42>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 f92e 	bl	8008f90 <_fflush_r>
 8008d34:	bb30      	cbnz	r0, 8008d84 <__swbuf_r+0x90>
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	60a3      	str	r3, [r4, #8]
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	6022      	str	r2, [r4, #0]
 8008d42:	701e      	strb	r6, [r3, #0]
 8008d44:	6963      	ldr	r3, [r4, #20]
 8008d46:	3001      	adds	r0, #1
 8008d48:	4283      	cmp	r3, r0
 8008d4a:	d004      	beq.n	8008d56 <__swbuf_r+0x62>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	07db      	lsls	r3, r3, #31
 8008d50:	d506      	bpl.n	8008d60 <__swbuf_r+0x6c>
 8008d52:	2e0a      	cmp	r6, #10
 8008d54:	d104      	bne.n	8008d60 <__swbuf_r+0x6c>
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f000 f919 	bl	8008f90 <_fflush_r>
 8008d5e:	b988      	cbnz	r0, 8008d84 <__swbuf_r+0x90>
 8008d60:	4638      	mov	r0, r7
 8008d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d64:	4b0a      	ldr	r3, [pc, #40]	; (8008d90 <__swbuf_r+0x9c>)
 8008d66:	429c      	cmp	r4, r3
 8008d68:	d101      	bne.n	8008d6e <__swbuf_r+0x7a>
 8008d6a:	68ac      	ldr	r4, [r5, #8]
 8008d6c:	e7cf      	b.n	8008d0e <__swbuf_r+0x1a>
 8008d6e:	4b09      	ldr	r3, [pc, #36]	; (8008d94 <__swbuf_r+0xa0>)
 8008d70:	429c      	cmp	r4, r3
 8008d72:	bf08      	it	eq
 8008d74:	68ec      	ldreq	r4, [r5, #12]
 8008d76:	e7ca      	b.n	8008d0e <__swbuf_r+0x1a>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f000 f80c 	bl	8008d98 <__swsetup_r>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d0cb      	beq.n	8008d1c <__swbuf_r+0x28>
 8008d84:	f04f 37ff 	mov.w	r7, #4294967295
 8008d88:	e7ea      	b.n	8008d60 <__swbuf_r+0x6c>
 8008d8a:	bf00      	nop
 8008d8c:	0800995c 	.word	0x0800995c
 8008d90:	0800997c 	.word	0x0800997c
 8008d94:	0800993c 	.word	0x0800993c

08008d98 <__swsetup_r>:
 8008d98:	4b32      	ldr	r3, [pc, #200]	; (8008e64 <__swsetup_r+0xcc>)
 8008d9a:	b570      	push	{r4, r5, r6, lr}
 8008d9c:	681d      	ldr	r5, [r3, #0]
 8008d9e:	4606      	mov	r6, r0
 8008da0:	460c      	mov	r4, r1
 8008da2:	b125      	cbz	r5, 8008dae <__swsetup_r+0x16>
 8008da4:	69ab      	ldr	r3, [r5, #24]
 8008da6:	b913      	cbnz	r3, 8008dae <__swsetup_r+0x16>
 8008da8:	4628      	mov	r0, r5
 8008daa:	f000 f985 	bl	80090b8 <__sinit>
 8008dae:	4b2e      	ldr	r3, [pc, #184]	; (8008e68 <__swsetup_r+0xd0>)
 8008db0:	429c      	cmp	r4, r3
 8008db2:	d10f      	bne.n	8008dd4 <__swsetup_r+0x3c>
 8008db4:	686c      	ldr	r4, [r5, #4]
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dbc:	0719      	lsls	r1, r3, #28
 8008dbe:	d42c      	bmi.n	8008e1a <__swsetup_r+0x82>
 8008dc0:	06dd      	lsls	r5, r3, #27
 8008dc2:	d411      	bmi.n	8008de8 <__swsetup_r+0x50>
 8008dc4:	2309      	movs	r3, #9
 8008dc6:	6033      	str	r3, [r6, #0]
 8008dc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd2:	e03e      	b.n	8008e52 <__swsetup_r+0xba>
 8008dd4:	4b25      	ldr	r3, [pc, #148]	; (8008e6c <__swsetup_r+0xd4>)
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	d101      	bne.n	8008dde <__swsetup_r+0x46>
 8008dda:	68ac      	ldr	r4, [r5, #8]
 8008ddc:	e7eb      	b.n	8008db6 <__swsetup_r+0x1e>
 8008dde:	4b24      	ldr	r3, [pc, #144]	; (8008e70 <__swsetup_r+0xd8>)
 8008de0:	429c      	cmp	r4, r3
 8008de2:	bf08      	it	eq
 8008de4:	68ec      	ldreq	r4, [r5, #12]
 8008de6:	e7e6      	b.n	8008db6 <__swsetup_r+0x1e>
 8008de8:	0758      	lsls	r0, r3, #29
 8008dea:	d512      	bpl.n	8008e12 <__swsetup_r+0x7a>
 8008dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dee:	b141      	cbz	r1, 8008e02 <__swsetup_r+0x6a>
 8008df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df4:	4299      	cmp	r1, r3
 8008df6:	d002      	beq.n	8008dfe <__swsetup_r+0x66>
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f7ff fb67 	bl	80084cc <_free_r>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	6363      	str	r3, [r4, #52]	; 0x34
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	6063      	str	r3, [r4, #4]
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	f043 0308 	orr.w	r3, r3, #8
 8008e18:	81a3      	strh	r3, [r4, #12]
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	b94b      	cbnz	r3, 8008e32 <__swsetup_r+0x9a>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e28:	d003      	beq.n	8008e32 <__swsetup_r+0x9a>
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f000 fa07 	bl	8009240 <__smakebuf_r>
 8008e32:	89a0      	ldrh	r0, [r4, #12]
 8008e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e38:	f010 0301 	ands.w	r3, r0, #1
 8008e3c:	d00a      	beq.n	8008e54 <__swsetup_r+0xbc>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60a3      	str	r3, [r4, #8]
 8008e42:	6963      	ldr	r3, [r4, #20]
 8008e44:	425b      	negs	r3, r3
 8008e46:	61a3      	str	r3, [r4, #24]
 8008e48:	6923      	ldr	r3, [r4, #16]
 8008e4a:	b943      	cbnz	r3, 8008e5e <__swsetup_r+0xc6>
 8008e4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e50:	d1ba      	bne.n	8008dc8 <__swsetup_r+0x30>
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	0781      	lsls	r1, r0, #30
 8008e56:	bf58      	it	pl
 8008e58:	6963      	ldrpl	r3, [r4, #20]
 8008e5a:	60a3      	str	r3, [r4, #8]
 8008e5c:	e7f4      	b.n	8008e48 <__swsetup_r+0xb0>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e7f7      	b.n	8008e52 <__swsetup_r+0xba>
 8008e62:	bf00      	nop
 8008e64:	20000010 	.word	0x20000010
 8008e68:	0800995c 	.word	0x0800995c
 8008e6c:	0800997c 	.word	0x0800997c
 8008e70:	0800993c 	.word	0x0800993c

08008e74 <abort>:
 8008e74:	b508      	push	{r3, lr}
 8008e76:	2006      	movs	r0, #6
 8008e78:	f000 fa52 	bl	8009320 <raise>
 8008e7c:	2001      	movs	r0, #1
 8008e7e:	f7f9 f8bd 	bl	8001ffc <_exit>
	...

08008e84 <__sflush_r>:
 8008e84:	898a      	ldrh	r2, [r1, #12]
 8008e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	0710      	lsls	r0, r2, #28
 8008e8e:	460c      	mov	r4, r1
 8008e90:	d458      	bmi.n	8008f44 <__sflush_r+0xc0>
 8008e92:	684b      	ldr	r3, [r1, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	dc05      	bgt.n	8008ea4 <__sflush_r+0x20>
 8008e98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dc02      	bgt.n	8008ea4 <__sflush_r+0x20>
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	d0f9      	beq.n	8008e9e <__sflush_r+0x1a>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008eb0:	682f      	ldr	r7, [r5, #0]
 8008eb2:	602b      	str	r3, [r5, #0]
 8008eb4:	d032      	beq.n	8008f1c <__sflush_r+0x98>
 8008eb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	075a      	lsls	r2, r3, #29
 8008ebc:	d505      	bpl.n	8008eca <__sflush_r+0x46>
 8008ebe:	6863      	ldr	r3, [r4, #4]
 8008ec0:	1ac0      	subs	r0, r0, r3
 8008ec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ec4:	b10b      	cbz	r3, 8008eca <__sflush_r+0x46>
 8008ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ec8:	1ac0      	subs	r0, r0, r3
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4602      	mov	r2, r0
 8008ece:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ed0:	6a21      	ldr	r1, [r4, #32]
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	47b0      	blx	r6
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	d106      	bne.n	8008eea <__sflush_r+0x66>
 8008edc:	6829      	ldr	r1, [r5, #0]
 8008ede:	291d      	cmp	r1, #29
 8008ee0:	d82c      	bhi.n	8008f3c <__sflush_r+0xb8>
 8008ee2:	4a2a      	ldr	r2, [pc, #168]	; (8008f8c <__sflush_r+0x108>)
 8008ee4:	40ca      	lsrs	r2, r1
 8008ee6:	07d6      	lsls	r6, r2, #31
 8008ee8:	d528      	bpl.n	8008f3c <__sflush_r+0xb8>
 8008eea:	2200      	movs	r2, #0
 8008eec:	6062      	str	r2, [r4, #4]
 8008eee:	04d9      	lsls	r1, r3, #19
 8008ef0:	6922      	ldr	r2, [r4, #16]
 8008ef2:	6022      	str	r2, [r4, #0]
 8008ef4:	d504      	bpl.n	8008f00 <__sflush_r+0x7c>
 8008ef6:	1c42      	adds	r2, r0, #1
 8008ef8:	d101      	bne.n	8008efe <__sflush_r+0x7a>
 8008efa:	682b      	ldr	r3, [r5, #0]
 8008efc:	b903      	cbnz	r3, 8008f00 <__sflush_r+0x7c>
 8008efe:	6560      	str	r0, [r4, #84]	; 0x54
 8008f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f02:	602f      	str	r7, [r5, #0]
 8008f04:	2900      	cmp	r1, #0
 8008f06:	d0ca      	beq.n	8008e9e <__sflush_r+0x1a>
 8008f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f0c:	4299      	cmp	r1, r3
 8008f0e:	d002      	beq.n	8008f16 <__sflush_r+0x92>
 8008f10:	4628      	mov	r0, r5
 8008f12:	f7ff fadb 	bl	80084cc <_free_r>
 8008f16:	2000      	movs	r0, #0
 8008f18:	6360      	str	r0, [r4, #52]	; 0x34
 8008f1a:	e7c1      	b.n	8008ea0 <__sflush_r+0x1c>
 8008f1c:	6a21      	ldr	r1, [r4, #32]
 8008f1e:	2301      	movs	r3, #1
 8008f20:	4628      	mov	r0, r5
 8008f22:	47b0      	blx	r6
 8008f24:	1c41      	adds	r1, r0, #1
 8008f26:	d1c7      	bne.n	8008eb8 <__sflush_r+0x34>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0c4      	beq.n	8008eb8 <__sflush_r+0x34>
 8008f2e:	2b1d      	cmp	r3, #29
 8008f30:	d001      	beq.n	8008f36 <__sflush_r+0xb2>
 8008f32:	2b16      	cmp	r3, #22
 8008f34:	d101      	bne.n	8008f3a <__sflush_r+0xb6>
 8008f36:	602f      	str	r7, [r5, #0]
 8008f38:	e7b1      	b.n	8008e9e <__sflush_r+0x1a>
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f40:	81a3      	strh	r3, [r4, #12]
 8008f42:	e7ad      	b.n	8008ea0 <__sflush_r+0x1c>
 8008f44:	690f      	ldr	r7, [r1, #16]
 8008f46:	2f00      	cmp	r7, #0
 8008f48:	d0a9      	beq.n	8008e9e <__sflush_r+0x1a>
 8008f4a:	0793      	lsls	r3, r2, #30
 8008f4c:	680e      	ldr	r6, [r1, #0]
 8008f4e:	bf08      	it	eq
 8008f50:	694b      	ldreq	r3, [r1, #20]
 8008f52:	600f      	str	r7, [r1, #0]
 8008f54:	bf18      	it	ne
 8008f56:	2300      	movne	r3, #0
 8008f58:	eba6 0807 	sub.w	r8, r6, r7
 8008f5c:	608b      	str	r3, [r1, #8]
 8008f5e:	f1b8 0f00 	cmp.w	r8, #0
 8008f62:	dd9c      	ble.n	8008e9e <__sflush_r+0x1a>
 8008f64:	6a21      	ldr	r1, [r4, #32]
 8008f66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f68:	4643      	mov	r3, r8
 8008f6a:	463a      	mov	r2, r7
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	47b0      	blx	r6
 8008f70:	2800      	cmp	r0, #0
 8008f72:	dc06      	bgt.n	8008f82 <__sflush_r+0xfe>
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f7a:	81a3      	strh	r3, [r4, #12]
 8008f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f80:	e78e      	b.n	8008ea0 <__sflush_r+0x1c>
 8008f82:	4407      	add	r7, r0
 8008f84:	eba8 0800 	sub.w	r8, r8, r0
 8008f88:	e7e9      	b.n	8008f5e <__sflush_r+0xda>
 8008f8a:	bf00      	nop
 8008f8c:	20400001 	.word	0x20400001

08008f90 <_fflush_r>:
 8008f90:	b538      	push	{r3, r4, r5, lr}
 8008f92:	690b      	ldr	r3, [r1, #16]
 8008f94:	4605      	mov	r5, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	b913      	cbnz	r3, 8008fa0 <_fflush_r+0x10>
 8008f9a:	2500      	movs	r5, #0
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	b118      	cbz	r0, 8008faa <_fflush_r+0x1a>
 8008fa2:	6983      	ldr	r3, [r0, #24]
 8008fa4:	b90b      	cbnz	r3, 8008faa <_fflush_r+0x1a>
 8008fa6:	f000 f887 	bl	80090b8 <__sinit>
 8008faa:	4b14      	ldr	r3, [pc, #80]	; (8008ffc <_fflush_r+0x6c>)
 8008fac:	429c      	cmp	r4, r3
 8008fae:	d11b      	bne.n	8008fe8 <_fflush_r+0x58>
 8008fb0:	686c      	ldr	r4, [r5, #4]
 8008fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0ef      	beq.n	8008f9a <_fflush_r+0xa>
 8008fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fbc:	07d0      	lsls	r0, r2, #31
 8008fbe:	d404      	bmi.n	8008fca <_fflush_r+0x3a>
 8008fc0:	0599      	lsls	r1, r3, #22
 8008fc2:	d402      	bmi.n	8008fca <_fflush_r+0x3a>
 8008fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fc6:	f000 f915 	bl	80091f4 <__retarget_lock_acquire_recursive>
 8008fca:	4628      	mov	r0, r5
 8008fcc:	4621      	mov	r1, r4
 8008fce:	f7ff ff59 	bl	8008e84 <__sflush_r>
 8008fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fd4:	07da      	lsls	r2, r3, #31
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	d4e0      	bmi.n	8008f9c <_fflush_r+0xc>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	059b      	lsls	r3, r3, #22
 8008fde:	d4dd      	bmi.n	8008f9c <_fflush_r+0xc>
 8008fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fe2:	f000 f908 	bl	80091f6 <__retarget_lock_release_recursive>
 8008fe6:	e7d9      	b.n	8008f9c <_fflush_r+0xc>
 8008fe8:	4b05      	ldr	r3, [pc, #20]	; (8009000 <_fflush_r+0x70>)
 8008fea:	429c      	cmp	r4, r3
 8008fec:	d101      	bne.n	8008ff2 <_fflush_r+0x62>
 8008fee:	68ac      	ldr	r4, [r5, #8]
 8008ff0:	e7df      	b.n	8008fb2 <_fflush_r+0x22>
 8008ff2:	4b04      	ldr	r3, [pc, #16]	; (8009004 <_fflush_r+0x74>)
 8008ff4:	429c      	cmp	r4, r3
 8008ff6:	bf08      	it	eq
 8008ff8:	68ec      	ldreq	r4, [r5, #12]
 8008ffa:	e7da      	b.n	8008fb2 <_fflush_r+0x22>
 8008ffc:	0800995c 	.word	0x0800995c
 8009000:	0800997c 	.word	0x0800997c
 8009004:	0800993c 	.word	0x0800993c

08009008 <std>:
 8009008:	2300      	movs	r3, #0
 800900a:	b510      	push	{r4, lr}
 800900c:	4604      	mov	r4, r0
 800900e:	e9c0 3300 	strd	r3, r3, [r0]
 8009012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009016:	6083      	str	r3, [r0, #8]
 8009018:	8181      	strh	r1, [r0, #12]
 800901a:	6643      	str	r3, [r0, #100]	; 0x64
 800901c:	81c2      	strh	r2, [r0, #14]
 800901e:	6183      	str	r3, [r0, #24]
 8009020:	4619      	mov	r1, r3
 8009022:	2208      	movs	r2, #8
 8009024:	305c      	adds	r0, #92	; 0x5c
 8009026:	f7fb fe15 	bl	8004c54 <memset>
 800902a:	4b05      	ldr	r3, [pc, #20]	; (8009040 <std+0x38>)
 800902c:	6263      	str	r3, [r4, #36]	; 0x24
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <std+0x3c>)
 8009030:	62a3      	str	r3, [r4, #40]	; 0x28
 8009032:	4b05      	ldr	r3, [pc, #20]	; (8009048 <std+0x40>)
 8009034:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <std+0x44>)
 8009038:	6224      	str	r4, [r4, #32]
 800903a:	6323      	str	r3, [r4, #48]	; 0x30
 800903c:	bd10      	pop	{r4, pc}
 800903e:	bf00      	nop
 8009040:	08009359 	.word	0x08009359
 8009044:	0800937b 	.word	0x0800937b
 8009048:	080093b3 	.word	0x080093b3
 800904c:	080093d7 	.word	0x080093d7

08009050 <_cleanup_r>:
 8009050:	4901      	ldr	r1, [pc, #4]	; (8009058 <_cleanup_r+0x8>)
 8009052:	f000 b8af 	b.w	80091b4 <_fwalk_reent>
 8009056:	bf00      	nop
 8009058:	08008f91 	.word	0x08008f91

0800905c <__sfmoreglue>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	1e4a      	subs	r2, r1, #1
 8009060:	2568      	movs	r5, #104	; 0x68
 8009062:	4355      	muls	r5, r2
 8009064:	460e      	mov	r6, r1
 8009066:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800906a:	f7ff fa7f 	bl	800856c <_malloc_r>
 800906e:	4604      	mov	r4, r0
 8009070:	b140      	cbz	r0, 8009084 <__sfmoreglue+0x28>
 8009072:	2100      	movs	r1, #0
 8009074:	e9c0 1600 	strd	r1, r6, [r0]
 8009078:	300c      	adds	r0, #12
 800907a:	60a0      	str	r0, [r4, #8]
 800907c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009080:	f7fb fde8 	bl	8004c54 <memset>
 8009084:	4620      	mov	r0, r4
 8009086:	bd70      	pop	{r4, r5, r6, pc}

08009088 <__sfp_lock_acquire>:
 8009088:	4801      	ldr	r0, [pc, #4]	; (8009090 <__sfp_lock_acquire+0x8>)
 800908a:	f000 b8b3 	b.w	80091f4 <__retarget_lock_acquire_recursive>
 800908e:	bf00      	nop
 8009090:	200003c8 	.word	0x200003c8

08009094 <__sfp_lock_release>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__sfp_lock_release+0x8>)
 8009096:	f000 b8ae 	b.w	80091f6 <__retarget_lock_release_recursive>
 800909a:	bf00      	nop
 800909c:	200003c8 	.word	0x200003c8

080090a0 <__sinit_lock_acquire>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sinit_lock_acquire+0x8>)
 80090a2:	f000 b8a7 	b.w	80091f4 <__retarget_lock_acquire_recursive>
 80090a6:	bf00      	nop
 80090a8:	200003c3 	.word	0x200003c3

080090ac <__sinit_lock_release>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__sinit_lock_release+0x8>)
 80090ae:	f000 b8a2 	b.w	80091f6 <__retarget_lock_release_recursive>
 80090b2:	bf00      	nop
 80090b4:	200003c3 	.word	0x200003c3

080090b8 <__sinit>:
 80090b8:	b510      	push	{r4, lr}
 80090ba:	4604      	mov	r4, r0
 80090bc:	f7ff fff0 	bl	80090a0 <__sinit_lock_acquire>
 80090c0:	69a3      	ldr	r3, [r4, #24]
 80090c2:	b11b      	cbz	r3, 80090cc <__sinit+0x14>
 80090c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c8:	f7ff bff0 	b.w	80090ac <__sinit_lock_release>
 80090cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090d0:	6523      	str	r3, [r4, #80]	; 0x50
 80090d2:	4b13      	ldr	r3, [pc, #76]	; (8009120 <__sinit+0x68>)
 80090d4:	4a13      	ldr	r2, [pc, #76]	; (8009124 <__sinit+0x6c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80090da:	42a3      	cmp	r3, r4
 80090dc:	bf04      	itt	eq
 80090de:	2301      	moveq	r3, #1
 80090e0:	61a3      	streq	r3, [r4, #24]
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 f820 	bl	8009128 <__sfp>
 80090e8:	6060      	str	r0, [r4, #4]
 80090ea:	4620      	mov	r0, r4
 80090ec:	f000 f81c 	bl	8009128 <__sfp>
 80090f0:	60a0      	str	r0, [r4, #8]
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 f818 	bl	8009128 <__sfp>
 80090f8:	2200      	movs	r2, #0
 80090fa:	60e0      	str	r0, [r4, #12]
 80090fc:	2104      	movs	r1, #4
 80090fe:	6860      	ldr	r0, [r4, #4]
 8009100:	f7ff ff82 	bl	8009008 <std>
 8009104:	68a0      	ldr	r0, [r4, #8]
 8009106:	2201      	movs	r2, #1
 8009108:	2109      	movs	r1, #9
 800910a:	f7ff ff7d 	bl	8009008 <std>
 800910e:	68e0      	ldr	r0, [r4, #12]
 8009110:	2202      	movs	r2, #2
 8009112:	2112      	movs	r1, #18
 8009114:	f7ff ff78 	bl	8009008 <std>
 8009118:	2301      	movs	r3, #1
 800911a:	61a3      	str	r3, [r4, #24]
 800911c:	e7d2      	b.n	80090c4 <__sinit+0xc>
 800911e:	bf00      	nop
 8009120:	080094e8 	.word	0x080094e8
 8009124:	08009051 	.word	0x08009051

08009128 <__sfp>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	4607      	mov	r7, r0
 800912c:	f7ff ffac 	bl	8009088 <__sfp_lock_acquire>
 8009130:	4b1e      	ldr	r3, [pc, #120]	; (80091ac <__sfp+0x84>)
 8009132:	681e      	ldr	r6, [r3, #0]
 8009134:	69b3      	ldr	r3, [r6, #24]
 8009136:	b913      	cbnz	r3, 800913e <__sfp+0x16>
 8009138:	4630      	mov	r0, r6
 800913a:	f7ff ffbd 	bl	80090b8 <__sinit>
 800913e:	3648      	adds	r6, #72	; 0x48
 8009140:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009144:	3b01      	subs	r3, #1
 8009146:	d503      	bpl.n	8009150 <__sfp+0x28>
 8009148:	6833      	ldr	r3, [r6, #0]
 800914a:	b30b      	cbz	r3, 8009190 <__sfp+0x68>
 800914c:	6836      	ldr	r6, [r6, #0]
 800914e:	e7f7      	b.n	8009140 <__sfp+0x18>
 8009150:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009154:	b9d5      	cbnz	r5, 800918c <__sfp+0x64>
 8009156:	4b16      	ldr	r3, [pc, #88]	; (80091b0 <__sfp+0x88>)
 8009158:	60e3      	str	r3, [r4, #12]
 800915a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800915e:	6665      	str	r5, [r4, #100]	; 0x64
 8009160:	f000 f847 	bl	80091f2 <__retarget_lock_init_recursive>
 8009164:	f7ff ff96 	bl	8009094 <__sfp_lock_release>
 8009168:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800916c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009170:	6025      	str	r5, [r4, #0]
 8009172:	61a5      	str	r5, [r4, #24]
 8009174:	2208      	movs	r2, #8
 8009176:	4629      	mov	r1, r5
 8009178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800917c:	f7fb fd6a 	bl	8004c54 <memset>
 8009180:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009184:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009188:	4620      	mov	r0, r4
 800918a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918c:	3468      	adds	r4, #104	; 0x68
 800918e:	e7d9      	b.n	8009144 <__sfp+0x1c>
 8009190:	2104      	movs	r1, #4
 8009192:	4638      	mov	r0, r7
 8009194:	f7ff ff62 	bl	800905c <__sfmoreglue>
 8009198:	4604      	mov	r4, r0
 800919a:	6030      	str	r0, [r6, #0]
 800919c:	2800      	cmp	r0, #0
 800919e:	d1d5      	bne.n	800914c <__sfp+0x24>
 80091a0:	f7ff ff78 	bl	8009094 <__sfp_lock_release>
 80091a4:	230c      	movs	r3, #12
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	e7ee      	b.n	8009188 <__sfp+0x60>
 80091aa:	bf00      	nop
 80091ac:	080094e8 	.word	0x080094e8
 80091b0:	ffff0001 	.word	0xffff0001

080091b4 <_fwalk_reent>:
 80091b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b8:	4606      	mov	r6, r0
 80091ba:	4688      	mov	r8, r1
 80091bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091c0:	2700      	movs	r7, #0
 80091c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091c6:	f1b9 0901 	subs.w	r9, r9, #1
 80091ca:	d505      	bpl.n	80091d8 <_fwalk_reent+0x24>
 80091cc:	6824      	ldr	r4, [r4, #0]
 80091ce:	2c00      	cmp	r4, #0
 80091d0:	d1f7      	bne.n	80091c2 <_fwalk_reent+0xe>
 80091d2:	4638      	mov	r0, r7
 80091d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091d8:	89ab      	ldrh	r3, [r5, #12]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d907      	bls.n	80091ee <_fwalk_reent+0x3a>
 80091de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091e2:	3301      	adds	r3, #1
 80091e4:	d003      	beq.n	80091ee <_fwalk_reent+0x3a>
 80091e6:	4629      	mov	r1, r5
 80091e8:	4630      	mov	r0, r6
 80091ea:	47c0      	blx	r8
 80091ec:	4307      	orrs	r7, r0
 80091ee:	3568      	adds	r5, #104	; 0x68
 80091f0:	e7e9      	b.n	80091c6 <_fwalk_reent+0x12>

080091f2 <__retarget_lock_init_recursive>:
 80091f2:	4770      	bx	lr

080091f4 <__retarget_lock_acquire_recursive>:
 80091f4:	4770      	bx	lr

080091f6 <__retarget_lock_release_recursive>:
 80091f6:	4770      	bx	lr

080091f8 <__swhatbuf_r>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	460e      	mov	r6, r1
 80091fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009200:	2900      	cmp	r1, #0
 8009202:	b096      	sub	sp, #88	; 0x58
 8009204:	4614      	mov	r4, r2
 8009206:	461d      	mov	r5, r3
 8009208:	da07      	bge.n	800921a <__swhatbuf_r+0x22>
 800920a:	2300      	movs	r3, #0
 800920c:	602b      	str	r3, [r5, #0]
 800920e:	89b3      	ldrh	r3, [r6, #12]
 8009210:	061a      	lsls	r2, r3, #24
 8009212:	d410      	bmi.n	8009236 <__swhatbuf_r+0x3e>
 8009214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009218:	e00e      	b.n	8009238 <__swhatbuf_r+0x40>
 800921a:	466a      	mov	r2, sp
 800921c:	f000 f902 	bl	8009424 <_fstat_r>
 8009220:	2800      	cmp	r0, #0
 8009222:	dbf2      	blt.n	800920a <__swhatbuf_r+0x12>
 8009224:	9a01      	ldr	r2, [sp, #4]
 8009226:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800922a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800922e:	425a      	negs	r2, r3
 8009230:	415a      	adcs	r2, r3
 8009232:	602a      	str	r2, [r5, #0]
 8009234:	e7ee      	b.n	8009214 <__swhatbuf_r+0x1c>
 8009236:	2340      	movs	r3, #64	; 0x40
 8009238:	2000      	movs	r0, #0
 800923a:	6023      	str	r3, [r4, #0]
 800923c:	b016      	add	sp, #88	; 0x58
 800923e:	bd70      	pop	{r4, r5, r6, pc}

08009240 <__smakebuf_r>:
 8009240:	898b      	ldrh	r3, [r1, #12]
 8009242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009244:	079d      	lsls	r5, r3, #30
 8009246:	4606      	mov	r6, r0
 8009248:	460c      	mov	r4, r1
 800924a:	d507      	bpl.n	800925c <__smakebuf_r+0x1c>
 800924c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	6123      	str	r3, [r4, #16]
 8009254:	2301      	movs	r3, #1
 8009256:	6163      	str	r3, [r4, #20]
 8009258:	b002      	add	sp, #8
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	ab01      	add	r3, sp, #4
 800925e:	466a      	mov	r2, sp
 8009260:	f7ff ffca 	bl	80091f8 <__swhatbuf_r>
 8009264:	9900      	ldr	r1, [sp, #0]
 8009266:	4605      	mov	r5, r0
 8009268:	4630      	mov	r0, r6
 800926a:	f7ff f97f 	bl	800856c <_malloc_r>
 800926e:	b948      	cbnz	r0, 8009284 <__smakebuf_r+0x44>
 8009270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009274:	059a      	lsls	r2, r3, #22
 8009276:	d4ef      	bmi.n	8009258 <__smakebuf_r+0x18>
 8009278:	f023 0303 	bic.w	r3, r3, #3
 800927c:	f043 0302 	orr.w	r3, r3, #2
 8009280:	81a3      	strh	r3, [r4, #12]
 8009282:	e7e3      	b.n	800924c <__smakebuf_r+0xc>
 8009284:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <__smakebuf_r+0x7c>)
 8009286:	62b3      	str	r3, [r6, #40]	; 0x28
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	6020      	str	r0, [r4, #0]
 800928c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009290:	81a3      	strh	r3, [r4, #12]
 8009292:	9b00      	ldr	r3, [sp, #0]
 8009294:	6163      	str	r3, [r4, #20]
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	6120      	str	r0, [r4, #16]
 800929a:	b15b      	cbz	r3, 80092b4 <__smakebuf_r+0x74>
 800929c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092a0:	4630      	mov	r0, r6
 80092a2:	f000 f8d1 	bl	8009448 <_isatty_r>
 80092a6:	b128      	cbz	r0, 80092b4 <__smakebuf_r+0x74>
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	f023 0303 	bic.w	r3, r3, #3
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	81a3      	strh	r3, [r4, #12]
 80092b4:	89a0      	ldrh	r0, [r4, #12]
 80092b6:	4305      	orrs	r5, r0
 80092b8:	81a5      	strh	r5, [r4, #12]
 80092ba:	e7cd      	b.n	8009258 <__smakebuf_r+0x18>
 80092bc:	08009051 	.word	0x08009051

080092c0 <_malloc_usable_size_r>:
 80092c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c4:	1f18      	subs	r0, r3, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bfbc      	itt	lt
 80092ca:	580b      	ldrlt	r3, [r1, r0]
 80092cc:	18c0      	addlt	r0, r0, r3
 80092ce:	4770      	bx	lr

080092d0 <_raise_r>:
 80092d0:	291f      	cmp	r1, #31
 80092d2:	b538      	push	{r3, r4, r5, lr}
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	d904      	bls.n	80092e4 <_raise_r+0x14>
 80092da:	2316      	movs	r3, #22
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	f04f 30ff 	mov.w	r0, #4294967295
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092e6:	b112      	cbz	r2, 80092ee <_raise_r+0x1e>
 80092e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092ec:	b94b      	cbnz	r3, 8009302 <_raise_r+0x32>
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 f830 	bl	8009354 <_getpid_r>
 80092f4:	462a      	mov	r2, r5
 80092f6:	4601      	mov	r1, r0
 80092f8:	4620      	mov	r0, r4
 80092fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092fe:	f000 b817 	b.w	8009330 <_kill_r>
 8009302:	2b01      	cmp	r3, #1
 8009304:	d00a      	beq.n	800931c <_raise_r+0x4c>
 8009306:	1c59      	adds	r1, r3, #1
 8009308:	d103      	bne.n	8009312 <_raise_r+0x42>
 800930a:	2316      	movs	r3, #22
 800930c:	6003      	str	r3, [r0, #0]
 800930e:	2001      	movs	r0, #1
 8009310:	e7e7      	b.n	80092e2 <_raise_r+0x12>
 8009312:	2400      	movs	r4, #0
 8009314:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009318:	4628      	mov	r0, r5
 800931a:	4798      	blx	r3
 800931c:	2000      	movs	r0, #0
 800931e:	e7e0      	b.n	80092e2 <_raise_r+0x12>

08009320 <raise>:
 8009320:	4b02      	ldr	r3, [pc, #8]	; (800932c <raise+0xc>)
 8009322:	4601      	mov	r1, r0
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f7ff bfd3 	b.w	80092d0 <_raise_r>
 800932a:	bf00      	nop
 800932c:	20000010 	.word	0x20000010

08009330 <_kill_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d07      	ldr	r5, [pc, #28]	; (8009350 <_kill_r+0x20>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	4611      	mov	r1, r2
 800933c:	602b      	str	r3, [r5, #0]
 800933e:	f7f8 fe4d 	bl	8001fdc <_kill>
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	d102      	bne.n	800934c <_kill_r+0x1c>
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	b103      	cbz	r3, 800934c <_kill_r+0x1c>
 800934a:	6023      	str	r3, [r4, #0]
 800934c:	bd38      	pop	{r3, r4, r5, pc}
 800934e:	bf00      	nop
 8009350:	200003bc 	.word	0x200003bc

08009354 <_getpid_r>:
 8009354:	f7f8 be3a 	b.w	8001fcc <_getpid>

08009358 <__sread>:
 8009358:	b510      	push	{r4, lr}
 800935a:	460c      	mov	r4, r1
 800935c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009360:	f000 f894 	bl	800948c <_read_r>
 8009364:	2800      	cmp	r0, #0
 8009366:	bfab      	itete	ge
 8009368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800936a:	89a3      	ldrhlt	r3, [r4, #12]
 800936c:	181b      	addge	r3, r3, r0
 800936e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009372:	bfac      	ite	ge
 8009374:	6563      	strge	r3, [r4, #84]	; 0x54
 8009376:	81a3      	strhlt	r3, [r4, #12]
 8009378:	bd10      	pop	{r4, pc}

0800937a <__swrite>:
 800937a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937e:	461f      	mov	r7, r3
 8009380:	898b      	ldrh	r3, [r1, #12]
 8009382:	05db      	lsls	r3, r3, #23
 8009384:	4605      	mov	r5, r0
 8009386:	460c      	mov	r4, r1
 8009388:	4616      	mov	r6, r2
 800938a:	d505      	bpl.n	8009398 <__swrite+0x1e>
 800938c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009390:	2302      	movs	r3, #2
 8009392:	2200      	movs	r2, #0
 8009394:	f000 f868 	bl	8009468 <_lseek_r>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800939e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	4632      	mov	r2, r6
 80093a6:	463b      	mov	r3, r7
 80093a8:	4628      	mov	r0, r5
 80093aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093ae:	f000 b817 	b.w	80093e0 <_write_r>

080093b2 <__sseek>:
 80093b2:	b510      	push	{r4, lr}
 80093b4:	460c      	mov	r4, r1
 80093b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ba:	f000 f855 	bl	8009468 <_lseek_r>
 80093be:	1c43      	adds	r3, r0, #1
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	bf15      	itete	ne
 80093c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80093c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093ce:	81a3      	strheq	r3, [r4, #12]
 80093d0:	bf18      	it	ne
 80093d2:	81a3      	strhne	r3, [r4, #12]
 80093d4:	bd10      	pop	{r4, pc}

080093d6 <__sclose>:
 80093d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093da:	f000 b813 	b.w	8009404 <_close_r>
	...

080093e0 <_write_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d07      	ldr	r5, [pc, #28]	; (8009400 <_write_r+0x20>)
 80093e4:	4604      	mov	r4, r0
 80093e6:	4608      	mov	r0, r1
 80093e8:	4611      	mov	r1, r2
 80093ea:	2200      	movs	r2, #0
 80093ec:	602a      	str	r2, [r5, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	f7f8 fe2b 	bl	800204a <_write>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d102      	bne.n	80093fe <_write_r+0x1e>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b103      	cbz	r3, 80093fe <_write_r+0x1e>
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	200003bc 	.word	0x200003bc

08009404 <_close_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d06      	ldr	r5, [pc, #24]	; (8009420 <_close_r+0x1c>)
 8009408:	2300      	movs	r3, #0
 800940a:	4604      	mov	r4, r0
 800940c:	4608      	mov	r0, r1
 800940e:	602b      	str	r3, [r5, #0]
 8009410:	f7f8 fe37 	bl	8002082 <_close>
 8009414:	1c43      	adds	r3, r0, #1
 8009416:	d102      	bne.n	800941e <_close_r+0x1a>
 8009418:	682b      	ldr	r3, [r5, #0]
 800941a:	b103      	cbz	r3, 800941e <_close_r+0x1a>
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	200003bc 	.word	0x200003bc

08009424 <_fstat_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d07      	ldr	r5, [pc, #28]	; (8009444 <_fstat_r+0x20>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	4611      	mov	r1, r2
 8009430:	602b      	str	r3, [r5, #0]
 8009432:	f7f8 fe32 	bl	800209a <_fstat>
 8009436:	1c43      	adds	r3, r0, #1
 8009438:	d102      	bne.n	8009440 <_fstat_r+0x1c>
 800943a:	682b      	ldr	r3, [r5, #0]
 800943c:	b103      	cbz	r3, 8009440 <_fstat_r+0x1c>
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	bd38      	pop	{r3, r4, r5, pc}
 8009442:	bf00      	nop
 8009444:	200003bc 	.word	0x200003bc

08009448 <_isatty_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d06      	ldr	r5, [pc, #24]	; (8009464 <_isatty_r+0x1c>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	602b      	str	r3, [r5, #0]
 8009454:	f7f8 fe31 	bl	80020ba <_isatty>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_isatty_r+0x1a>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_isatty_r+0x1a>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	200003bc 	.word	0x200003bc

08009468 <_lseek_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	; (8009488 <_lseek_r+0x20>)
 800946c:	4604      	mov	r4, r0
 800946e:	4608      	mov	r0, r1
 8009470:	4611      	mov	r1, r2
 8009472:	2200      	movs	r2, #0
 8009474:	602a      	str	r2, [r5, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	f7f8 fe2a 	bl	80020d0 <_lseek>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_lseek_r+0x1e>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_lseek_r+0x1e>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	200003bc 	.word	0x200003bc

0800948c <_read_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d07      	ldr	r5, [pc, #28]	; (80094ac <_read_r+0x20>)
 8009490:	4604      	mov	r4, r0
 8009492:	4608      	mov	r0, r1
 8009494:	4611      	mov	r1, r2
 8009496:	2200      	movs	r2, #0
 8009498:	602a      	str	r2, [r5, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	f7f8 fdb8 	bl	8002010 <_read>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_read_r+0x1e>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_read_r+0x1e>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	200003bc 	.word	0x200003bc

080094b0 <_init>:
 80094b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b2:	bf00      	nop
 80094b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b6:	bc08      	pop	{r3}
 80094b8:	469e      	mov	lr, r3
 80094ba:	4770      	bx	lr

080094bc <_fini>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	bf00      	nop
 80094c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c2:	bc08      	pop	{r3}
 80094c4:	469e      	mov	lr, r3
 80094c6:	4770      	bx	lr
